{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.9", "generated_at": "2023-10-17T14:55:03.572049Z", "invocation_id": "7f86fc9e-ceea-4c33-8df9-3b668264d880", "env": {}, "project_id": "9d28301f7cd0f616a96d166c35e48c62", "user_id": "608429bc-f094-433c-9e5d-06362aeef4f2", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.evmos_models.gov__fact_validators": {"database": "EVMOS", "schema": "gov", "name": "gov__fact_validators", "resource_type": "model", "package_name": "evmos_models", "path": "gold/gov/gov__fact_validators.sql", "original_file_path": "models/gold/gov/gov__fact_validators.sql", "unique_id": "model.evmos_models.gov__fact_validators", "fqn": ["evmos_models", "gold", "gov", "gov__fact_validators"], "alias": "fact_validators", "checksum": {"name": "sha256", "checksum": "f3a2841b84a1962c06780115d83e8d31ed3d2d6f3abadc3e60e3cfd503fd1e42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Information about all active and inactive set validators on Evmos.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Address unique to an individual wallet, validator, or token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Cosmos. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project the label belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR_SHARES": {"name": "DELEGATOR_SHARES", "description": "The number of tokens staked to the validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "JAILED": {"name": "JAILED", "description": "FALSE when a validator is not jailed, TRUE when a validator is jailed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATE": {"name": "RATE", "description": "The current commission rate the validator is charging stakers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_CHANGE_RATE": {"name": "MAX_CHANGE_RATE", "description": "The maximum rate at which a validator can change their commission per day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_RATE": {"name": "MAX_RATE", "description": "The maximum commission rate that the validator can charge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_SELF_DELEGATION": {"name": "MIN_SELF_DELEGATION", "description": "The minimum number of Evmos tokens that the operator must be staking with their own validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RANK": {"name": "RANK", "description": "The rank of the validator in the validator set. Rank is determined by the number of Evmos tokens staked to the validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "Additional details about the validator or token in json format.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/gov/gov__fact_validators.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554506.552837, "relation_name": "EVMOS.gov.fact_validators", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    address,\n    blockchain,\n    creator,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    delegator_shares,\n    jailed,\n    rate,\n    max_change_rate,\n    max_rate,\n    min_self_delegation,\n    RANK,\n    raw_metadata\nFROM\n    {{ ref('silver__validators') }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    address,\n    blockchain,\n    creator,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    delegator_shares,\n    jailed,\n    rate,\n    max_change_rate,\n    max_rate,\n    min_self_delegation,\n    RANK,\n    raw_metadata\nFROM\n    EVMOS.silver.validators", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.core__dim_labels": {"database": "EVMOS", "schema": "core", "name": "core__dim_labels", "resource_type": "model", "package_name": "evmos_models", "path": "gold/core/core__dim_labels.sql", "original_file_path": "models/gold/core/core__dim_labels.sql", "unique_id": "model.evmos_models.core__dim_labels", "fqn": ["evmos_models", "gold", "core", "core__dim_labels"], "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "b41f550d82c1594b548f4eed021cf7016a7874c4927328d5dc3a8523ea3b7d93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A hand curated table containing address names / labels for popular contracts, validators, tokens, etc.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "A field available for tokens that contains decimal information", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/core/core__dim_labels.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table"}, "created_at": 1697554507.1978993, "relation_name": "EVMOS.core.dim_labels", "raw_code": "{{ config(\n    materialized = 'table'\n) }}\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    address_name AS address_name,\n    NULL AS raw_metadata\nFROM\n    {{ ref(\n        'silver__labels'\n    ) }}\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    label AS address_name,\n    raw_metadata\nFROM\n    {{ ref('core__dim_tokens') }}\nWHERE\n    blockchain = 'evmos'\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    label AS address_name,\n    NULL AS raw_metadata\nFROM\n    {{ ref('core__fact_validators') }}\nWHERE\n    blockchain = 'evmos'", "language": "sql", "refs": [["silver__labels"], ["core__dim_tokens"], ["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.silver__labels", "model.evmos_models.core__dim_tokens", "model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_labels.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    address_name AS address_name,\n    NULL AS raw_metadata\nFROM\n    EVMOS.silver.labels\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    label AS address_name,\n    raw_metadata\nFROM\n    EVMOS.core.dim_tokens\nWHERE\n    blockchain = 'evmos'\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    label AS address_name,\n    NULL AS raw_metadata\nFROM\n    EVMOS.core.fact_validators\nWHERE\n    blockchain = 'evmos'", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.core__fact_msgs": {"database": "EVMOS", "schema": "core", "name": "core__fact_msgs", "resource_type": "model", "package_name": "evmos_models", "path": "gold/core/core__fact_msgs.sql", "original_file_path": "models/gold/core/core__fact_msgs.sql", "unique_id": "model.evmos_models.core__fact_msgs", "fqn": ["evmos_models", "gold", "core", "core__fact_msgs"], "alias": "fact_msgs", "checksum": {"name": "sha256", "checksum": "3611272fc30d781f722b043b8233be5e963c03c907d7a68cbdced419ae0bf8ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all message attributes associated to messages that have occurred on Evmos. This schema is currently in lite mode, and contains data back to DATE.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "Short for \"message index,\" the position in which messages occur in a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "A string containing information about the type of message occurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG": {"name": "MSG", "description": "A block of json that contains the message attributes in base64 encoding.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/core/core__fact_msgs.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554507.2964516, "relation_name": "EVMOS.core.fact_msgs", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    CONCAT(\n        msg_group,\n        ':',\n        msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    msg\nFROM\n    {{ ref('silver__msgs') }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    CONCAT(\n        msg_group,\n        ':',\n        msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    msg\nFROM\n    EVMOS.silver.msgs", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.core__fact_transfers": {"database": "EVMOS", "schema": "core", "name": "core__fact_transfers", "resource_type": "model", "package_name": "evmos_models", "path": "gold/core/core__fact_transfers.sql", "original_file_path": "models/gold/core/core__fact_transfers.sql", "unique_id": "model.evmos_models.core__fact_transfers", "fqn": ["evmos_models", "gold", "core", "core__fact_transfers"], "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "8672da3940c0748f9769e609243b97b7e9b8ce38eb7515b53e902fb0e3168967"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all transfers on Evmos. This schema is currently in lite mode and contains data back to DATE.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "Details on the type of transfer occurring during the transaction. \"Transfer_In\" = depositing tokens onto the Cosmos Hub. \"Transfer_out\" = withdrawing tokens from the Cosmos Hub. \"Cosmos\" = wallet to wallet transfer on the Cosmos Hub.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The wallet address of the individual sent tokens in the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY": {"name": "CURRENCY", "description": "The currency that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "The wallet address of the individual received tokens in the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/core/core__fact_transfers.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554507.059973, "relation_name": "EVMOS.core.fact_transfers", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    receiver\nFROM\n    {{ ref('silver__transfers') }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    receiver\nFROM\n    EVMOS.silver.transfers", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.core__fact_validators": {"database": "EVMOS", "schema": "core", "name": "core__fact_validators", "resource_type": "model", "package_name": "evmos_models", "path": "gold/core/core__fact_validators.sql", "original_file_path": "models/gold/core/core__fact_validators.sql", "unique_id": "model.evmos_models.core__fact_validators", "fqn": ["evmos_models", "gold", "core", "core__fact_validators"], "alias": "fact_validators", "checksum": {"name": "sha256", "checksum": "b17c3a8600fa3e4f0b9a09b6e251d3b8a064e9acdd2b281038b32cb0031c6238"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Deprecating soon: This is a notice that we're replacing this table with gov.fact_validators. Please migrate queries to the new table by 9/14/23. There will be no column changes or any other changes of any kind.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Address unique to an individual wallet, validator, or token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Cosmos. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project the label belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR_SHARES": {"name": "DELEGATOR_SHARES", "description": "The number of tokens staked to the validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "JAILED": {"name": "JAILED", "description": "FALSE when a validator is not jailed, TRUE when a validator is jailed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATE": {"name": "RATE", "description": "The current commission rate the validator is charging stakers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_CHANGE_RATE": {"name": "MAX_CHANGE_RATE", "description": "The maximum rate at which a validator can change their commission per day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_RATE": {"name": "MAX_RATE", "description": "The maximum commission rate that the validator can charge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_SELF_DELEGATION": {"name": "MIN_SELF_DELEGATION", "description": "The minimum number of Evmos tokens that the operator must be staking with their own validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RANK": {"name": "RANK", "description": "The rank of the validator in the validator set. Rank is determined by the number of Evmos tokens staked to the validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "Additional details about the validator or token in json format.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/core/core__fact_validators.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554506.7950947, "relation_name": "EVMOS.core.fact_validators", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('gov__fact_validators') }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    *\nFROM\n    EVMOS.gov.fact_validators", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.core__fact_msg_attributes": {"database": "EVMOS", "schema": "core", "name": "core__fact_msg_attributes", "resource_type": "model", "package_name": "evmos_models", "path": "gold/core/core__fact_msg_attributes.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.sql", "unique_id": "model.evmos_models.core__fact_msg_attributes", "fqn": ["evmos_models", "gold", "core", "core__fact_msg_attributes"], "alias": "fact_msg_attributes", "checksum": {"name": "sha256", "checksum": "102ea1895ac837e4680606023d6752d2b7244ed02eb089f7525ac1f4dfcae99d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all message attributes associated to messages that have occurred on Evmos. This schema is currently in lite mode, and contains data back to DATE.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "Short for \"message index,\" the position in which messages occur in a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "A string containing information about the type of message occurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_KEY": {"name": "ATTRIBUTE_KEY", "description": "They key from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_VALUE": {"name": "ATTRIBUTE_VALUE", "description": "They value from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/core/core__fact_msg_attributes.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554507.1275887, "relation_name": "EVMOS.core.fact_msg_attributes", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    CONCAT(\n        msg_group,\n        ':',\n        msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    attribute_index,\n    attribute_key,\n    attribute_value\nFROM\n    {{ ref('silver__msg_attributes') }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    CONCAT(\n        msg_group,\n        ':',\n        msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    attribute_index,\n    attribute_key,\n    attribute_value\nFROM\n    EVMOS.silver.msg_attributes", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.core__fact_blocks": {"database": "EVMOS", "schema": "core", "name": "core__fact_blocks", "resource_type": "model", "package_name": "evmos_models", "path": "gold/core/core__fact_blocks.sql", "original_file_path": "models/gold/core/core__fact_blocks.sql", "unique_id": "model.evmos_models.core__fact_blocks", "fqn": ["evmos_models", "gold", "core", "core__fact_blocks"], "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "96f91ba9b5e2a34cad83ee5ac1f82dc2d11a688594231ba8b6e03b64d15e0101"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all blocks that have occurred on Evmos. This schema is currently in lite mode, and contains data back to DATE.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transactions that occurred during a block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER_ADDRESS": {"name": "PROPOSER_ADDRESS", "description": "The address of the validator that proposed the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_HASH": {"name": "VALIDATOR_HASH", "description": "The root hash of the new validator set.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/core/core__fact_blocks.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554507.250123, "relation_name": "EVMOS.core.fact_blocks", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT \n    block_id, \n    block_timestamp, \n    chain_id, \n    tx_count, \n    proposer_address, \n    validator_hash\nFROM \n    {{ ref('silver__blocks') }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_blocks.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    block_id, \n    block_timestamp, \n    chain_id, \n    tx_count, \n    proposer_address, \n    validator_hash\nFROM \n    EVMOS.silver.blocks", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.core__dim_tokens": {"database": "EVMOS", "schema": "core", "name": "core__dim_tokens", "resource_type": "model", "package_name": "evmos_models", "path": "gold/core/core__dim_tokens.sql", "original_file_path": "models/gold/core/core__dim_tokens.sql", "unique_id": "model.evmos_models.core__dim_tokens", "fqn": ["evmos_models", "gold", "core", "core__dim_tokens"], "alias": "dim_tokens", "checksum": {"name": "sha256", "checksum": "e1dc9832e31150346e755592c609ab37414140dd7a886d71089b3978163af59d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains token metadata for assets on the Evmos blockchain. This table was sourced from an API and may not contain every token.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Address unique to an individual wallet, validator, or token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Cosmos. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project the label belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALIAS": {"name": "ALIAS", "description": "A secondary address for the token, where available", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "Divide the amount by POW(10, decimal) to get the amount used in the transaction. This value can be NULL, as decimals are hand curated from an outside source and not found on-chain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "Additional details about the validator or token in json format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_KEY": {"name": "UNIQUE_KEY", "description": "The unique key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/core/core__dim_tokens.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table"}, "created_at": 1697554506.7010987, "relation_name": "EVMOS.core.dim_tokens", "raw_code": "{{ config(\n    materialized = 'table'\n) }}\n\nSELECT\n    'evmos' AS blockchain,\n    address,\n    creator,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    alias,\n    DECIMAL,\n    raw_metadata, \n    concat_ws(\n        '-',\n        address,\n        creator,\n        blockchain\n    ) AS unique_key\nFROM\n    {{ source(\n        'osmo',\n        'asset_metadata'\n    ) }}", "language": "sql", "refs": [], "sources": [["osmo", "asset_metadata"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.evmos_models.osmo.asset_metadata"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    'evmos' AS blockchain,\n    address,\n    creator,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    alias,\n    DECIMAL,\n    raw_metadata, \n    concat_ws(\n        '-',\n        address,\n        creator,\n        blockchain\n    ) AS unique_key\nFROM\n    osmosis.silver.asset_metadata", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.core__fact_transactions": {"database": "EVMOS", "schema": "core", "name": "core__fact_transactions", "resource_type": "model", "package_name": "evmos_models", "path": "gold/core/core__fact_transactions.sql", "original_file_path": "models/gold/core/core__fact_transactions.sql", "unique_id": "model.evmos_models.core__fact_transactions", "fqn": ["evmos_models", "gold", "core", "core__fact_transactions"], "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "7cacd1dad8caa44fbfa942ad9ce650d31477b663e40751abeba89cc76711de49"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all transactions that have occurred on Evmos. This schema is currently in lite mode, and contains data back to DATE.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FROM": {"name": "TX_FROM", "description": "The wallet address of the individual who initiated the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODESPACE": {"name": "CODESPACE", "description": "Namespace for the code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "The fee is paid by the initiator of the transaction. Fee = gas * gas price and is given in micro-OSMO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The amount of gas consumed by the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_WANTED": {"name": "GAS_WANTED", "description": "Amount of gas requested for a transaction. It is provided by users when the transaction is generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSGS": {"name": "MSGS", "description": "The underlying json from the messages or events within the transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/gold/core/core__fact_transactions.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554506.97674, "relation_name": "EVMOS.core.fact_transactions", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    t.tx_from,\n    t.tx_succeeded,\n    t.codespace,\n    t.fee,\n    t.gas_used,\n    t.gas_wanted,\n    t.msgs\nFROM\n    {{ ref('silver__transactions_final') }}\n    t", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    t.tx_from,\n    t.tx_succeeded,\n    t.codespace,\n    t.fee,\n    t.gas_used,\n    t.gas_wanted,\n    t.msgs\nFROM\n    EVMOS.silver.transactions_final\n    t", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_FR_eth_transactions": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_FR_eth_transactions", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_FR_eth_transactions.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_FR_eth_transactions.sql", "unique_id": "model.evmos_models.bronze__streamline_FR_eth_transactions", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_FR_eth_transactions"], "alias": "streamline_FR_eth_transactions", "checksum": {"name": "sha256", "checksum": "e1ae7f161bc280cd9ab17370d840260eb5bef37e7d1feb019eec9d49271e7aa9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.9145026, "relation_name": "EVMOS.bronze.streamline_FR_eth_transactions", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{{ streamline_external_table_FR_query(\n    \"eth_transactions\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "eth_transactions"], ["bronze_streamline", "eth_transactions"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_FR_query"], "nodes": ["source.evmos_models.bronze_streamline.eth_transactions", "source.evmos_models.bronze_streamline.eth_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_FR_eth_transactions.sql", "compiled": true, "compiled_code": "\n\n\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => 'streamline.EVMOS.eth_transactions'\n                )\n            ) A\n    )\nSELECT\n    block_number,\n    DATA,\n    _inserted_timestamp,\n    MD5(\n        CAST(\n            COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n        )\n    ) AS id,\n    s._partition_by_block_id,\n    s.value AS VALUE\nFROM\n    streamline.EVMOS.eth_transactions\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b._partition_by_block_id = s._partition_by_block_id\nWHERE\n    b._partition_by_block_id = s._partition_by_block_id\n    AND (\n        DATA :error :code IS NULL\n        OR DATA :error :code NOT IN (\n            '-32000',\n            '-32001',\n            '-32002',\n            '-32003',\n            '-32004',\n            '-32005',\n            '-32006',\n            '-32007',\n            '-32008',\n            '-32009',\n            '-32010'\n        )\n    )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_FR_tendermint_validators": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_FR_tendermint_validators", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_FR_tendermint_validators.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_FR_tendermint_validators.sql", "unique_id": "model.evmos_models.bronze__streamline_FR_tendermint_validators", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_FR_tendermint_validators"], "alias": "streamline_FR_tendermint_validators", "checksum": {"name": "sha256", "checksum": "fc3faa7ed8582cff515fa23721ab9b1f310ccad59743e3bfd413cdf358fe24b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.926332, "relation_name": "EVMOS.bronze.streamline_FR_tendermint_validators", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{{ streamline_external_table_FR_query(\n    \"tendermint_validators\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "tendermint_validators"], ["bronze_streamline", "tendermint_validators"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_FR_query"], "nodes": ["source.evmos_models.bronze_streamline.tendermint_validators", "source.evmos_models.bronze_streamline.tendermint_validators"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_FR_tendermint_validators.sql", "compiled": true, "compiled_code": "\n\n\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => 'streamline.EVMOS.tendermint_validators'\n                )\n            ) A\n    )\nSELECT\n    block_number,\n    DATA,\n    _inserted_timestamp,\n    MD5(\n        CAST(\n            COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n        )\n    ) AS id,\n    s._partition_by_block_id,\n    s.value AS VALUE\nFROM\n    streamline.EVMOS.tendermint_validators\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b._partition_by_block_id = s._partition_by_block_id\nWHERE\n    b._partition_by_block_id = s._partition_by_block_id\n    AND (\n        DATA :error :code IS NULL\n        OR DATA :error :code NOT IN (\n            '-32000',\n            '-32001',\n            '-32002',\n            '-32003',\n            '-32004',\n            '-32005',\n            '-32006',\n            '-32007',\n            '-32008',\n            '-32009',\n            '-32010'\n        )\n    )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_eth_blocks": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_eth_blocks", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_eth_blocks.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_eth_blocks.sql", "unique_id": "model.evmos_models.bronze__streamline_eth_blocks", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_eth_blocks"], "alias": "streamline_eth_blocks", "checksum": {"name": "sha256", "checksum": "656ad58b48734b01747d15bdd78e9d07a4c91034d8d4f5af85ccca6f85583bfc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.935298, "relation_name": "EVMOS.bronze.streamline_eth_blocks", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{% set model = this.identifier.split(\"_\") [-1] %}\n{{ streamline_external_table_query(\n    \"eth_blocks\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "eth_blocks"], ["bronze_streamline", "eth_blocks"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_query"], "nodes": ["source.evmos_models.bronze_streamline.eth_blocks", "source.evmos_models.bronze_streamline.eth_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_eth_blocks.sql", "compiled": true, "compiled_code": "\n\n\n\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -7, CURRENT_TIMESTAMP()),\n                    table_name => 'streamline.EVMOS.eth_blocks')\n                ) A\n            )\n        SELECT\n            block_number,\n            DATA,\n            _inserted_timestamp,\n            MD5(\n                CAST(\n                    COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n                )\n            ) AS id,\n            s._partition_by_block_id,\n            s.value AS VALUE\n        FROM\n            streamline.EVMOS.eth_blocks\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b._partition_by_block_id = s._partition_by_block_id\n        WHERE\n            b._partition_by_block_id = s._partition_by_block_id\n            AND (\n                DATA :error :code IS NULL\n                OR DATA :error :code NOT IN (\n                    '-32000',\n                    '-32001',\n                    '-32002',\n                    '-32003',\n                    '-32004',\n                    '-32005',\n                    '-32006',\n                    '-32007',\n                    '-32008',\n                    '-32009',\n                    '-32010'\n                )\n            )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_FR_eth_blocks": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_FR_eth_blocks", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_FR_eth_blocks.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_FR_eth_blocks.sql", "unique_id": "model.evmos_models.bronze__streamline_FR_eth_blocks", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_FR_eth_blocks"], "alias": "streamline_FR_eth_blocks", "checksum": {"name": "sha256", "checksum": "acfe4020d132309140f295ca14eb98c81debc0a2c8ee9994c1642331d65511a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.9481735, "relation_name": "EVMOS.bronze.streamline_FR_eth_blocks", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{{ streamline_external_table_FR_query(\n    \"eth_blocks\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "eth_blocks"], ["bronze_streamline", "eth_blocks"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_FR_query"], "nodes": ["source.evmos_models.bronze_streamline.eth_blocks", "source.evmos_models.bronze_streamline.eth_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_FR_eth_blocks.sql", "compiled": true, "compiled_code": "\n\n\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => 'streamline.EVMOS.eth_blocks'\n                )\n            ) A\n    )\nSELECT\n    block_number,\n    DATA,\n    _inserted_timestamp,\n    MD5(\n        CAST(\n            COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n        )\n    ) AS id,\n    s._partition_by_block_id,\n    s.value AS VALUE\nFROM\n    streamline.EVMOS.eth_blocks\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b._partition_by_block_id = s._partition_by_block_id\nWHERE\n    b._partition_by_block_id = s._partition_by_block_id\n    AND (\n        DATA :error :code IS NULL\n        OR DATA :error :code NOT IN (\n            '-32000',\n            '-32001',\n            '-32002',\n            '-32003',\n            '-32004',\n            '-32005',\n            '-32006',\n            '-32007',\n            '-32008',\n            '-32009',\n            '-32010'\n        )\n    )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_eth_transactions": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_eth_transactions", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_eth_transactions.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_eth_transactions.sql", "unique_id": "model.evmos_models.bronze__streamline_eth_transactions", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_eth_transactions"], "alias": "streamline_eth_transactions", "checksum": {"name": "sha256", "checksum": "3cc3efdef32591a650816688f1b7ebb48fceb285073dcbbe2879640c275817e4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.9571443, "relation_name": "EVMOS.bronze.streamline_eth_transactions", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{% set model = this.identifier.split(\"_\") [-1] %}\n{{ streamline_external_table_query(\n    \"eth_transactions\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "eth_transactions"], ["bronze_streamline", "eth_transactions"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_query"], "nodes": ["source.evmos_models.bronze_streamline.eth_transactions", "source.evmos_models.bronze_streamline.eth_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_eth_transactions.sql", "compiled": true, "compiled_code": "\n\n\n\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -7, CURRENT_TIMESTAMP()),\n                    table_name => 'streamline.EVMOS.eth_transactions')\n                ) A\n            )\n        SELECT\n            block_number,\n            DATA,\n            _inserted_timestamp,\n            MD5(\n                CAST(\n                    COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n                )\n            ) AS id,\n            s._partition_by_block_id,\n            s.value AS VALUE\n        FROM\n            streamline.EVMOS.eth_transactions\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b._partition_by_block_id = s._partition_by_block_id\n        WHERE\n            b._partition_by_block_id = s._partition_by_block_id\n            AND (\n                DATA :error :code IS NULL\n                OR DATA :error :code NOT IN (\n                    '-32000',\n                    '-32001',\n                    '-32002',\n                    '-32003',\n                    '-32004',\n                    '-32005',\n                    '-32006',\n                    '-32007',\n                    '-32008',\n                    '-32009',\n                    '-32010'\n                )\n            )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_FR_tendermint_transactions": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_FR_tendermint_transactions", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_FR_tendermint_transactions.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_FR_tendermint_transactions.sql", "unique_id": "model.evmos_models.bronze__streamline_FR_tendermint_transactions", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_FR_tendermint_transactions"], "alias": "streamline_FR_tendermint_transactions", "checksum": {"name": "sha256", "checksum": "74330dd72b025583f1538b23eaca878296108451961ceb8879ae7c33d6c732b5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.966662, "relation_name": "EVMOS.bronze.streamline_FR_tendermint_transactions", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{{ streamline_external_table_FR_query(\n    \"tendermint_transactions\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "tendermint_transactions"], ["bronze_streamline", "tendermint_transactions"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_FR_query"], "nodes": ["source.evmos_models.bronze_streamline.tendermint_transactions", "source.evmos_models.bronze_streamline.tendermint_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_FR_tendermint_transactions.sql", "compiled": true, "compiled_code": "\n\n\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => 'streamline.EVMOS.tendermint_transactions'\n                )\n            ) A\n    )\nSELECT\n    block_number,\n    DATA,\n    _inserted_timestamp,\n    MD5(\n        CAST(\n            COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n        )\n    ) AS id,\n    s._partition_by_block_id,\n    s.value AS VALUE\nFROM\n    streamline.EVMOS.tendermint_transactions\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b._partition_by_block_id = s._partition_by_block_id\nWHERE\n    b._partition_by_block_id = s._partition_by_block_id\n    AND (\n        DATA :error :code IS NULL\n        OR DATA :error :code NOT IN (\n            '-32000',\n            '-32001',\n            '-32002',\n            '-32003',\n            '-32004',\n            '-32005',\n            '-32006',\n            '-32007',\n            '-32008',\n            '-32009',\n            '-32010'\n        )\n    )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_tendermint_validators": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_tendermint_validators", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_tendermint_validators.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_tendermint_validators.sql", "unique_id": "model.evmos_models.bronze__streamline_tendermint_validators", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_tendermint_validators"], "alias": "streamline_tendermint_validators", "checksum": {"name": "sha256", "checksum": "57010c32f8222185100c8ae5366749f8648540f1890da1c12df5cbc6afae865c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.9759653, "relation_name": "EVMOS.bronze.streamline_tendermint_validators", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{% set model = this.identifier.split(\"_\") [-1] %}\n{{ streamline_external_table_query(\n    \"tendermint_validators\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "tendermint_validators"], ["bronze_streamline", "tendermint_validators"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_query"], "nodes": ["source.evmos_models.bronze_streamline.tendermint_validators", "source.evmos_models.bronze_streamline.tendermint_validators"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_tendermint_validators.sql", "compiled": true, "compiled_code": "\n\n\n\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -7, CURRENT_TIMESTAMP()),\n                    table_name => 'streamline.EVMOS.tendermint_validators')\n                ) A\n            )\n        SELECT\n            block_number,\n            DATA,\n            _inserted_timestamp,\n            MD5(\n                CAST(\n                    COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n                )\n            ) AS id,\n            s._partition_by_block_id,\n            s.value AS VALUE\n        FROM\n            streamline.EVMOS.tendermint_validators\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b._partition_by_block_id = s._partition_by_block_id\n        WHERE\n            b._partition_by_block_id = s._partition_by_block_id\n            AND (\n                DATA :error :code IS NULL\n                OR DATA :error :code NOT IN (\n                    '-32000',\n                    '-32001',\n                    '-32002',\n                    '-32003',\n                    '-32004',\n                    '-32005',\n                    '-32006',\n                    '-32007',\n                    '-32008',\n                    '-32009',\n                    '-32010'\n                )\n            )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_FR_tendermint_blocks": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_FR_tendermint_blocks", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_FR_tendermint_blocks.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_FR_tendermint_blocks.sql", "unique_id": "model.evmos_models.bronze__streamline_FR_tendermint_blocks", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_FR_tendermint_blocks"], "alias": "streamline_FR_tendermint_blocks", "checksum": {"name": "sha256", "checksum": "9bf5a3038dd638ef94857c49cb238bd36a03a0867570da8b478a0d5f69f658a1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.9864311, "relation_name": "EVMOS.bronze.streamline_FR_tendermint_blocks", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{{ streamline_external_table_FR_query(\n    \"tendermint_blocks\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "tendermint_blocks"], ["bronze_streamline", "tendermint_blocks"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_FR_query"], "nodes": ["source.evmos_models.bronze_streamline.tendermint_blocks", "source.evmos_models.bronze_streamline.tendermint_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_FR_tendermint_blocks.sql", "compiled": true, "compiled_code": "\n\n\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => 'streamline.EVMOS.tendermint_blocks'\n                )\n            ) A\n    )\nSELECT\n    block_number,\n    DATA,\n    _inserted_timestamp,\n    MD5(\n        CAST(\n            COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n        )\n    ) AS id,\n    s._partition_by_block_id,\n    s.value AS VALUE\nFROM\n    streamline.EVMOS.tendermint_blocks\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b._partition_by_block_id = s._partition_by_block_id\nWHERE\n    b._partition_by_block_id = s._partition_by_block_id\n    AND (\n        DATA :error :code IS NULL\n        OR DATA :error :code NOT IN (\n            '-32000',\n            '-32001',\n            '-32002',\n            '-32003',\n            '-32004',\n            '-32005',\n            '-32006',\n            '-32007',\n            '-32008',\n            '-32009',\n            '-32010'\n        )\n    )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_tendermint_blocks": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_tendermint_blocks", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_tendermint_blocks.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_tendermint_blocks.sql", "unique_id": "model.evmos_models.bronze__streamline_tendermint_blocks", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_tendermint_blocks"], "alias": "streamline_tendermint_blocks", "checksum": {"name": "sha256", "checksum": "ac9257d8f91d41500907f569b7b73a82f7780c170cad15f716f49f4959db02bb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554505.9969301, "relation_name": "EVMOS.bronze.streamline_tendermint_blocks", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{% set model = this.identifier.split(\"_\") [-1] %}\n{{ streamline_external_table_query(\n    \"tendermint_blocks\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "tendermint_blocks"], ["bronze_streamline", "tendermint_blocks"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_query"], "nodes": ["source.evmos_models.bronze_streamline.tendermint_blocks", "source.evmos_models.bronze_streamline.tendermint_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_tendermint_blocks.sql", "compiled": true, "compiled_code": "\n\n\n\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -7, CURRENT_TIMESTAMP()),\n                    table_name => 'streamline.EVMOS.tendermint_blocks')\n                ) A\n            )\n        SELECT\n            block_number,\n            DATA,\n            _inserted_timestamp,\n            MD5(\n                CAST(\n                    COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n                )\n            ) AS id,\n            s._partition_by_block_id,\n            s.value AS VALUE\n        FROM\n            streamline.EVMOS.tendermint_blocks\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b._partition_by_block_id = s._partition_by_block_id\n        WHERE\n            b._partition_by_block_id = s._partition_by_block_id\n            AND (\n                DATA :error :code IS NULL\n                OR DATA :error :code NOT IN (\n                    '-32000',\n                    '-32001',\n                    '-32002',\n                    '-32003',\n                    '-32004',\n                    '-32005',\n                    '-32006',\n                    '-32007',\n                    '-32008',\n                    '-32009',\n                    '-32010'\n                )\n            )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze__streamline_tendermint_transactions": {"database": "EVMOS", "schema": "bronze", "name": "bronze__streamline_tendermint_transactions", "resource_type": "model", "package_name": "evmos_models", "path": "bronze/streamline/bronze__streamline_tendermint_transactions.sql", "original_file_path": "models/bronze/streamline/bronze__streamline_tendermint_transactions.sql", "unique_id": "model.evmos_models.bronze__streamline_tendermint_transactions", "fqn": ["evmos_models", "bronze", "streamline", "bronze__streamline_tendermint_transactions"], "alias": "streamline_tendermint_transactions", "checksum": {"name": "sha256", "checksum": "66d3d12d33faf93de126e57dd2dee016fd9c3d095640534e1bf7ab31f38dd4f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1697554506.0067494, "relation_name": "EVMOS.bronze.streamline_tendermint_transactions", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\n{% set model = this.identifier.split(\"_\") [-1] %}\n{{ streamline_external_table_query(\n    \"tendermint_transactions\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\",\n    partition_name = \"_partition_by_block_id\",\n    unique_key = \"block_number\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "tendermint_transactions"], ["bronze_streamline", "tendermint_transactions"]], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.streamline_external_table_query"], "nodes": ["source.evmos_models.bronze_streamline.tendermint_transactions", "source.evmos_models.bronze_streamline.tendermint_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/bronze/streamline/bronze__streamline_tendermint_transactions.sql", "compiled": true, "compiled_code": "\n\n\n\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER ) AS _partition_by_block_id\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -7, CURRENT_TIMESTAMP()),\n                    table_name => 'streamline.EVMOS.tendermint_transactions')\n                ) A\n            )\n        SELECT\n            block_number,\n            DATA,\n            _inserted_timestamp,\n            MD5(\n                CAST(\n                    COALESCE(CAST(block_number AS text), '' :: STRING) AS text\n                )\n            ) AS id,\n            s._partition_by_block_id,\n            s.value AS VALUE\n        FROM\n            streamline.EVMOS.tendermint_transactions\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b._partition_by_block_id = s._partition_by_block_id\n        WHERE\n            b._partition_by_block_id = s._partition_by_block_id\n            AND (\n                DATA :error :code IS NULL\n                OR DATA :error :code NOT IN (\n                    '-32000',\n                    '-32001',\n                    '-32002',\n                    '-32003',\n                    '-32004',\n                    '-32005',\n                    '-32006',\n                    '-32007',\n                    '-32008',\n                    '-32009',\n                    '-32010'\n                )\n            )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__blocks": {"database": "EVMOS", "schema": "streamline", "name": "streamline__blocks", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/streamline__blocks.sql", "original_file_path": "models/streamline/streamline__blocks.sql", "unique_id": "model.evmos_models.streamline__blocks", "fqn": ["evmos_models", "streamline", "streamline__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "8fba494f2cfbe175daa1daa972a8578b8a9ed18fc0c78821f314cb81e4cd6615"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["streamline_view"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_view"]}, "created_at": 1697554506.016192, "relation_name": "EVMOS.streamline.blocks", "raw_code": "{{ config (\n    materialized = \"view\",\n    tags = ['streamline_view']\n) }}\n\n{% if execute %}\n    {% set height = run_query('SELECT streamline.udf_get_chainhead()') %}\n    {% set block_height = height.columns [0].values() [0] %}\n{% else %}\n    {% set block_height = 0 %}\n{% endif %}\n\nSELECT\n    height AS block_number,\n    REPLACE(\n        concat_ws('', '0x', to_char(block_number, 'XXXXXXXX')),\n        ' ',\n        ''\n    ) AS block_number_hex\nFROM\n    TABLE(streamline.udtf_get_base_table({{ block_height }}))", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.run_query"], "nodes": []}, "compiled_path": "target/compiled/evmos_models/models/streamline/streamline__blocks.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n\n\nSELECT\n    height AS block_number,\n    REPLACE(\n        concat_ws('', '0x', to_char(block_number, 'XXXXXXXX')),\n        ' ',\n        ''\n    ) AS block_number_hex\nFROM\n    TABLE(streamline.udtf_get_base_table(16542088))", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__eth_blocks_realtime": {"database": "EVMOS", "schema": "streamline", "name": "streamline__eth_blocks_realtime", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/realtime/streamline__eth_blocks_realtime.sql", "original_file_path": "models/streamline/realtime/streamline__eth_blocks_realtime.sql", "unique_id": "model.evmos_models.streamline__eth_blocks_realtime", "fqn": ["evmos_models", "streamline", "realtime", "streamline__eth_blocks_realtime"], "alias": "eth_blocks_realtime", "checksum": {"name": "sha256", "checksum": "ddae7692432611718360a1468608349f002e1afa117bb142f5f51c4e88646e13"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        {{this.schema}}.udf_json_rpc(object_construct('url_route','eth_rpc', 'sql_source', '{{this.identifier}}', 'external_table', 'eth_blocks', 'method', 'eth_getBlockByNumber', 'producer_batch_size',1000, 'producer_limit_size', 2000000, 'worker_batch_size',100))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        {{this.schema}}.udf_json_rpc(object_construct('url_route','eth_rpc', 'sql_source', '{{this.identifier}}', 'external_table', 'eth_blocks', 'method', 'eth_getBlockByNumber', 'producer_batch_size',1000, 'producer_limit_size', 2000000, 'worker_batch_size',100))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n"]}, "created_at": 1697554506.0267746, "relation_name": "EVMOS.streamline.eth_blocks_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.udf_json_rpc(object_construct('url_route','eth_rpc', 'sql_source', '{{this.identifier}}', 'external_table', 'eth_blocks', 'method', 'eth_getBlockByNumber', 'producer_batch_size',1000, 'producer_limit_size', 2000000, 'worker_batch_size',100))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\nWITH last_3_days AS ({% if var('STREAMLINE_RUN_HISTORY') %}\n\n    SELECT\n        0 AS block_number\n    {% else %}\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        {{ ref(\"streamline__blocks\") }}\n    {% endif %}),\n    tbl AS (\n        SELECT\n            block_number,\n            block_number_hex\n        FROM\n            {{ ref(\"streamline__blocks\") }}\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number,\n            REPLACE(\n                concat_ws('', '0x', to_char(block_number, 'XXXXXXXX')),\n                ' ',\n                ''\n            ) AS block_number_hex\n        FROM\n            {{ ref(\"streamline__complete_eth_blocks\") }}\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number,\n    'eth_getBlockByNumber' AS method,\n    CONCAT(\n        block_number_hex,\n        '_-_',\n        'false'\n    ) AS params\nFROM\n    tbl", "language": "sql", "refs": [["streamline__blocks"], ["streamline__blocks"], ["streamline__complete_eth_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.if_data_call_function"], "nodes": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_eth_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/realtime/streamline__eth_blocks_realtime.sql", "compiled": true, "compiled_code": "\n\nWITH last_3_days AS (\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        EVMOS.streamline.blocks\n    ),\n    tbl AS (\n        SELECT\n            block_number,\n            block_number_hex\n        FROM\n            EVMOS.streamline.blocks\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number,\n            REPLACE(\n                concat_ws('', '0x', to_char(block_number, 'XXXXXXXX')),\n                ' ',\n                ''\n            ) AS block_number_hex\n        FROM\n            EVMOS.streamline.complete_eth_blocks\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number,\n    'eth_getBlockByNumber' AS method,\n    CONCAT(\n        block_number_hex,\n        '_-_',\n        'false'\n    ) AS params\nFROM\n    tbl", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__eth_transactions_realtime": {"database": "EVMOS", "schema": "streamline", "name": "streamline__eth_transactions_realtime", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/realtime/streamline__eth_transactions_realtime.sql", "original_file_path": "models/streamline/realtime/streamline__eth_transactions_realtime.sql", "unique_id": "model.evmos_models.streamline__eth_transactions_realtime", "fqn": ["evmos_models", "streamline", "realtime", "streamline__eth_transactions_realtime"], "alias": "eth_transactions_realtime", "checksum": {"name": "sha256", "checksum": "b8f1e50ae56f6e9246a60a9e61bc190d16dee52fcb74357574384f28cb8748b5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        {{this.schema}}.udf_json_rpc(object_construct('sql_source', '{{this.identifier}}', 'external_table', 'eth_transactions', 'exploded_key','[\"result\", \"transactions\"]', 'method', 'eth_getBlockByNumber', 'producer_batch_size',1000, 'producer_limit_size', 2000000, 'worker_batch_size',100))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        {{this.schema}}.udf_json_rpc(object_construct('sql_source', '{{this.identifier}}', 'external_table', 'eth_transactions', 'exploded_key','[\"result\", \"transactions\"]', 'method', 'eth_getBlockByNumber', 'producer_batch_size',1000, 'producer_limit_size', 2000000, 'worker_batch_size',100))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n"]}, "created_at": 1697554506.0431738, "relation_name": "EVMOS.streamline.eth_transactions_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.udf_json_rpc(object_construct('sql_source', '{{this.identifier}}', 'external_table', 'eth_transactions', 'exploded_key','[\\\"result\\\", \\\"transactions\\\"]', 'method', 'eth_getBlockByNumber', 'producer_batch_size',1000, 'producer_limit_size', 2000000, 'worker_batch_size',100))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\nWITH last_3_days AS ({% if var('STREAMLINE_RUN_HISTORY') %}\n\n    SELECT\n        0 AS block_number\n    {% else %}\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        {{ ref(\"streamline__blocks\") }}\n    {% endif %}),\n    tbl AS (\n        SELECT\n            block_number,\n            block_number_hex\n        FROM\n            {{ ref(\"streamline__blocks\") }}\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number,\n            REPLACE(\n                concat_ws('', '0x', to_char(block_number, 'XXXXXXXX')),\n                ' ',\n                ''\n            ) AS block_number_hex\n        FROM\n            {{ ref(\"streamline__complete_eth_transactions\") }}\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number,\n    'eth_getBlockByNumber' AS method,\n    CONCAT(\n        block_number_hex,\n        '_-_',\n        'true'\n    ) AS params\nFROM\n    tbl", "language": "sql", "refs": [["streamline__blocks"], ["streamline__blocks"], ["streamline__complete_eth_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.if_data_call_function"], "nodes": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_eth_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/realtime/streamline__eth_transactions_realtime.sql", "compiled": true, "compiled_code": "\n\nWITH last_3_days AS (\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        EVMOS.streamline.blocks\n    ),\n    tbl AS (\n        SELECT\n            block_number,\n            block_number_hex\n        FROM\n            EVMOS.streamline.blocks\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number,\n            REPLACE(\n                concat_ws('', '0x', to_char(block_number, 'XXXXXXXX')),\n                ' ',\n                ''\n            ) AS block_number_hex\n        FROM\n            EVMOS.streamline.complete_eth_transactions\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number,\n    'eth_getBlockByNumber' AS method,\n    CONCAT(\n        block_number_hex,\n        '_-_',\n        'true'\n    ) AS params\nFROM\n    tbl", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__tendermint_transactions_realtime": {"database": "EVMOS", "schema": "streamline", "name": "streamline__tendermint_transactions_realtime", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/realtime/streamline__tendermint_transactions_realtime.sql", "original_file_path": "models/streamline/realtime/streamline__tendermint_transactions_realtime.sql", "unique_id": "model.evmos_models.streamline__tendermint_transactions_realtime", "fqn": ["evmos_models", "streamline", "realtime", "streamline__tendermint_transactions_realtime"], "alias": "tendermint_transactions_realtime", "checksum": {"name": "sha256", "checksum": "3cfd3cd569495f5615cbf8ac8461a1d95b653a2525fc2b72dd77341cc437edb9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        {{this.schema}}.bulk_get_tendermint_transactions(object_construct('sql_source', '{{this.identifier}}'))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        {{this.schema}}.bulk_get_tendermint_transactions(object_construct('sql_source', '{{this.identifier}}'))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n"]}, "created_at": 1697554506.055291, "relation_name": "EVMOS.streamline.tendermint_transactions_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.bulk_get_tendermint_transactions(object_construct('sql_source', '{{this.identifier}}'))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\nWITH last_3_days AS ({% if var('STREAMLINE_RUN_HISTORY') %}\n\n    SELECT\n        0 AS block_number\n    {% else %}\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        {{ ref(\"streamline__blocks\") }}\n    {% endif %}),\n    tbl AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"streamline__blocks\") }}\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"streamline__complete_tendermint_transactions\") }}\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number\nFROM\n    tbl", "language": "sql", "refs": [["streamline__blocks"], ["streamline__blocks"], ["streamline__complete_tendermint_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.if_data_call_function"], "nodes": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_tendermint_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/realtime/streamline__tendermint_transactions_realtime.sql", "compiled": true, "compiled_code": "\n\nWITH last_3_days AS (\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        EVMOS.streamline.blocks\n    ),\n    tbl AS (\n        SELECT\n            block_number\n        FROM\n            EVMOS.streamline.blocks\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number\n        FROM\n            EVMOS.streamline.complete_tendermint_transactions\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number\nFROM\n    tbl", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__tendermint_blocks_realtime": {"database": "EVMOS", "schema": "streamline", "name": "streamline__tendermint_blocks_realtime", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/realtime/streamline__tendermint_blocks_realtime.sql", "original_file_path": "models/streamline/realtime/streamline__tendermint_blocks_realtime.sql", "unique_id": "model.evmos_models.streamline__tendermint_blocks_realtime", "fqn": ["evmos_models", "streamline", "realtime", "streamline__tendermint_blocks_realtime"], "alias": "tendermint_blocks_realtime", "checksum": {"name": "sha256", "checksum": "8efd2a7be56ff7c45900201f6ceea415f5f538025b0b724a41a7d9aba6e27395"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        {{this.schema}}.udf_json_rpc(object_construct('url_route','tendermint_rpc', 'sql_source', '{{this.identifier}}', 'external_table', 'tendermint_blocks', 'method', 'eth_getBlockByNumber', 'producer_batch_size',10000, 'producer_limit_size', 2000000, 'worker_batch_size',100, 'producer_batch_chunks_size', 1000))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        {{this.schema}}.udf_json_rpc(object_construct('url_route','tendermint_rpc', 'sql_source', '{{this.identifier}}', 'external_table', 'tendermint_blocks', 'method', 'eth_getBlockByNumber', 'producer_batch_size',10000, 'producer_limit_size', 2000000, 'worker_batch_size',100, 'producer_batch_chunks_size', 1000))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n"]}, "created_at": 1697554506.0669386, "relation_name": "EVMOS.streamline.tendermint_blocks_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.udf_json_rpc(object_construct('url_route','tendermint_rpc', 'sql_source', '{{this.identifier}}', 'external_table', 'tendermint_blocks', 'method', 'eth_getBlockByNumber', 'producer_batch_size',10000, 'producer_limit_size', 2000000, 'worker_batch_size',100, 'producer_batch_chunks_size', 1000))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\nWITH last_3_days AS ({% if var('STREAMLINE_RUN_HISTORY') %}\n\n    SELECT\n        0 AS block_number\n    {% else %}\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        {{ ref(\"streamline__blocks\") }}\n    {% endif %}),\n    tbl AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"streamline__blocks\") }}\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"streamline__complete_tendermint_blocks\") }}\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number,\n    'block' AS method,\n    block_number :: STRING AS params\nFROM\n    tbl", "language": "sql", "refs": [["streamline__blocks"], ["streamline__blocks"], ["streamline__complete_tendermint_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.if_data_call_function"], "nodes": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_tendermint_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/realtime/streamline__tendermint_blocks_realtime.sql", "compiled": true, "compiled_code": "\n\nWITH last_3_days AS (\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        EVMOS.streamline.blocks\n    ),\n    tbl AS (\n        SELECT\n            block_number\n        FROM\n            EVMOS.streamline.blocks\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number\n        FROM\n            EVMOS.streamline.complete_tendermint_blocks\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number,\n    'block' AS method,\n    block_number :: STRING AS params\nFROM\n    tbl", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__tendermint_validators_realtime": {"database": "EVMOS", "schema": "streamline", "name": "streamline__tendermint_validators_realtime", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/realtime/streamline__tendermint_validators_realtime.sql", "original_file_path": "models/streamline/realtime/streamline__tendermint_validators_realtime.sql", "unique_id": "model.evmos_models.streamline__tendermint_validators_realtime", "fqn": ["evmos_models", "streamline", "realtime", "streamline__tendermint_validators_realtime"], "alias": "tendermint_validators_realtime", "checksum": {"name": "sha256", "checksum": "231948133a2f2022f83ac5cb3ead20653a326376d4a88d2623fb64b417aa6aa4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        {{this.schema}}.bulk_get_tendermint_validators(object_construct('sql_source', '{{this.identifier}}'))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        {{this.schema}}.bulk_get_tendermint_validators(object_construct('sql_source', '{{this.identifier}}'))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n"]}, "created_at": 1697554506.0793152, "relation_name": "EVMOS.streamline.tendermint_validators_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.bulk_get_tendermint_validators(object_construct('sql_source', '{{this.identifier}}'))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\nWITH last_3_days AS ({% if var('STREAMLINE_RUN_HISTORY') %}\n\n    SELECT\n        0 AS block_number\n    {% else %}\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        {{ ref(\"streamline__blocks\") }}\n    {% endif %}),\n    tbl AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"streamline__blocks\") }}\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"streamline__complete_tendermint_validators\") }}\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number\nFROM\n    tbl", "language": "sql", "refs": [["streamline__blocks"], ["streamline__blocks"], ["streamline__complete_tendermint_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.if_data_call_function"], "nodes": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_tendermint_validators"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/realtime/streamline__tendermint_validators_realtime.sql", "compiled": true, "compiled_code": "\n\nWITH last_3_days AS (\n    SELECT\n        MAX(block_number) - 100000 AS block_number --aprox 3 days\n    FROM\n        EVMOS.streamline.blocks\n    ),\n    tbl AS (\n        SELECT\n            block_number\n        FROM\n            EVMOS.streamline.blocks\n        WHERE\n            (\n                block_number >= (\n                    SELECT\n                        block_number\n                    FROM\n                        last_3_days\n                )\n            )\n            AND block_number IS NOT NULL\n        EXCEPT\n        SELECT\n            block_number\n        FROM\n            EVMOS.streamline.complete_tendermint_validators\n        WHERE\n            block_number >= (\n                SELECT\n                    block_number\n                FROM\n                    last_3_days\n            )\n    )\nSELECT\n    block_number\nFROM\n    tbl", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__complete_eth_blocks": {"database": "EVMOS", "schema": "streamline", "name": "streamline__complete_eth_blocks", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/complete/streamline__complete_eth_blocks.sql", "original_file_path": "models/streamline/complete/streamline__complete_eth_blocks.sql", "unique_id": "model.evmos_models.streamline__complete_eth_blocks", "fqn": ["evmos_models", "streamline", "complete", "streamline__complete_eth_blocks"], "alias": "complete_eth_blocks", "checksum": {"name": "sha256", "checksum": "8f361cd6ebef087c029a1a56794bbbe96d4c8b9d5268b2c9fb5bf799125abc60"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": "ROUND(block_number, -3)", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "id", "cluster_by": "ROUND(block_number, -3)", "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)"]}, "created_at": 1697554506.090632, "relation_name": "EVMOS.streamline.complete_eth_blocks", "raw_code": "-- depends_on: {{ ref('bronze__streamline_eth_blocks') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"id\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)\"\n) }}\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__streamline_eth_blocks') }}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            {{ this }}\n    )\n{% else %}\n    {{ ref('bronze__streamline_FR_eth_blocks') }}\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "language": "sql", "refs": [["bronze__streamline_eth_blocks"], ["bronze__streamline_FR_eth_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.bronze__streamline_eth_blocks", "model.evmos_models.bronze__streamline_FR_eth_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/complete/streamline__complete_eth_blocks.sql", "compiled": true, "compiled_code": "-- depends_on: EVMOS.bronze.streamline_eth_blocks\n\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n\nEVMOS.bronze.streamline_eth_blocks\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            EVMOS.streamline.complete_eth_blocks\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__complete_tendermint_transactions": {"database": "EVMOS", "schema": "streamline", "name": "streamline__complete_tendermint_transactions", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/complete/streamline__complete_tendermint_transactions.sql", "original_file_path": "models/streamline/complete/streamline__complete_tendermint_transactions.sql", "unique_id": "model.evmos_models.streamline__complete_tendermint_transactions", "fqn": ["evmos_models", "streamline", "complete", "streamline__complete_tendermint_transactions"], "alias": "complete_tendermint_transactions", "checksum": {"name": "sha256", "checksum": "2da6bf3e372700d6d57dd097b2ac0eba4d172563e44456b051b67ffcf1ef9cdc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": "ROUND(block_number, -3)", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "id", "cluster_by": "ROUND(block_number, -3)", "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)"]}, "created_at": 1697554506.1075792, "relation_name": "EVMOS.streamline.complete_tendermint_transactions", "raw_code": "-- depends_on: {{ ref('bronze__streamline_tendermint_transactions') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"id\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)\"\n) }}\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__streamline_tendermint_transactions') }}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            {{ this }}\n    )\n{% else %}\n    {{ ref('bronze__streamline_FR_tendermint_transactions') }}\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "language": "sql", "refs": [["bronze__streamline_tendermint_transactions"], ["bronze__streamline_FR_tendermint_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.bronze__streamline_tendermint_transactions", "model.evmos_models.bronze__streamline_FR_tendermint_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/complete/streamline__complete_tendermint_transactions.sql", "compiled": true, "compiled_code": "-- depends_on: EVMOS.bronze.streamline_tendermint_transactions\n\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n\nEVMOS.bronze.streamline_tendermint_transactions\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            EVMOS.streamline.complete_tendermint_transactions\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__complete_tendermint_blocks": {"database": "EVMOS", "schema": "streamline", "name": "streamline__complete_tendermint_blocks", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/complete/streamline__complete_tendermint_blocks.sql", "original_file_path": "models/streamline/complete/streamline__complete_tendermint_blocks.sql", "unique_id": "model.evmos_models.streamline__complete_tendermint_blocks", "fqn": ["evmos_models", "streamline", "complete", "streamline__complete_tendermint_blocks"], "alias": "complete_tendermint_blocks", "checksum": {"name": "sha256", "checksum": "0f1b42293070c804ff59f9596b755917629e438f484f25f9dc8b9929bf57be34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": "ROUND(block_number, -3)", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "id", "cluster_by": "ROUND(block_number, -3)", "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)"]}, "created_at": 1697554506.1189437, "relation_name": "EVMOS.streamline.complete_tendermint_blocks", "raw_code": "-- depends_on: {{ ref('bronze__streamline_tendermint_blocks') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"id\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)\"\n) }}\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__streamline_tendermint_blocks') }}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            {{ this }}\n    )\n{% else %}\n    {{ ref('bronze__streamline_FR_tendermint_blocks') }}\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "language": "sql", "refs": [["bronze__streamline_tendermint_blocks"], ["bronze__streamline_FR_tendermint_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.bronze__streamline_tendermint_blocks", "model.evmos_models.bronze__streamline_FR_tendermint_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/complete/streamline__complete_tendermint_blocks.sql", "compiled": true, "compiled_code": "-- depends_on: EVMOS.bronze.streamline_tendermint_blocks\n\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n\nEVMOS.bronze.streamline_tendermint_blocks\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            EVMOS.streamline.complete_tendermint_blocks\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__complete_tendermint_validators": {"database": "EVMOS", "schema": "streamline", "name": "streamline__complete_tendermint_validators", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/complete/streamline__complete_tendermint_validators.sql", "original_file_path": "models/streamline/complete/streamline__complete_tendermint_validators.sql", "unique_id": "model.evmos_models.streamline__complete_tendermint_validators", "fqn": ["evmos_models", "streamline", "complete", "streamline__complete_tendermint_validators"], "alias": "complete_tendermint_validators", "checksum": {"name": "sha256", "checksum": "44fec112517c2778a5cd5ff3eaff805fc0c3f26b5dd2a2433fab146d3cf9592a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": "ROUND(block_number, -3)", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "id", "cluster_by": "ROUND(block_number, -3)", "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)"]}, "created_at": 1697554506.1296597, "relation_name": "EVMOS.streamline.complete_tendermint_validators", "raw_code": "-- depends_on: {{ ref('bronze__streamline_tendermint_validators') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"id\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)\"\n) }}\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__streamline_tendermint_validators') }}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            {{ this }}\n    )\n{% else %}\n    {{ ref('bronze__streamline_FR_tendermint_validators') }}\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "language": "sql", "refs": [["bronze__streamline_tendermint_validators"], ["bronze__streamline_FR_tendermint_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.bronze__streamline_tendermint_validators", "model.evmos_models.bronze__streamline_FR_tendermint_validators"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/complete/streamline__complete_tendermint_validators.sql", "compiled": true, "compiled_code": "-- depends_on: EVMOS.bronze.streamline_tendermint_validators\n\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n\nEVMOS.bronze.streamline_tendermint_validators\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            EVMOS.streamline.complete_tendermint_validators\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.streamline__complete_eth_transactions": {"database": "EVMOS", "schema": "streamline", "name": "streamline__complete_eth_transactions", "resource_type": "model", "package_name": "evmos_models", "path": "streamline/complete/streamline__complete_eth_transactions.sql", "original_file_path": "models/streamline/complete/streamline__complete_eth_transactions.sql", "unique_id": "model.evmos_models.streamline__complete_eth_transactions", "fqn": ["evmos_models", "streamline", "complete", "streamline__complete_eth_transactions"], "alias": "complete_eth_transactions", "checksum": {"name": "sha256", "checksum": "445c3511a05bb5351c1fa60dfb69dee4903d21c523b505932fa2184a6072d808"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": "ROUND(block_number, -3)", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "id", "cluster_by": "ROUND(block_number, -3)", "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)"]}, "created_at": 1697554506.1423528, "relation_name": "EVMOS.streamline.complete_eth_transactions", "raw_code": "-- depends_on: {{ ref('bronze__streamline_eth_transactions') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"id\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(id)\"\n) }}\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__streamline_eth_transactions') }}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            {{ this }}\n    )\n{% else %}\n    {{ ref('bronze__streamline_FR_eth_transactions') }}\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "language": "sql", "refs": [["bronze__streamline_eth_transactions"], ["bronze__streamline_FR_eth_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.bronze__streamline_eth_transactions", "model.evmos_models.bronze__streamline_FR_eth_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/streamline/complete/streamline__complete_eth_transactions.sql", "compiled": true, "compiled_code": "-- depends_on: EVMOS.bronze.streamline_eth_transactions\n\n\nSELECT\n    id,\n    block_number,\n    _inserted_timestamp\nFROM\n\n\nEVMOS.bronze.streamline_eth_transactions\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            EVMOS.streamline.complete_eth_transactions\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__msgs": {"database": "EVMOS", "schema": "silver", "name": "silver__msgs", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__msgs.sql", "original_file_path": "models/silver/silver__msgs.sql", "unique_id": "model.evmos_models.silver__msgs", "fqn": ["evmos_models", "silver", "silver__msgs"], "alias": "msgs", "checksum": {"name": "sha256", "checksum": "518de9eba010000a88fc6b17e576ab45b0670726448ce73c1701980dfbf78f2a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, msg_index)", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all messages associated to transactions that have occurred on Evmos, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_SUB_GROUP": {"name": "MSG_SUB_GROUP", "description": "Silver only -- Numeric value grouping different messages together to represent a single action within a group. This is relevent for exec actions that contain mutiple underlying actions. NULL sub group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "Short for \"message index,\" the position in which messages occur in a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "A string containing information about the type of message occurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG": {"name": "MSG", "description": "The underlying json from the message or event within the transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/silver__msgs.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, msg_index)", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1697554508.2017343, "relation_name": "EVMOS.silver.msgs", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"CONCAT_WS('-', tx_id, msg_index)\",\n  incremental_strategy = 'delete+insert',\n  cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    t.gas_used,\n    t.gas_wanted,\n    t.tx_succeeded,\n    f.value AS msg,\n    f.index :: INT AS msg_index,\n    msg :type :: STRING AS msg_type,\n    IFF(\n      TRY_BASE64_DECODE_STRING(\n        msg :attributes [0] :key :: STRING\n      ) = 'action',\n      TRUE,\n      FALSE\n    ) AS is_action,\n    NULLIF(\n      (conditional_true_event(is_action) over (PARTITION BY tx_id\n      ORDER BY\n        msg_index ASC) -1),\n        -1\n    ) AS msg_group,\n    IFF(\n      TRY_BASE64_DECODE_STRING(\n        msg :attributes [0] :key :: STRING\n      ) = 'module',\n      TRUE,\n      FALSE\n    ) AS is_module,\n    TRY_BASE64_DECODE_STRING(\n      msg :attributes [0] :key :: STRING\n    ) AS attribute_key,\n    TRY_BASE64_DECODE_STRING(\n      msg :attributes [0] :value :: STRING\n    ) AS attribute_value,\n    t._inserted_timestamp\n  FROM\n    {{ ref('silver__transactions') }}\n    t,\n    LATERAL FLATTEN(input => msgs) f\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n      {{ this }}\n  )\n{% endif %}\n),\nexec_actions AS (\n  SELECT\n    DISTINCT tx_id,\n    msg_group\n  FROM\n    base\n  WHERE\n    msg_type = 'message'\n    AND attribute_key = 'action'\n    AND LOWER(attribute_value) LIKE '%exec%'\n),\nGROUPING AS (\n  SELECT\n    base.tx_id,\n    base.msg_index,\n    RANK() over(\n      PARTITION BY base.tx_id,\n      base.msg_group\n      ORDER BY\n        base.msg_index\n    ) -1 AS msg_sub_group\n  FROM\n    base\n    INNER JOIN exec_actions e\n    ON base.tx_id = e.tx_id\n    AND base.msg_group = e.msg_group\n  WHERE\n    base.is_module = 'TRUE'\n    AND base.msg_type = 'message'\n),\nFINAL AS (\n  SELECT\n    block_id,\n    block_timestamp,\n    A.tx_id,\n    tx_succeeded,\n    msg_group,\n    CASE\n      WHEN msg_group IS NULL THEN NULL\n      ELSE COALESCE(\n        LAST_VALUE(\n          b.msg_sub_group ignore nulls\n        ) over(\n          PARTITION BY A.tx_id,\n          msg_group\n          ORDER BY\n            A.msg_index DESC rows unbounded preceding\n        ),\n        0\n      )\n    END AS msg_sub_group,\n    A.msg_index,\n    msg_type,\n    msg,\n    _inserted_timestamp\n  FROM\n    base A\n    LEFT JOIN GROUPING b\n    ON A.tx_id = b.tx_id\n    AND A.msg_index = b.msg_index\n)\nSELECT\n  block_id,\n  block_timestamp,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_sub_group,\n  msg_index,\n  msg_type,\n  msg,\n  _inserted_timestamp\nFROM\n  FINAL", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n  SELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    t.gas_used,\n    t.gas_wanted,\n    t.tx_succeeded,\n    f.value AS msg,\n    f.index :: INT AS msg_index,\n    msg :type :: STRING AS msg_type,\n    IFF(\n      TRY_BASE64_DECODE_STRING(\n        msg :attributes [0] :key :: STRING\n      ) = 'action',\n      TRUE,\n      FALSE\n    ) AS is_action,\n    NULLIF(\n      (conditional_true_event(is_action) over (PARTITION BY tx_id\n      ORDER BY\n        msg_index ASC) -1),\n        -1\n    ) AS msg_group,\n    IFF(\n      TRY_BASE64_DECODE_STRING(\n        msg :attributes [0] :key :: STRING\n      ) = 'module',\n      TRUE,\n      FALSE\n    ) AS is_module,\n    TRY_BASE64_DECODE_STRING(\n      msg :attributes [0] :key :: STRING\n    ) AS attribute_key,\n    TRY_BASE64_DECODE_STRING(\n      msg :attributes [0] :value :: STRING\n    ) AS attribute_value,\n    t._inserted_timestamp\n  FROM\n    EVMOS.silver.transactions\n    t,\n    LATERAL FLATTEN(input => msgs) f\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n      EVMOS.silver.msgs\n  )\n\n),\nexec_actions AS (\n  SELECT\n    DISTINCT tx_id,\n    msg_group\n  FROM\n    base\n  WHERE\n    msg_type = 'message'\n    AND attribute_key = 'action'\n    AND LOWER(attribute_value) LIKE '%exec%'\n),\nGROUPING AS (\n  SELECT\n    base.tx_id,\n    base.msg_index,\n    RANK() over(\n      PARTITION BY base.tx_id,\n      base.msg_group\n      ORDER BY\n        base.msg_index\n    ) -1 AS msg_sub_group\n  FROM\n    base\n    INNER JOIN exec_actions e\n    ON base.tx_id = e.tx_id\n    AND base.msg_group = e.msg_group\n  WHERE\n    base.is_module = 'TRUE'\n    AND base.msg_type = 'message'\n),\nFINAL AS (\n  SELECT\n    block_id,\n    block_timestamp,\n    A.tx_id,\n    tx_succeeded,\n    msg_group,\n    CASE\n      WHEN msg_group IS NULL THEN NULL\n      ELSE COALESCE(\n        LAST_VALUE(\n          b.msg_sub_group ignore nulls\n        ) over(\n          PARTITION BY A.tx_id,\n          msg_group\n          ORDER BY\n            A.msg_index DESC rows unbounded preceding\n        ),\n        0\n      )\n    END AS msg_sub_group,\n    A.msg_index,\n    msg_type,\n    msg,\n    _inserted_timestamp\n  FROM\n    base A\n    LEFT JOIN GROUPING b\n    ON A.tx_id = b.tx_id\n    AND A.msg_index = b.msg_index\n)\nSELECT\n  block_id,\n  block_timestamp,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_sub_group,\n  msg_index,\n  msg_type,\n  msg,\n  _inserted_timestamp\nFROM\n  FINAL", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__validators": {"database": "EVMOS", "schema": "silver", "name": "silver__validators", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__validators.sql", "original_file_path": "models/silver/silver__validators.sql", "unique_id": "model.evmos_models.silver__validators", "fqn": ["evmos_models", "silver", "silver__validators"], "alias": "validators", "checksum": {"name": "sha256", "checksum": "7c7382227e12a5a050ddbccc7cbce9f9cf059f00a1b13cc2cb43313cb125d50c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Address unique to an individual wallet, validator, or token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Cosmos. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project the label belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR_SHARES": {"name": "DELEGATOR_SHARES", "description": "The number of tokens staked to the validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "JAILED": {"name": "JAILED", "description": "FALSE when a validator is not jailed, TRUE when a validator is jailed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATE": {"name": "RATE", "description": "The current commission rate the validator is charging stakers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_CHANGE_RATE": {"name": "MAX_CHANGE_RATE", "description": "The maximum rate at which a validator can change their commission per day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_RATE": {"name": "MAX_RATE", "description": "The maximum commission rate that the validator can charge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_SELF_DELEGATION": {"name": "MIN_SELF_DELEGATION", "description": "The minimum number of Evmos tokens that the operator must be staking with their own validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RANK": {"name": "RANK", "description": "The rank of the validator in the validator set. Rank is determined by the number of Evmos tokens staked to the validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "Additional details about the validator or token in json format.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/silver__validators.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table"}, "created_at": 1697554507.8206406, "relation_name": "EVMOS.silver.validators", "raw_code": "{{ config(\n    materialized = 'table'\n) }}\n\nSELECT\n    address,\n    'evmos' AS blockchain,\n    'flipside' AS creator,\n    'operator' AS label_type,\n    'validator' AS label_subtype,\n    DATA :description :moniker :: STRING AS label,\n    DATA :description :identity :: STRING AS project_name,\n    DATA :delegator_shares :: INT AS delegator_shares,\n    DATA :jailed :: BOOLEAN AS jailed,\n    DATA :commission :commission_rates :rate :: FLOAT AS rate,\n    DATA :commission :commission_rates :max_change_rate :: FLOAT AS max_change_rate,\n    DATA :commission :commission_rates :max_rate :: FLOAT AS max_rate,\n    DATA :min_self_delegation :: INT AS min_self_delegation,\n    RANK() over (\n        PARTITION BY address\n        ORDER BY\n            DATA :delegator_shares :: INT DESC\n    ) AS RANK,\n    DATA AS raw_metadata\nFROM\n    {{ ref('bronze_api__get_validator_metadata_lcd') }}", "language": "sql", "refs": [["bronze_api__get_validator_metadata_lcd"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.evmos_models.bronze_api__get_validator_metadata_lcd"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    address,\n    'evmos' AS blockchain,\n    'flipside' AS creator,\n    'operator' AS label_type,\n    'validator' AS label_subtype,\n    DATA :description :moniker :: STRING AS label,\n    DATA :description :identity :: STRING AS project_name,\n    DATA :delegator_shares :: INT AS delegator_shares,\n    DATA :jailed :: BOOLEAN AS jailed,\n    DATA :commission :commission_rates :rate :: FLOAT AS rate,\n    DATA :commission :commission_rates :max_change_rate :: FLOAT AS max_change_rate,\n    DATA :commission :commission_rates :max_rate :: FLOAT AS max_rate,\n    DATA :min_self_delegation :: INT AS min_self_delegation,\n    RANK() over (\n        PARTITION BY address\n        ORDER BY\n            DATA :delegator_shares :: INT DESC\n    ) AS RANK,\n    DATA AS raw_metadata\nFROM\n    EVMOS.bronze_api.get_validator_metadata_lcd", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__transactions": {"database": "EVMOS", "schema": "silver", "name": "silver__transactions", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "unique_id": "model.evmos_models.silver__transactions", "fqn": ["evmos_models", "silver", "silver__transactions"], "alias": "transactions", "checksum": {"name": "sha256", "checksum": "e324e802e69ffd07aaeddc902debf5056c68d1a89e6700d163ee08ee946c1e33"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE", "block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all transactions that have occurred on Evmos, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODESPACE": {"name": "CODESPACE", "description": "Namespace for the code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The amount of gas consumed by the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_WANTED": {"name": "GAS_WANTED", "description": "Amount of gas requested for a transaction. It is provided by users when the transaction is generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_CODE": {"name": "TX_CODE", "description": "A number that corresponds to various error codes. When \"0\", the transaction is successful. Non-zero numbers signify different types of transaction failures.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSGS": {"name": "MSGS", "description": "The underlying json from the messages or events within the transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "The transaction type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_LOG": {"name": "TX_LOG", "description": "A string that contains the transaction logs, which are logs written by the program interacted with during the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The date and time at which the block or transaction was inserted in the bronze tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/silver__transactions.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE", "block_timestamp::DATE"]}, "created_at": 1697554507.6967916, "relation_name": "EVMOS.silver.transactions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_id\",\n    incremental_strategy = 'merge',\n    cluster_by = ['_inserted_timestamp::DATE', 'block_timestamp::DATE' ]\n) }}\n-- depends_on: {{ ref('bronze__streamline_tendermint_transactions') }}\nWITH base_transactions AS (\n\n    SELECT\n        block_number AS block_id,\n        COALESCE(\n            t.value :tx_result :tx_id,\n            t.value :hash\n        ) :: STRING AS tx_id,\n        t.value :tx_result :codespace :STRING AS codespace,\n        t.value :tx_result :gas_used :: NUMBER AS gas_used,\n        t.value :tx_result :gas_wanted :: NUMBER AS gas_wanted,\n        CASE\n            WHEN t.value :tx_result :code :: NUMBER = 0 THEN TRUE\n            ELSE FALSE\n        END AS tx_succeeded,\n        t.value :tx_result :code :: NUMBER AS tx_code,\n        t.value :tx_result :events AS msgs,\n        TRY_PARSE_JSON(\n            t.value :tx_result :log\n        ) AS tx_log,\n        _inserted_timestamp\n    FROM\n\n{% if is_incremental() %}\n{{ ref('bronze__streamline_tendermint_transactions') }}\ntt\n{% else %}\n    {{ ref('bronze__streamline_FR_tendermint_transactions') }}\n    tt\n{% endif %},\nTABLE(FLATTEN(DATA :result :txs)) t\nWHERE\n    tx_id IS NOT NULL\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n        {{ this }}\n)\n{% endif %}\n)\nSELECT\n    t.block_id,\n    b.block_timestamp,\n    tx_id,\n    codespace,\n    gas_used,\n    gas_wanted,\n    tx_succeeded,\n    tx_code,\n    msgs,\n    tx_log,\n    t._inserted_timestamp,\n    concat_ws(\n        '-',\n        t.block_id,\n        tx_id\n    ) AS unique_key\nFROM\n    base_transactions t\n    LEFT OUTER JOIN {{ ref('silver__blocks') }}\n    b\n    ON t.block_id = b.block_id\n\n{% if is_incremental() %}\nWHERE\n    b._inserted_timestamp :: DATE >= (\n        SELECT\n            MAX(_inserted_timestamp) :: DATE - 3\n        FROM\n            {{ this }}\n    )\n{% endif %}\n\nqualify ROW_NUMBER() over (\n    PARTITION BY tx_id\n    ORDER BY\n        t._inserted_timestamp DESC\n) = 1", "language": "sql", "refs": [["bronze__streamline_tendermint_transactions"], ["bronze__streamline_FR_tendermint_transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.bronze__streamline_tendermint_transactions", "model.evmos_models.bronze__streamline_FR_tendermint_transactions", "model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.sql", "compiled": true, "compiled_code": "\n-- depends_on: EVMOS.bronze.streamline_tendermint_transactions\nWITH base_transactions AS (\n\n    SELECT\n        block_number AS block_id,\n        COALESCE(\n            t.value :tx_result :tx_id,\n            t.value :hash\n        ) :: STRING AS tx_id,\n        t.value :tx_result :codespace :STRING AS codespace,\n        t.value :tx_result :gas_used :: NUMBER AS gas_used,\n        t.value :tx_result :gas_wanted :: NUMBER AS gas_wanted,\n        CASE\n            WHEN t.value :tx_result :code :: NUMBER = 0 THEN TRUE\n            ELSE FALSE\n        END AS tx_succeeded,\n        t.value :tx_result :code :: NUMBER AS tx_code,\n        t.value :tx_result :events AS msgs,\n        TRY_PARSE_JSON(\n            t.value :tx_result :log\n        ) AS tx_log,\n        _inserted_timestamp\n    FROM\n\n\nEVMOS.bronze.streamline_tendermint_transactions\ntt\n,\nTABLE(FLATTEN(DATA :result :txs)) t\nWHERE\n    tx_id IS NOT NULL\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n        EVMOS.silver.transactions\n)\n\n)\nSELECT\n    t.block_id,\n    b.block_timestamp,\n    tx_id,\n    codespace,\n    gas_used,\n    gas_wanted,\n    tx_succeeded,\n    tx_code,\n    msgs,\n    tx_log,\n    t._inserted_timestamp,\n    concat_ws(\n        '-',\n        t.block_id,\n        tx_id\n    ) AS unique_key\nFROM\n    base_transactions t\n    LEFT OUTER JOIN EVMOS.silver.blocks\n    b\n    ON t.block_id = b.block_id\n\n\nWHERE\n    b._inserted_timestamp :: DATE >= (\n        SELECT\n            MAX(_inserted_timestamp) :: DATE - 3\n        FROM\n            EVMOS.silver.transactions\n    )\n\n\nqualify ROW_NUMBER() over (\n    PARTITION BY tx_id\n    ORDER BY\n        t._inserted_timestamp DESC\n) = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__transactions_final": {"database": "EVMOS", "schema": "silver", "name": "silver__transactions_final", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__transactions_final.sql", "original_file_path": "models/silver/silver__transactions_final.sql", "unique_id": "model.evmos_models.silver__transactions_final", "fqn": ["evmos_models", "silver", "silver__transactions_final"], "alias": "transactions_final", "checksum": {"name": "sha256", "checksum": "7bed50649d811a3380fcb496e1dd7b0cdb29304c8640b414298d54c5b4eca2a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all transactions that have occurred on Evmos. This schema is currently in lite mode, and contains data back to DATE.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FROM": {"name": "TX_FROM", "description": "The wallet address of the individual who initiated the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODESPACE": {"name": "CODESPACE", "description": "Namespace for the code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "The fee is paid by the initiator of the transaction. Fee = gas * gas price and is given in micro-OSMO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The amount of gas consumed by the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_WANTED": {"name": "GAS_WANTED", "description": "Amount of gas requested for a transaction. It is provided by users when the transaction is generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSGS": {"name": "MSGS", "description": "The underlying json from the messages or events within the transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/silver__transactions_final.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1697554507.6226602, "relation_name": "EVMOS.silver.transactions_final", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_id\",\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH base AS (\n\n    SELECT\n        tx_id,\n        msg_type,\n        msg_index,\n        attribute_key,\n        attribute_value\n    FROM\n        {{ ref('silver__msg_attributes') }}\n    WHERE\n        (attribute_key IN ('acc_seq', 'fee')\n        OR (msg_type = 'transfer'\n        AND attribute_key = 'sender'))\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nfee AS (\n    SELECT\n        tx_id,\n        attribute_value AS fee\n    FROM\n        base\n    WHERE\n        attribute_key = 'fee' qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        msg_index)) = 1\n),\nspender AS (\n    SELECT\n        tx_id,\n        SPLIT_PART(\n            attribute_value,\n            '/',\n            0\n        ) AS tx_from\n    FROM\n        base\n    WHERE\n        attribute_key = 'acc_seq'\n        OR (\n            msg_type = 'transfer'\n            AND attribute_key = 'sender'\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        msg_index)) = 1\n)\nSELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    s.tx_from,\n    tx_succeeded,\n    codespace,\n    COALESCE(\n        fee,\n        '0aevmos'\n    ) AS fee,\n    gas_used,\n    gas_wanted,\n    t.tx_code AS msgs,\n    _inserted_timestamp\nFROM\n    {{ ref('silver__transactions') }}\n    t\n    LEFT OUTER JOIN fee f\n    ON t.tx_id = f.tx_id\n    LEFT OUTER JOIN spender s\n    ON t.tx_id = s.tx_id\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [["silver__msg_attributes"], ["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.silver__msg_attributes", "model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        tx_id,\n        msg_type,\n        msg_index,\n        attribute_key,\n        attribute_value\n    FROM\n        EVMOS.silver.msg_attributes\n    WHERE\n        (attribute_key IN ('acc_seq', 'fee')\n        OR (msg_type = 'transfer'\n        AND attribute_key = 'sender'))\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n        EVMOS.silver.transactions_final\n)\n\n),\nfee AS (\n    SELECT\n        tx_id,\n        attribute_value AS fee\n    FROM\n        base\n    WHERE\n        attribute_key = 'fee' qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        msg_index)) = 1\n),\nspender AS (\n    SELECT\n        tx_id,\n        SPLIT_PART(\n            attribute_value,\n            '/',\n            0\n        ) AS tx_from\n    FROM\n        base\n    WHERE\n        attribute_key = 'acc_seq'\n        OR (\n            msg_type = 'transfer'\n            AND attribute_key = 'sender'\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        msg_index)) = 1\n)\nSELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    s.tx_from,\n    tx_succeeded,\n    codespace,\n    COALESCE(\n        fee,\n        '0aevmos'\n    ) AS fee,\n    gas_used,\n    gas_wanted,\n    t.tx_code AS msgs,\n    _inserted_timestamp\nFROM\n    EVMOS.silver.transactions\n    t\n    LEFT OUTER JOIN fee f\n    ON t.tx_id = f.tx_id\n    LEFT OUTER JOIN spender s\n    ON t.tx_id = s.tx_id\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            EVMOS.silver.transactions_final\n    )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__msg_attributes": {"database": "EVMOS", "schema": "silver", "name": "silver__msg_attributes", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__msg_attributes.sql", "original_file_path": "models/silver/silver__msg_attributes.sql", "unique_id": "model.evmos_models.silver__msg_attributes", "fqn": ["evmos_models", "silver", "silver__msg_attributes"], "alias": "msg_attributes", "checksum": {"name": "sha256", "checksum": "9b95c2b2fb0e76b5a2eaf8968082eba7253328cd7c5741c815b5434e13ad0e08"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["tx_id", "msg_index", "attribute_index"], "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(msg_type,attribute_key,attribute_value);", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Records of all messages associated to transactions that have occurred on Evmos, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_SUB_GROUP": {"name": "MSG_SUB_GROUP", "description": "Silver only -- Numeric value grouping different messages together to represent a single action within a group. This is relevent for exec actions that contain mutiple underlying actions. NULL sub group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "Short for \"message index,\" the position in which messages occur in a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "A string containing information about the type of message occurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG": {"name": "MSG", "description": "The underlying json from the message or event within the transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/silver__msg_attributes.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["tx_id", "msg_index", "attribute_index"], "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(msg_type,attribute_key,attribute_value);"]}, "created_at": 1697554507.5261679, "relation_name": "EVMOS.silver.msg_attributes", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = [\"tx_id\",\"msg_index\",\"attribute_index\"],\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE','_inserted_timestamp::DATE'],\n  post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(msg_type,attribute_key,attribute_value);\"\n) }}\n\nSELECT\n  block_id,\n  block_timestamp,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_sub_group,\n  msg_index,\n  msg_type,\n  b.index AS attribute_index,\n  TRY_BASE64_DECODE_STRING(\n    b.value :key :: STRING\n  ) AS attribute_key,\n  TRY_BASE64_DECODE_STRING(\n    b.value :value :: STRING\n  ) AS attribute_value,\n  _inserted_timestamp\nFROM\n  {{ ref('silver__msgs') }} A,\n  LATERAL FLATTEN(\n    input => A.msg,\n    path => 'attributes'\n  ) b\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.sql", "compiled": true, "compiled_code": "\n\nSELECT\n  block_id,\n  block_timestamp,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_sub_group,\n  msg_index,\n  msg_type,\n  b.index AS attribute_index,\n  TRY_BASE64_DECODE_STRING(\n    b.value :key :: STRING\n  ) AS attribute_key,\n  TRY_BASE64_DECODE_STRING(\n    b.value :value :: STRING\n  ) AS attribute_value,\n  _inserted_timestamp\nFROM\n  EVMOS.silver.msgs A,\n  LATERAL FLATTEN(\n    input => A.msg,\n    path => 'attributes'\n  ) b\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(_inserted_timestamp) _inserted_timestamp\n    FROM\n      EVMOS.silver.msg_attributes\n  )\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__blocks": {"database": "EVMOS", "schema": "silver", "name": "silver__blocks", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "unique_id": "model.evmos_models.silver__blocks", "fqn": ["evmos_models", "silver", "silver__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "3049109b35eaec67e510d120afaaa018c1e2c22c88a53d6eac7ca1841106d633"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["chain_id", "block_id"], "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all blocks that have occurred on Evmos, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transactions that occurred during a block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER_ADDRESS": {"name": "PROPOSER_ADDRESS", "description": "The address of the validator that proposed the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_HASH": {"name": "VALIDATOR_HASH", "description": "The root hash of the new validator set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The date and time at which the block or transaction was inserted in the bronze tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/silver__blocks.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["chain_id", "block_id"], "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1697554508.0915115, "relation_name": "EVMOS.silver.blocks", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = [\"chain_id\", \"block_id\"],\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE'],\n) }}\n-- depends_on: {{ ref('bronze__streamline_tendermint_blocks') }}\n\nSELECT\n  block_number AS block_id,\n  COALESCE(\n    DATA [0] :result :block :header :time :: TIMESTAMP,\n    DATA :result :block :header :time :: TIMESTAMP\n  ) AS block_timestamp,\n  COALESCE(\n    DATA [0] :result :block :header :chain_id :: STRING,\n    DATA :result :block :header :chain_id :: STRING\n  ) AS chain_id,\n  ARRAY_SIZE(\n    COALESCE(\n      DATA [0] :result :block :data :txs,\n      DATA :result :block :data :txs\n    )\n  ) AS tx_count,\n  COALESCE(\n    DATA [0] :result :block :header :proposer_address :: STRING,\n    DATA :result :block :header :proposer_address :: STRING\n  ) AS proposer_address,\n  COALESCE(\n    DATA [0] :result :block :header :validators_hash :: STRING,\n    DATA :result :block :header :validators_hash :: STRING\n  ) AS validator_hash,\n  _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__streamline_tendermint_blocks') }}\n{% else %}\n  {{ ref('bronze__streamline_FR_tendermint_blocks') }}\n{% endif %}\nWHERE\n  DATA [0] :error IS NULL\n  AND DATA :error IS NULL\n  AND (\n    DATA :result :block :header :chain_id :: STRING IS NOT NULL\n    OR DATA [0] :result :block :header :chain_id :: STRING IS NOT NULL\n  )\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n  SELECT\n    MAX(_inserted_timestamp) _inserted_timestamp\n  FROM\n    {{ this }}\n)\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY block_number\nORDER BY\n  _inserted_timestamp DESC)) = 1", "language": "sql", "refs": [["bronze__streamline_tendermint_blocks"], ["bronze__streamline_FR_tendermint_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.bronze__streamline_tendermint_blocks", "model.evmos_models.bronze__streamline_FR_tendermint_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.sql", "compiled": true, "compiled_code": "\n-- depends_on: EVMOS.bronze.streamline_tendermint_blocks\n\nSELECT\n  block_number AS block_id,\n  COALESCE(\n    DATA [0] :result :block :header :time :: TIMESTAMP,\n    DATA :result :block :header :time :: TIMESTAMP\n  ) AS block_timestamp,\n  COALESCE(\n    DATA [0] :result :block :header :chain_id :: STRING,\n    DATA :result :block :header :chain_id :: STRING\n  ) AS chain_id,\n  ARRAY_SIZE(\n    COALESCE(\n      DATA [0] :result :block :data :txs,\n      DATA :result :block :data :txs\n    )\n  ) AS tx_count,\n  COALESCE(\n    DATA [0] :result :block :header :proposer_address :: STRING,\n    DATA :result :block :header :proposer_address :: STRING\n  ) AS proposer_address,\n  COALESCE(\n    DATA [0] :result :block :header :validators_hash :: STRING,\n    DATA :result :block :header :validators_hash :: STRING\n  ) AS validator_hash,\n  _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\nFROM\n\n\nEVMOS.bronze.streamline_tendermint_blocks\n\nWHERE\n  DATA [0] :error IS NULL\n  AND DATA :error IS NULL\n  AND (\n    DATA :result :block :header :chain_id :: STRING IS NOT NULL\n    OR DATA [0] :result :block :header :chain_id :: STRING IS NOT NULL\n  )\n\n\nAND _inserted_timestamp >= (\n  SELECT\n    MAX(_inserted_timestamp) _inserted_timestamp\n  FROM\n    EVMOS.silver.blocks\n)\n\n\nqualify(ROW_NUMBER() over (PARTITION BY block_number\nORDER BY\n  _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__transfers": {"database": "EVMOS", "schema": "silver", "name": "silver__transfers", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "unique_id": "model.evmos_models.silver__transfers", "fqn": ["evmos_models", "silver", "silver__transfers"], "alias": "transfers", "checksum": {"name": "sha256", "checksum": "a78df48aae04530d0fb31665e37757dd4380765f9cba1d823a384861ad013756"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, block_id, msg_index, currency)", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": "block_timestamp::DATE", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all transfers on the Evmos, including IBC transfers as on- and off-ramps to Evmos and wallet to wallet transfers. This schema is in lite mode and contains data back to DATE.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "Details on the type of transfer occurring during the transaction. \"Transfer_In\" = depositing tokens onto the Cosmos Hub. \"Transfer_out\" = withdrawing tokens from the Cosmos Hub. \"Cosmos\" = wallet to wallet transfer on the Cosmos Hub.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The wallet address of the individual sent tokens in the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY": {"name": "CURRENCY", "description": "The currency that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "The wallet address of the individual received tokens in the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The date and time at which the block or transaction was inserted in the bronze tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/silver__transfers.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "CONCAT_WS('-', tx_id, block_id, msg_index, currency)", "incremental_strategy": "delete+insert", "cluster_by": "block_timestamp::DATE"}, "created_at": 1697554507.3593597, "relation_name": "EVMOS.silver.transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"CONCAT_WS('-', tx_id, block_id, msg_index, currency)\",\n    incremental_strategy = 'delete+insert',\n    cluster_by = 'block_timestamp::DATE',\n) }}\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__msg_attributes') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            {{ this }}\n    )\n{% endif %}\n),\ntx AS (\n    SELECT\n        DISTINCT block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        _inserted_timestamp\n    FROM\n        base\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            {{ this }}\n    )\n{% endif %}\n),\nevmos_txs AS (\n    SELECT\n        DISTINCT tx_id\n    FROM\n        base\n    WHERE\n        attribute_value IN (\n            '/cosmos.bank.v1beta1.MsgSend',\n            '/cosmos.bank.v1beta1.MsgMultiSend',\n            '/ibc.applications.transfer.v1.MsgTransfer'\n        )\n),\nsender AS (\n    SELECT\n        m.block_id,\n        m.tx_id,\n        m.msg_index,\n        SPLIT_PART(\n            attribute_value,\n            '/',\n            0\n        ) AS sender\n    FROM\n        base m\n    WHERE\n        msg_type = 'tx'\n        AND attribute_key = 'acc_seq' qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        msg_index)) = 1\n),\nmsg_index AS (\n    SELECT\n        m.block_id,\n        v.tx_id,\n        attribute_key,\n        m.msg_index\n    FROM\n        evmos_txs v\n        LEFT OUTER JOIN base m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n        AND m.block_id = s.block_id\n    WHERE\n        msg_type = 'transfer'\n        AND attribute_key = 'amount'\n        AND m.msg_index > s.msg_index\n),\nreceiver AS (\n    SELECT\n        m.block_id,\n        v.tx_id,\n        m.msg_index,\n        attribute_value AS receiver\n    FROM\n        evmos_txs v\n        LEFT OUTER JOIN base m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n        AND m.block_id = s.block_id\n    WHERE\n        msg_type = 'ibc_transfer'\n        OR msg_type = 'transfer'\n        AND attribute_key = 'recipient'\n        AND m.msg_index > s.msg_index\n),\namount AS (\n    SELECT\n        m.block_id,\n        v.tx_id,\n        m.msg_index,\n        COALESCE(\n            SPLIT_PART(\n                TRIM(\n                    REGEXP_REPLACE(\n                        attribute_value,\n                        '[^[:digit:]]',\n                        ' '\n                    )\n                ),\n                ' ',\n                0\n            ),\n            TRY_PARSE_JSON(attribute_value) :amount\n        ) AS amount,\n        COALESCE(\n            RIGHT(attribute_value, LENGTH(attribute_value) - LENGTH(SPLIT_PART(TRIM(REGEXP_REPLACE(attribute_value, '[^[:digit:]]', ' ')), ' ', 0))),\n            TRY_PARSE_JSON(attribute_value) [1] :denom\n        ) AS currency\n    FROM\n        evmos_txs v\n        LEFT OUTER JOIN base m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n        AND m.block_id = s.block_id\n    WHERE\n        msg_type = 'transfer'\n        AND attribute_key = 'amount'\n        AND m.msg_index > s.msg_index\n),\nevmos_txs_final AS (\n    SELECT\n        r.block_id,\n        block_timestamp,\n        r.tx_id,\n        tx_succeeded,\n        'EVMOS' AS transfer_type,\n        r.msg_index,\n        sender,\n        amount,\n        currency,\n        receiver,\n        _inserted_timestamp\n    FROM\n        receiver r\n        LEFT OUTER JOIN amount C\n        ON r.tx_id = C.tx_id\n        AND r.block_id = C.block_id\n        AND r.msg_index = C.msg_index\n        LEFT OUTER JOIN sender s\n        ON r.tx_id = s.tx_id\n        AND r.block_id = s.block_id\n        LEFT OUTER JOIN tx t\n        ON r.tx_id = t.tx_id\n        AND r.block_id = t.block_id\n    WHERE\n        amount IS NOT NULL\n        AND sender IS NOT NULL\n),\nibc_in_tx AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        msg_index,\n        'IBC_TRANSFER_IN' AS transfer_type,\n        TRY_PARSE_JSON(attribute_value) :sender :: STRING AS sender,\n        TRY_PARSE_JSON(attribute_value) :amount :: INT AS amount,\n        CASE\n            WHEN TRY_PARSE_JSON(attribute_value) :denom :: STRING LIKE '%/%' THEN SPLIT(TRY_PARSE_JSON(attribute_value) :denom :: STRING, '/') [array_size(split(try_parse_json(attribute_value):denom::string, '/')) - 1]\n            ELSE TRY_PARSE_JSON(attribute_value) :denom :: STRING\n        END AS currency,\n        TRY_PARSE_JSON(attribute_value) :receiver :: STRING AS receiver,\n        _inserted_timestamp\n    FROM\n        base\n    WHERE\n        msg_type = 'write_acknowledgement'\n        AND attribute_key = 'packet_data'\n        AND TRY_PARSE_JSON(attribute_value): amount IS NOT NULL\n),\nibc_out_txid AS (\n    SELECT\n        tx_id\n    FROM\n        base\n    WHERE\n        msg_type = 'ibc_transfer'\n),\nibc_out_tx AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        msg_index,\n        'IBC_TRANSFER_OUT' AS transfer_type,\n        TRY_PARSE_JSON(attribute_value) :sender :: STRING AS sender,\n        TRY_PARSE_JSON(attribute_value) :amount :: INT AS amount,\n        CASE\n            WHEN TRY_PARSE_JSON(attribute_value) :denom :: STRING LIKE '%/%' THEN SPLIT(TRY_PARSE_JSON(attribute_value) :denom :: STRING, '/') [array_size(split(try_parse_json(attribute_value):denom::string, '/')) - 1]\n            ELSE TRY_PARSE_JSON(attribute_value) :denom :: STRING\n        END AS currency,\n        TRY_PARSE_JSON(attribute_value) :receiver :: STRING AS receiver,\n        _inserted_timestamp\n    FROM\n        base\n    WHERE\n        tx_id IN (\n            SELECT\n                tx_id\n            FROM\n                ibc_out_txid\n        )\n        AND msg_type = 'send_packet'\n        AND attribute_key = 'packet_data'\n),\nibc_transfers_agg AS (\n    SELECT\n        *\n    FROM\n        ibc_out_tx\n    UNION ALL\n    SELECT\n        *\n    FROM\n        ibc_in_tx\n),\nibc_tx_final AS (\n    SELECT\n        i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        i.tx_succeeded,\n        i.transfer_type,\n        i.sender,\n        i.amount,\n        i.currency,\n        i.receiver,\n        msg_index,\n        _inserted_timestamp\n    FROM\n        ibc_transfers_agg i\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    receiver,\n    msg_index,\n    _inserted_timestamp\nFROM\n    ibc_tx_final\nUNION ALL\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    receiver,\n    msg_index,\n    _inserted_timestamp\nFROM\n    evmos_txs_final", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        EVMOS.silver.msg_attributes\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            EVMOS.silver.transfers\n    )\n\n),\ntx AS (\n    SELECT\n        DISTINCT block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        _inserted_timestamp\n    FROM\n        base\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp) _inserted_timestamp\n        FROM\n            EVMOS.silver.transfers\n    )\n\n),\nevmos_txs AS (\n    SELECT\n        DISTINCT tx_id\n    FROM\n        base\n    WHERE\n        attribute_value IN (\n            '/cosmos.bank.v1beta1.MsgSend',\n            '/cosmos.bank.v1beta1.MsgMultiSend',\n            '/ibc.applications.transfer.v1.MsgTransfer'\n        )\n),\nsender AS (\n    SELECT\n        m.block_id,\n        m.tx_id,\n        m.msg_index,\n        SPLIT_PART(\n            attribute_value,\n            '/',\n            0\n        ) AS sender\n    FROM\n        base m\n    WHERE\n        msg_type = 'tx'\n        AND attribute_key = 'acc_seq' qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        msg_index)) = 1\n),\nmsg_index AS (\n    SELECT\n        m.block_id,\n        v.tx_id,\n        attribute_key,\n        m.msg_index\n    FROM\n        evmos_txs v\n        LEFT OUTER JOIN base m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n        AND m.block_id = s.block_id\n    WHERE\n        msg_type = 'transfer'\n        AND attribute_key = 'amount'\n        AND m.msg_index > s.msg_index\n),\nreceiver AS (\n    SELECT\n        m.block_id,\n        v.tx_id,\n        m.msg_index,\n        attribute_value AS receiver\n    FROM\n        evmos_txs v\n        LEFT OUTER JOIN base m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n        AND m.block_id = s.block_id\n    WHERE\n        msg_type = 'ibc_transfer'\n        OR msg_type = 'transfer'\n        AND attribute_key = 'recipient'\n        AND m.msg_index > s.msg_index\n),\namount AS (\n    SELECT\n        m.block_id,\n        v.tx_id,\n        m.msg_index,\n        COALESCE(\n            SPLIT_PART(\n                TRIM(\n                    REGEXP_REPLACE(\n                        attribute_value,\n                        '[^[:digit:]]',\n                        ' '\n                    )\n                ),\n                ' ',\n                0\n            ),\n            TRY_PARSE_JSON(attribute_value) :amount\n        ) AS amount,\n        COALESCE(\n            RIGHT(attribute_value, LENGTH(attribute_value) - LENGTH(SPLIT_PART(TRIM(REGEXP_REPLACE(attribute_value, '[^[:digit:]]', ' ')), ' ', 0))),\n            TRY_PARSE_JSON(attribute_value) [1] :denom\n        ) AS currency\n    FROM\n        evmos_txs v\n        LEFT OUTER JOIN base m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n        AND m.block_id = s.block_id\n    WHERE\n        msg_type = 'transfer'\n        AND attribute_key = 'amount'\n        AND m.msg_index > s.msg_index\n),\nevmos_txs_final AS (\n    SELECT\n        r.block_id,\n        block_timestamp,\n        r.tx_id,\n        tx_succeeded,\n        'EVMOS' AS transfer_type,\n        r.msg_index,\n        sender,\n        amount,\n        currency,\n        receiver,\n        _inserted_timestamp\n    FROM\n        receiver r\n        LEFT OUTER JOIN amount C\n        ON r.tx_id = C.tx_id\n        AND r.block_id = C.block_id\n        AND r.msg_index = C.msg_index\n        LEFT OUTER JOIN sender s\n        ON r.tx_id = s.tx_id\n        AND r.block_id = s.block_id\n        LEFT OUTER JOIN tx t\n        ON r.tx_id = t.tx_id\n        AND r.block_id = t.block_id\n    WHERE\n        amount IS NOT NULL\n        AND sender IS NOT NULL\n),\nibc_in_tx AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        msg_index,\n        'IBC_TRANSFER_IN' AS transfer_type,\n        TRY_PARSE_JSON(attribute_value) :sender :: STRING AS sender,\n        TRY_PARSE_JSON(attribute_value) :amount :: INT AS amount,\n        CASE\n            WHEN TRY_PARSE_JSON(attribute_value) :denom :: STRING LIKE '%/%' THEN SPLIT(TRY_PARSE_JSON(attribute_value) :denom :: STRING, '/') [array_size(split(try_parse_json(attribute_value):denom::string, '/')) - 1]\n            ELSE TRY_PARSE_JSON(attribute_value) :denom :: STRING\n        END AS currency,\n        TRY_PARSE_JSON(attribute_value) :receiver :: STRING AS receiver,\n        _inserted_timestamp\n    FROM\n        base\n    WHERE\n        msg_type = 'write_acknowledgement'\n        AND attribute_key = 'packet_data'\n        AND TRY_PARSE_JSON(attribute_value): amount IS NOT NULL\n),\nibc_out_txid AS (\n    SELECT\n        tx_id\n    FROM\n        base\n    WHERE\n        msg_type = 'ibc_transfer'\n),\nibc_out_tx AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        msg_index,\n        'IBC_TRANSFER_OUT' AS transfer_type,\n        TRY_PARSE_JSON(attribute_value) :sender :: STRING AS sender,\n        TRY_PARSE_JSON(attribute_value) :amount :: INT AS amount,\n        CASE\n            WHEN TRY_PARSE_JSON(attribute_value) :denom :: STRING LIKE '%/%' THEN SPLIT(TRY_PARSE_JSON(attribute_value) :denom :: STRING, '/') [array_size(split(try_parse_json(attribute_value):denom::string, '/')) - 1]\n            ELSE TRY_PARSE_JSON(attribute_value) :denom :: STRING\n        END AS currency,\n        TRY_PARSE_JSON(attribute_value) :receiver :: STRING AS receiver,\n        _inserted_timestamp\n    FROM\n        base\n    WHERE\n        tx_id IN (\n            SELECT\n                tx_id\n            FROM\n                ibc_out_txid\n        )\n        AND msg_type = 'send_packet'\n        AND attribute_key = 'packet_data'\n),\nibc_transfers_agg AS (\n    SELECT\n        *\n    FROM\n        ibc_out_tx\n    UNION ALL\n    SELECT\n        *\n    FROM\n        ibc_in_tx\n),\nibc_tx_final AS (\n    SELECT\n        i.block_id,\n        i.block_timestamp,\n        i.tx_id,\n        i.tx_succeeded,\n        i.transfer_type,\n        i.sender,\n        i.amount,\n        i.currency,\n        i.receiver,\n        msg_index,\n        _inserted_timestamp\n    FROM\n        ibc_transfers_agg i\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    receiver,\n    msg_index,\n    _inserted_timestamp\nFROM\n    ibc_tx_final\nUNION ALL\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    receiver,\n    msg_index,\n    _inserted_timestamp\nFROM\n    evmos_txs_final", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__blockchain": {"database": "EVMOS", "schema": "silver", "name": "silver__blockchain", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__blockchain.sql", "original_file_path": "models/silver/silver__blockchain.sql", "unique_id": "model.evmos_models.silver__blockchain", "fqn": ["evmos_models", "silver", "silver__blockchain"], "alias": "blockchain", "checksum": {"name": "sha256", "checksum": "18d325eefbe54f90769e3d744e1426d4fad51cc5d1264d323c342b272ea6ad05"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"CHAIN_ID": {"name": "CHAIN_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_SIZE": {"name": "BLOCK_SIZE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEADER": {"name": "BLOCK_HEADER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID_OBJECT": {"name": "BLOCK_ID_OBJECT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUM_TXS": {"name": "NUM_TXS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/silver__blockchain.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1697554508.0151496, "relation_name": "EVMOS.silver.blockchain", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"block_id\",\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH base AS (\n\n    SELECT\n        DATA,\n        _inserted_timestamp\n    FROM\n        {{ ref(\n            'bronze_api__get_blockchain'\n        ) }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n),\nfin AS (\n    SELECT\n        VALUE :header :chain_id :: STRING AS chain_id,\n        VALUE :header :height :: INT AS height,\n        VALUE :header :time :: datetime AS block_timestamp,\n        VALUE :block_size :: INT AS block_size,\n        VALUE :header AS block_header,\n        VALUE :block_id AS block_id,\n        VALUE :num_txs :: INT AS num_txs,\n        _inserted_timestamp\n    FROM\n        (\n            SELECT\n                DATA,\n                _inserted_timestamp\n            FROM\n                base\n        ),\n        LATERAL FLATTEN(\n            DATA,\n            recursive => TRUE\n        ) b\n    WHERE\n        b.path LIKE 'data%.result.block_metas%'\n        AND INDEX IS NOT NULL\n)\nSELECT\n    chain_id,\n    height AS block_id,\n    block_timestamp,\n    block_size,\n    block_header,\n    block_id AS block_id_object,\n    num_txs,\n    _inserted_timestamp\nFROM\n    fin qualify(ROW_NUMBER() over(PARTITION BY height\nORDER BY\n    _inserted_timestamp DESC) = 1)", "language": "sql", "refs": [["bronze_api__get_blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.bronze_api__get_blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        DATA,\n        _inserted_timestamp\n    FROM\n        EVMOS.bronze_api.get_blockchain\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            EVMOS.silver.blockchain\n    )\n\n),\nfin AS (\n    SELECT\n        VALUE :header :chain_id :: STRING AS chain_id,\n        VALUE :header :height :: INT AS height,\n        VALUE :header :time :: datetime AS block_timestamp,\n        VALUE :block_size :: INT AS block_size,\n        VALUE :header AS block_header,\n        VALUE :block_id AS block_id,\n        VALUE :num_txs :: INT AS num_txs,\n        _inserted_timestamp\n    FROM\n        (\n            SELECT\n                DATA,\n                _inserted_timestamp\n            FROM\n                base\n        ),\n        LATERAL FLATTEN(\n            DATA,\n            recursive => TRUE\n        ) b\n    WHERE\n        b.path LIKE 'data%.result.block_metas%'\n        AND INDEX IS NOT NULL\n)\nSELECT\n    chain_id,\n    height AS block_id,\n    block_timestamp,\n    block_size,\n    block_header,\n    block_id AS block_id_object,\n    num_txs,\n    _inserted_timestamp\nFROM\n    fin qualify(ROW_NUMBER() over(PARTITION BY height\nORDER BY\n    _inserted_timestamp DESC) = 1)", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver__labels": {"database": "EVMOS", "schema": "silver", "name": "silver__labels", "resource_type": "model", "package_name": "evmos_models", "path": "silver/silver__labels.sql", "original_file_path": "models/silver/silver__labels.sql", "unique_id": "model.evmos_models.silver__labels", "fqn": ["evmos_models", "silver", "silver__labels"], "alias": "labels", "checksum": {"name": "sha256", "checksum": "30de02ad4b70db40efca0f32c918fe66b4dea7d3fa98016fe1d8bc2ebfe53f14"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table"}, "created_at": 1697554506.2827718, "relation_name": "EVMOS.silver.labels", "raw_code": "{{ config(\n    materialized = 'table'\n) }}\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name,\n    address_name\nFROM\n    {{ source(\n        'crosschain',\n        'dim_labels'\n    ) }}\nWHERE\n    blockchain = 'evmos'", "language": "sql", "refs": [], "sources": [["crosschain", "dim_labels"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.evmos_models.crosschain.dim_labels"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__labels.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name,\n    address_name\nFROM\n    crosschain.core.dim_labels\nWHERE\n    blockchain = 'evmos'", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver_observability__blocks_completeness": {"database": "EVMOS", "schema": "silver_observability", "name": "silver_observability__blocks_completeness", "resource_type": "model", "package_name": "evmos_models", "path": "silver/_observability/silver_observability__blocks_completeness.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.sql", "unique_id": "model.evmos_models.silver_observability__blocks_completeness", "fqn": ["evmos_models", "silver", "_observability", "silver_observability__blocks_completeness"], "alias": "blocks_completeness", "checksum": {"name": "sha256", "checksum": "89e7aab86641a5a19b33224592b0306e17f27cdfe73a3a212d7e84a0ab30e462"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all blocks block gaps (missing blocks) with a timestamp the test was run", "columns": {"MIN_BLOCK": {"name": "MIN_BLOCK", "description": "The lowest block id in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_BLOCK": {"name": "MAX_BLOCK", "description": "The highest block id in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_BLOCK_TIMESTAMP": {"name": "MIN_BLOCK_TIMESTAMP", "description": "The lowest block timestamp in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_BLOCK_TIMESTAMP": {"name": "MAX_BLOCK_TIMESTAMP", "description": "The highest block timestamp in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKS_TESTED": {"name": "BLOCKS_TESTED", "description": "Count of blocks in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKS_IMPACTED_COUNT": {"name": "BLOCKS_IMPACTED_COUNT", "description": "Count of block gaps in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKS_IMPACTED_ARRAY": {"name": "BLOCKS_IMPACTED_ARRAY", "description": "Array of affected blocks", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TEST_FAILURE_DETAILS": {"name": "TEST_FAILURE_DETAILS", "description": "Array of details of the failure", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TEST_TIMESTAMP": {"name": "TEST_TIMESTAMP", "description": "When the test was run", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/_observability/silver_observability__blocks_completeness.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "full_refresh": false}, "created_at": 1697554508.303233, "relation_name": "EVMOS.silver_observability.blocks_completeness", "raw_code": "{{ config(\n    materialized = 'incremental',\n    full_refresh = false\n) }}\n\nWITH source AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        LAG(\n            block_id,\n            1\n        ) over (\n            ORDER BY\n                block_id ASC\n        ) AS prev_BLOCK_ID\n    FROM\n        {{ ref('silver__blocks') }} A\n    WHERE\n        block_timestamp < DATEADD(\n            HOUR,\n            -24,\n            SYSDATE()\n        )\n\n{% if is_incremental() %}\nAND (\n    block_timestamp >= DATEADD(\n        HOUR,\n        -96,(\n            SELECT\n                MAX(\n                    max_block_timestamp\n                )\n            FROM\n                {{ this }}\n        )\n    )\n    OR ({% if var('OBSERV_FULL_TEST') %}\n        block_id >= 0\n    {% else %}\n        block_id >= (\n    SELECT\n        MIN(VALUE) - 1\n    FROM\n        (\n    SELECT\n        blocks_impacted_array\n    FROM\n        {{ this }}\n        qualify ROW_NUMBER() over (\n    ORDER BY\n        test_timestamp DESC) = 1), LATERAL FLATTEN(input => blocks_impacted_array))\n    {% endif %})\n)\n{% endif %}\n),\nblock_gen AS (\n    SELECT\n        _id AS block_id\n    FROM\n        {{ source(\n            'crosschain_silver',\n            'number_sequence'\n        ) }}\n    WHERE\n        _id BETWEEN (\n            SELECT\n                MIN(block_id)\n            FROM\n                source\n        )\n        AND (\n            SELECT\n                MAX(block_id)\n            FROM\n                source\n        )\n)\nSELECT\n    'blocks' AS test_name,\n    MIN(\n        b.block_id\n    ) AS min_block,\n    MAX(\n        b.block_id\n    ) AS max_block,\n    MIN(\n        b.block_timestamp\n    ) AS min_block_timestamp,\n    MAX(\n        b.block_timestamp\n    ) AS max_block_timestamp,\n    COUNT(1) AS blocks_tested,\n    COUNT(\n        CASE\n            WHEN C.block_id IS NOT NULL THEN A.block_id\n        END\n    ) AS blocks_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN C.block_id IS NOT NULL THEN A.block_id\n        END\n    ) within GROUP (\n        ORDER BY\n            A.block_id\n    ) AS blocks_impacted_array,\n    ARRAY_AGG(\n        DISTINCT CASE\n            WHEN C.block_id IS NOT NULL THEN OBJECT_CONSTRUCT(\n                'prev_block_id',\n                C.prev_block_id,\n                'block_id',\n                C.block_id\n            )\n        END\n    ) AS test_failure_details,\n    SYSDATE() AS test_timestamp\nFROM\n    block_gen A\n    LEFT JOIN source b\n    ON A.block_id = b.block_id\n    LEFT JOIN source C\n    ON A.block_id > C.prev_BLOCK_ID\n    AND A.block_id < C.block_id\n    AND C.block_id - C.prev_BLOCK_ID <> 1\nWHERE\n    COALESCE(\n        b.block_id,\n        C.block_id\n    ) IS NOT NULL", "language": "sql", "refs": [["silver__blocks"]], "sources": [["crosschain_silver", "number_sequence"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.evmos_models.crosschain_silver.number_sequence", "model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.sql", "compiled": true, "compiled_code": "\n\nWITH source AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        LAG(\n            block_id,\n            1\n        ) over (\n            ORDER BY\n                block_id ASC\n        ) AS prev_BLOCK_ID\n    FROM\n        EVMOS.silver.blocks A\n    WHERE\n        block_timestamp < DATEADD(\n            HOUR,\n            -24,\n            SYSDATE()\n        )\n\n\nAND (\n    block_timestamp >= DATEADD(\n        HOUR,\n        -96,(\n            SELECT\n                MAX(\n                    max_block_timestamp\n                )\n            FROM\n                EVMOS.silver_observability.blocks_completeness\n        )\n    )\n    OR (\n        block_id >= (\n    SELECT\n        MIN(VALUE) - 1\n    FROM\n        (\n    SELECT\n        blocks_impacted_array\n    FROM\n        EVMOS.silver_observability.blocks_completeness\n        qualify ROW_NUMBER() over (\n    ORDER BY\n        test_timestamp DESC) = 1), LATERAL FLATTEN(input => blocks_impacted_array))\n    )\n)\n\n),\nblock_gen AS (\n    SELECT\n        _id AS block_id\n    FROM\n        crosschain.silver.number_sequence\n    WHERE\n        _id BETWEEN (\n            SELECT\n                MIN(block_id)\n            FROM\n                source\n        )\n        AND (\n            SELECT\n                MAX(block_id)\n            FROM\n                source\n        )\n)\nSELECT\n    'blocks' AS test_name,\n    MIN(\n        b.block_id\n    ) AS min_block,\n    MAX(\n        b.block_id\n    ) AS max_block,\n    MIN(\n        b.block_timestamp\n    ) AS min_block_timestamp,\n    MAX(\n        b.block_timestamp\n    ) AS max_block_timestamp,\n    COUNT(1) AS blocks_tested,\n    COUNT(\n        CASE\n            WHEN C.block_id IS NOT NULL THEN A.block_id\n        END\n    ) AS blocks_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN C.block_id IS NOT NULL THEN A.block_id\n        END\n    ) within GROUP (\n        ORDER BY\n            A.block_id\n    ) AS blocks_impacted_array,\n    ARRAY_AGG(\n        DISTINCT CASE\n            WHEN C.block_id IS NOT NULL THEN OBJECT_CONSTRUCT(\n                'prev_block_id',\n                C.prev_block_id,\n                'block_id',\n                C.block_id\n            )\n        END\n    ) AS test_failure_details,\n    SYSDATE() AS test_timestamp\nFROM\n    block_gen A\n    LEFT JOIN source b\n    ON A.block_id = b.block_id\n    LEFT JOIN source C\n    ON A.block_id > C.prev_BLOCK_ID\n    AND A.block_id < C.block_id\n    AND C.block_id - C.prev_BLOCK_ID <> 1\nWHERE\n    COALESCE(\n        b.block_id,\n        C.block_id\n    ) IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.silver_observability__transactions_completeness": {"database": "EVMOS", "schema": "silver_observability", "name": "silver_observability__transactions_completeness", "resource_type": "model", "package_name": "evmos_models", "path": "silver/_observability/silver_observability__transactions_completeness.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.sql", "unique_id": "model.evmos_models.silver_observability__transactions_completeness", "fqn": ["evmos_models", "silver", "_observability", "silver_observability__transactions_completeness"], "alias": "transactions_completeness", "checksum": {"name": "sha256", "checksum": "7356a3a24d44c918cd106ea9f6d8c7f10a386e6225a89493d7388b25fe6f53fd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Records of all blocks with missing transactions with a timestamp the test was run", "columns": {"MIN_BLOCK": {"name": "MIN_BLOCK", "description": "The lowest block id in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_BLOCK": {"name": "MAX_BLOCK", "description": "The highest block id in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_BLOCK_TIMESTAMP": {"name": "MIN_BLOCK_TIMESTAMP", "description": "The lowest block timestamp in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_BLOCK_TIMESTAMP": {"name": "MAX_BLOCK_TIMESTAMP", "description": "The highest block timestamp in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKS_TESTED": {"name": "BLOCKS_TESTED", "description": "Count of blocks in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKS_IMPACTED_COUNT": {"name": "BLOCKS_IMPACTED_COUNT", "description": "Count of blocks with missing transactions in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKS_IMPACTED_ARRAY": {"name": "BLOCKS_IMPACTED_ARRAY", "description": "Array of affected blocks", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTIONS_IMPACTED_COUNT": {"name": "TRANSACTIONS_IMPACTED_COUNT", "description": "Total count of missing transactions in the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TEST_FAILURE_DETAILS": {"name": "TEST_FAILURE_DETAILS", "description": "blocks with missing transactions with the number of missing transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TEST_TIMESTAMP": {"name": "TEST_TIMESTAMP", "description": "When the test was run", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "evmos_models://models/silver/_observability/silver_observability__transactions_completeness.yml", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "full_refresh": false}, "created_at": 1697554508.4249308, "relation_name": "EVMOS.silver_observability.transactions_completeness", "raw_code": "{{ config(\n    materialized = 'incremental',\n    full_refresh = false\n) }}\n\nWITH rel_blocks AS (\n\n    SELECT\n        block_id,\n        block_timestamp\n    FROM\n        {{ ref('silver__blocks') }}\n    WHERE\n        block_timestamp < DATEADD(\n            HOUR,\n            -48,\n            SYSDATE()\n        )\n\n{% if is_incremental() %}\nAND (\n    block_timestamp >= DATEADD(\n        HOUR,\n        -96,(\n            SELECT\n                MAX(\n                    max_block_timestamp\n                )\n            FROM\n                {{ this }}\n        )\n    )\n    OR ({% if var('OBSERV_FULL_TEST') %}\n        block_id >= 0\n    {% else %}\n        block_id >= (\n    SELECT\n        MIN(VALUE) - 1\n    FROM\n        (\n    SELECT\n        blocks_impacted_array\n    FROM\n        {{ this }}\n        qualify ROW_NUMBER() over (\n    ORDER BY\n        test_timestamp DESC) = 1), LATERAL FLATTEN(input => blocks_impacted_array))\n    {% endif %})\n)\n{% endif %}\n),\nbronze AS (\n    SELECT\n        A.block_number AS block_id,\n        b.block_timestamp,\n        COALESCE(\n            t.value :tx_result :tx_id,\n            t.value :hash\n        ) :: STRING AS tx_id\n    FROM\n        {% if var('OBSERV_FULL_TEST') %}\n            {{ ref('bronze__streamline_FR_tendermint_transactions') }}\n        {% else %}\n            {{ ref('bronze__streamline_tendermint_transactions') }}\n        {% endif %}\n\n        A\n        JOIN rel_blocks b\n        ON A.block_number = b.block_id\n        JOIN TABLE(FLATTEN(DATA :result :txs)) t {# {% if is_incremental() %}\n    WHERE\n        A._inserted_timestamp >= CURRENT_DATE - 14\n        OR {% if var('OBSERV_FULL_TEST') %}\n            1 = 1\n        {% else %}\n            (\n                SELECT\n                    MIN(VALUE) - 1\n                FROM\n                    (\n                        SELECT\n                            blocks_impacted_array\n                        FROM\n                            {{ this }}\n                            qualify ROW_NUMBER() over (\n                                ORDER BY\n                                    test_timestamp DESC\n                            ) = 1\n                    ),\n                    LATERAL FLATTEN(\n                        input => blocks_impacted_array\n                    )\n            ) IS NOT NULL\n        {% endif %}\n    {% endif %}\n\n    #}\n    qualify(ROW_NUMBER() over(PARTITION BY A.block_number, tx_id\n    ORDER BY\n        A._inserted_timestamp DESC) = 1)\n),\nbronze_count AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        COUNT(\n            DISTINCT tx_id\n        ) AS num_txs\n    FROM\n        bronze\n    GROUP BY\n        block_id,\n        block_timestamp\n),\nbronze_api AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        num_txs\n    FROM\n        {{ ref('silver__blockchain') }}\n    WHERE\n        block_id > 13066416\n        AND block_timestamp BETWEEN (\n            SELECT\n                MIN(block_timestamp)\n            FROM\n                rel_blocks\n        )\n        AND (\n            SELECT\n                MAX(block_timestamp)\n            FROM\n                rel_blocks\n        )\n)\nSELECT\n    'transactions' AS test_name,\n    MIN(\n        A.block_id\n    ) AS min_block,\n    MAX(\n        A.block_id\n    ) AS max_block,\n    MIN(\n        A.block_timestamp\n    ) AS min_block_timestamp,\n    MAX(\n        A.block_timestamp\n    ) AS max_block_timestamp,\n    COUNT(1) AS blocks_tested,\n    SUM(\n        CASE\n            WHEN COALESCE(\n                b.num_txs,\n                0\n            ) - A.num_txs < -3 THEN 1\n            ELSE 0\n        END\n    ) AS blocks_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN COALESCE(\n                b.num_txs,\n                0\n            ) - A.num_txs < -3 THEN A.block_id\n        END\n    ) within GROUP (\n        ORDER BY\n            A.block_id\n    ) AS blocks_impacted_array,\n    SUM(\n        ABS(\n            COALESCE(\n                b.num_txs,\n                0\n            ) - A.num_txs\n        )\n    ) AS transactions_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN COALESCE(\n                b.num_txs,\n                0\n            ) - A.num_txs < -3 THEN OBJECT_CONSTRUCT(\n                'block',\n                A.block_id,\n                'block_timestamp',\n                A.block_timestamp,\n                'diff',\n                COALESCE(\n                    b.num_txs,\n                    0\n                ) - A.num_txs,\n                'blockchain_num_txs',\n                A.num_txs,\n                'bronze_num_txs',\n                COALESCE(\n                    b.num_txs,\n                    0\n                )\n            )\n        END\n    ) within GROUP(\n        ORDER BY\n            A.block_id\n    ) AS test_failure_details,\n    SYSDATE() AS test_timestamp\nFROM\n    bronze_api A\n    LEFT JOIN bronze_count b\n    ON A.block_id = b.block_id", "language": "sql", "refs": [["silver__blocks"], ["bronze__streamline_tendermint_transactions"], ["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.silver__blocks", "model.evmos_models.bronze__streamline_tendermint_transactions", "model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.sql", "compiled": true, "compiled_code": "\n\nWITH rel_blocks AS (\n\n    SELECT\n        block_id,\n        block_timestamp\n    FROM\n        EVMOS.silver.blocks\n    WHERE\n        block_timestamp < DATEADD(\n            HOUR,\n            -48,\n            SYSDATE()\n        )\n\n\nAND (\n    block_timestamp >= DATEADD(\n        HOUR,\n        -96,(\n            SELECT\n                MAX(\n                    max_block_timestamp\n                )\n            FROM\n                EVMOS.silver_observability.transactions_completeness\n        )\n    )\n    OR (\n        block_id >= (\n    SELECT\n        MIN(VALUE) - 1\n    FROM\n        (\n    SELECT\n        blocks_impacted_array\n    FROM\n        EVMOS.silver_observability.transactions_completeness\n        qualify ROW_NUMBER() over (\n    ORDER BY\n        test_timestamp DESC) = 1), LATERAL FLATTEN(input => blocks_impacted_array))\n    )\n)\n\n),\nbronze AS (\n    SELECT\n        A.block_number AS block_id,\n        b.block_timestamp,\n        COALESCE(\n            t.value :tx_result :tx_id,\n            t.value :hash\n        ) :: STRING AS tx_id\n    FROM\n        \n            EVMOS.bronze.streamline_tendermint_transactions\n        \n\n        A\n        JOIN rel_blocks b\n        ON A.block_number = b.block_id\n        JOIN TABLE(FLATTEN(DATA :result :txs)) t \n    qualify(ROW_NUMBER() over(PARTITION BY A.block_number, tx_id\n    ORDER BY\n        A._inserted_timestamp DESC) = 1)\n),\nbronze_count AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        COUNT(\n            DISTINCT tx_id\n        ) AS num_txs\n    FROM\n        bronze\n    GROUP BY\n        block_id,\n        block_timestamp\n),\nbronze_api AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        num_txs\n    FROM\n        EVMOS.silver.blockchain\n    WHERE\n        block_id > 13066416\n        AND block_timestamp BETWEEN (\n            SELECT\n                MIN(block_timestamp)\n            FROM\n                rel_blocks\n        )\n        AND (\n            SELECT\n                MAX(block_timestamp)\n            FROM\n                rel_blocks\n        )\n)\nSELECT\n    'transactions' AS test_name,\n    MIN(\n        A.block_id\n    ) AS min_block,\n    MAX(\n        A.block_id\n    ) AS max_block,\n    MIN(\n        A.block_timestamp\n    ) AS min_block_timestamp,\n    MAX(\n        A.block_timestamp\n    ) AS max_block_timestamp,\n    COUNT(1) AS blocks_tested,\n    SUM(\n        CASE\n            WHEN COALESCE(\n                b.num_txs,\n                0\n            ) - A.num_txs < -3 THEN 1\n            ELSE 0\n        END\n    ) AS blocks_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN COALESCE(\n                b.num_txs,\n                0\n            ) - A.num_txs < -3 THEN A.block_id\n        END\n    ) within GROUP (\n        ORDER BY\n            A.block_id\n    ) AS blocks_impacted_array,\n    SUM(\n        ABS(\n            COALESCE(\n                b.num_txs,\n                0\n            ) - A.num_txs\n        )\n    ) AS transactions_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN COALESCE(\n                b.num_txs,\n                0\n            ) - A.num_txs < -3 THEN OBJECT_CONSTRUCT(\n                'block',\n                A.block_id,\n                'block_timestamp',\n                A.block_timestamp,\n                'diff',\n                COALESCE(\n                    b.num_txs,\n                    0\n                ) - A.num_txs,\n                'blockchain_num_txs',\n                A.num_txs,\n                'bronze_num_txs',\n                COALESCE(\n                    b.num_txs,\n                    0\n                )\n            )\n        END\n    ) within GROUP(\n        ORDER BY\n            A.block_id\n    ) AS test_failure_details,\n    SYSDATE() AS test_timestamp\nFROM\n    bronze_api A\n    LEFT JOIN bronze_count b\n    ON A.block_id = b.block_id", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze_api__get_validator_metadata_lcd": {"database": "EVMOS", "schema": "bronze_api", "name": "bronze_api__get_validator_metadata_lcd", "resource_type": "model", "package_name": "evmos_models", "path": "bronze_api/bronze_api__get_validator_metadata_lcd.sql", "original_file_path": "models/bronze_api/bronze_api__get_validator_metadata_lcd.sql", "unique_id": "model.evmos_models.bronze_api__get_validator_metadata_lcd", "fqn": ["evmos_models", "bronze_api", "bronze_api__get_validator_metadata_lcd"], "alias": "get_validator_metadata_lcd", "checksum": {"name": "sha256", "checksum": "b83779db8f942aa2b3d65cd126dbab641f6b0c08de0ae840746fafd28d6cd80a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table"}, "created_at": 1697554506.3094156, "relation_name": "EVMOS.bronze_api.get_validator_metadata_lcd", "raw_code": "{{ config(\n    materialized = 'table'\n) }}\n\nWITH call AS (\n\n    SELECT\n        ethereum.streamline.udf_api(\n            'GET',\n            'https://lcd-evmos.keplr.app/cosmos/staking/v1beta1/validators?pagination.limit=5000',{},{}\n        ) AS resp,\n        SYSDATE() AS _inserted_timestamp\n),\nkeep_last_if_failed AS (\n    SELECT\n        i.value :operator_address :: STRING AS address,\n        i.value AS DATA,\n        _inserted_timestamp,\n        2 AS RANK\n    FROM\n        call,\n        LATERAL FLATTEN(\n            input => resp :data :validators\n        ) i\n    UNION ALL\n    SELECT\n        address,\n        DATA,\n        _inserted_timestamp,\n        1 AS RANK\n    FROM\n        bronze_api.get_validator_metadata_lcd\n)\nSELECT\n    address,\n    DATA,\n    _inserted_timestamp\nFROM\n    keep_last_if_failed A\n    JOIN (\n        SELECT\n            MAX(RANK) max_rank\n        FROM\n            keep_last_if_failed\n    ) b\n    ON A.rank = b.max_rank", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/evmos_models/models/bronze_api/bronze_api__get_validator_metadata_lcd.sql", "compiled": true, "compiled_code": "\n\nWITH call AS (\n\n    SELECT\n        ethereum.streamline.udf_api(\n            'GET',\n            'https://lcd-evmos.keplr.app/cosmos/staking/v1beta1/validators?pagination.limit=5000',{},{}\n        ) AS resp,\n        SYSDATE() AS _inserted_timestamp\n),\nkeep_last_if_failed AS (\n    SELECT\n        i.value :operator_address :: STRING AS address,\n        i.value AS DATA,\n        _inserted_timestamp,\n        2 AS RANK\n    FROM\n        call,\n        LATERAL FLATTEN(\n            input => resp :data :validators\n        ) i\n    UNION ALL\n    SELECT\n        address,\n        DATA,\n        _inserted_timestamp,\n        1 AS RANK\n    FROM\n        bronze_api.get_validator_metadata_lcd\n)\nSELECT\n    address,\n    DATA,\n    _inserted_timestamp\nFROM\n    keep_last_if_failed A\n    JOIN (\n        SELECT\n            MAX(RANK) max_rank\n        FROM\n            keep_last_if_failed\n    ) b\n    ON A.rank = b.max_rank", "extra_ctes_injected": true, "extra_ctes": []}, "model.evmos_models.bronze_api__get_blockchain": {"database": "EVMOS", "schema": "bronze_api", "name": "bronze_api__get_blockchain", "resource_type": "model", "package_name": "evmos_models", "path": "bronze_api/bronze_api__get_blockchain.sql", "original_file_path": "models/bronze_api/bronze_api__get_blockchain.sql", "unique_id": "model.evmos_models.bronze_api__get_blockchain", "fqn": ["evmos_models", "bronze_api", "bronze_api__get_blockchain"], "alias": "get_blockchain", "checksum": {"name": "sha256", "checksum": "0c16fcaa258138a99ec659d3516ce9dd8045a4c4243ae465984ba893b7ce5398"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "full_refresh": false}, "created_at": 1697554506.314328, "relation_name": "EVMOS.bronze_api.get_blockchain", "raw_code": "{{ config(\n    materialized = 'incremental',\n    full_refresh = false\n) }}\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        (\n            SELECT\n                *,\n                conditional_true_event(\n                    CASE\n                        WHEN rn_mod_out = 1 THEN TRUE\n                        ELSE FALSE\n                    END\n                ) over (\n                    ORDER BY\n                        min_block\n                ) groupID_out\n            FROM\n                (\n                    SELECT\n                        *,\n                        MOD(ROW_NUMBER() over(\n                    ORDER BY\n                        min_block), 100) rn_mod_out\n                    FROM\n                        (\n                            SELECT\n                                MIN(block_id) min_block,\n                                MAX(block_id) max_block,\n                                ARRAY_AGG(block_id) blocks\n                            FROM\n                                (\n                                    SELECT\n                                        conditional_true_event(\n                                            CASE\n                                                WHEN rn_mod = 1 THEN TRUE\n                                                ELSE FALSE\n                                            END\n                                        ) over (\n                                            ORDER BY\n                                                block_ID\n                                        ) groupID,\n                                        block_id\n                                    FROM\n                                        (\n                                            SELECT\n                                                block_Id :: STRING block_Id,\n                                                MOD(ROW_NUMBER() over(\n                                            ORDER BY\n                                                block_id), 20) rn_mod\n                                            FROM\n                                                (\n                                                    SELECT\n                                                        DISTINCT block_id\n                                                    FROM\n                                                        {{ ref('silver__blocks') }}\n\n{% if is_incremental() %}\nEXCEPT\nSELECT\n    block_id\nFROM\n    silver.blockchain\n{% endif %}\n)\n)\n)\nGROUP BY\n    groupID\n)\n)\n)\nWHERE\n    groupID_out < 11\n),\ncalls AS (\n    SELECT\n        groupid_out,\n        ARRAY_AGG(\n            { 'jsonrpc': '2.0',\n            'id': min_block :: INT,\n            'method': 'blockchain',\n            'params': [min_block::STRING,max_block::STRING] }\n        ) call\n    FROM\n        base\n    GROUP BY\n        groupid_out\n)\nSELECT\n    call,\n    ethereum.streamline.udf_json_rpc_call(\n        (\n            SELECT\n                url || auth\n            FROM\n                evmos._internal.api_keys\n            WHERE\n                provider = 'bdnodes'\n        ),{},\n        call\n    ) AS DATA,\n    SYSDATE() AS _inserted_timestamp\nFROM\n    calls", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/bronze_api/bronze_api__get_blockchain.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        (\n            SELECT\n                *,\n                conditional_true_event(\n                    CASE\n                        WHEN rn_mod_out = 1 THEN TRUE\n                        ELSE FALSE\n                    END\n                ) over (\n                    ORDER BY\n                        min_block\n                ) groupID_out\n            FROM\n                (\n                    SELECT\n                        *,\n                        MOD(ROW_NUMBER() over(\n                    ORDER BY\n                        min_block), 100) rn_mod_out\n                    FROM\n                        (\n                            SELECT\n                                MIN(block_id) min_block,\n                                MAX(block_id) max_block,\n                                ARRAY_AGG(block_id) blocks\n                            FROM\n                                (\n                                    SELECT\n                                        conditional_true_event(\n                                            CASE\n                                                WHEN rn_mod = 1 THEN TRUE\n                                                ELSE FALSE\n                                            END\n                                        ) over (\n                                            ORDER BY\n                                                block_ID\n                                        ) groupID,\n                                        block_id\n                                    FROM\n                                        (\n                                            SELECT\n                                                block_Id :: STRING block_Id,\n                                                MOD(ROW_NUMBER() over(\n                                            ORDER BY\n                                                block_id), 20) rn_mod\n                                            FROM\n                                                (\n                                                    SELECT\n                                                        DISTINCT block_id\n                                                    FROM\n                                                        EVMOS.silver.blocks\n\n\nEXCEPT\nSELECT\n    block_id\nFROM\n    silver.blockchain\n\n)\n)\n)\nGROUP BY\n    groupID\n)\n)\n)\nWHERE\n    groupID_out < 11\n),\ncalls AS (\n    SELECT\n        groupid_out,\n        ARRAY_AGG(\n            { 'jsonrpc': '2.0',\n            'id': min_block :: INT,\n            'method': 'blockchain',\n            'params': [min_block::STRING,max_block::STRING] }\n        ) call\n    FROM\n        base\n    GROUP BY\n        groupid_out\n)\nSELECT\n    call,\n    ethereum.streamline.udf_json_rpc_call(\n        (\n            SELECT\n                url || auth\n            FROM\n                evmos._internal.api_keys\n            WHERE\n                provider = 'bdnodes'\n        ),{},\n        call\n    ) AS DATA,\n    SYSDATE() AS _inserted_timestamp\nFROM\n    calls", "extra_ctes_injected": true, "extra_ctes": []}, "operation.evmos_models.evmos_models-on-run-start-0": {"database": "EVMOS", "schema": "evmos_models-on-run-start-0", "name": "evmos_models-on-run-start-0", "resource_type": "operation", "package_name": "evmos_models", "path": "hooks/evmos_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.evmos_models.evmos_models-on-run-start-0", "fqn": ["evmos_models", "hooks", "evmos_models-on-run-start-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "37d305e0175611a734fab430929822759a12398fb5e40be8cb233c5e7356fa4c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1697554506.345044, "relation_name": null, "raw_code": "{{create_sps()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.create_sps"], "nodes": []}, "compiled_path": "target/compiled/evmos_models/./dbt_project.yml/hooks/evmos_models-on-run-start-0.sql", "compiled": true, "compiled_code": "\n    \n        CREATE SCHEMA IF NOT EXISTS _internal;\n        create or replace procedure _internal.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$;\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "index": 0}, "operation.evmos_models.evmos_models-on-run-start-1": {"database": "EVMOS", "schema": "evmos_models-on-run-start-1", "name": "evmos_models-on-run-start-1", "resource_type": "operation", "package_name": "evmos_models", "path": "hooks/evmos_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.evmos_models.evmos_models-on-run-start-1", "fqn": ["evmos_models", "hooks", "evmos_models-on-run-start-1"], "alias": "", "checksum": {"name": "sha256", "checksum": "37d305e0175611a734fab430929822759a12398fb5e40be8cb233c5e7356fa4c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1697554506.356928, "relation_name": null, "raw_code": "{{create_udfs()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.create_udfs"], "nodes": []}, "compiled_path": "target/compiled/evmos_models/./dbt_project.yml/hooks/evmos_models-on-run-start-1.sql", "compiled": true, "compiled_code": "\n    \ncreate or replace function streamline.udtf_get_base_table(max_height integer)\nreturns table (height number)\nas\n$$\n    with base as (\n        select\n            row_number() over (\n                order by\n                    seq4()\n            ) as id\n        from\n            table(generator(rowcount => 100000000))\n    )\nselect\n    id as height\nfrom\n    base\nwhere\n    id <= max_height\n$$\n;\n\n\n    \n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.udf_get_chainhead() returns variant api_integration = aws_evmos_api AS \n        'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/get_chainhead'\n    ;\n\n    \n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.udf_json_rpc(\n        json OBJECT\n    ) returns ARRAY api_integration = aws_evmos_api AS \n        'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/bulk_get_json_rpc'\n    ;\n\n    \n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.bulk_get_tendermint_transactions(\n        json OBJECT\n    ) returns ARRAY api_integration = aws_evmos_api AS \n        'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/bulk_get_tendermint_transactions'\n    ;\n\n    \n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.bulk_get_tendermint_validators(\n        json OBJECT\n    ) returns ARRAY api_integration = aws_evmos_api AS \n        'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/bulk_get_tendermint_validators'\n    ;\n\n", "extra_ctes_injected": true, "extra_ctes": [], "index": 1}, "operation.evmos_models.evmos_models-on-run-end-0": {"database": "EVMOS", "schema": "evmos_models-on-run-end-0", "name": "evmos_models-on-run-end-0", "resource_type": "operation", "package_name": "evmos_models", "path": "hooks/evmos_models-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.evmos_models.evmos_models-on-run-end-0", "fqn": ["evmos_models", "hooks", "evmos_models-on-run-end-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "37d305e0175611a734fab430929822759a12398fb5e40be8cb233c5e7356fa4c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1697554506.3744953, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.apply_meta_as_tags"], "nodes": []}, "compiled_path": "target/compiled/evmos_models/./dbt_project.yml/hooks/evmos_models-on-run-end-0.sql", "compiled": true, "compiled_code": "\n    \n        \n        \n        \n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "index": 0}, "model.fsc_utils._datashare___create_gold": {"database": "EVMOS", "schema": "_datashare", "name": "_datashare___create_gold", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_gold.sql", "original_file_path": "models/datashare/_datashare___create_gold.sql", "unique_id": "model.fsc_utils._datashare___create_gold", "fqn": ["fsc_utils", "datashare", "_datashare___create_gold"], "alias": "_create_gold", "checksum": {"name": "sha256", "checksum": "035b505b6a0d947418cf5b55707eac8b22108edd80f5d03d4b6e472486f37ffa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "merge_update_columns": [], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1697554506.4663293, "relation_name": "EVMOS._datashare._create_gold", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\n$${{- fsc_utils.generate_datashare_ddl() -}}$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at,\n{{ fsc_utils.get_exclusion_schema().replace('\"',\"'\") }} as exclusion_schema\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at,\nnull as exclusion_schema\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.generate_datashare_ddl", "macro.fsc_utils.get_exclusion_schema"], "nodes": []}, "compiled_path": "target/compiled/fsc_utils/models/datashare/_datashare___create_gold.sql", "compiled": true, "compiled_code": "\n\nSELECT\n$$\nBEGIN\nCREATE DATABASE IF NOT EXISTS __NEW__;\nCREATE SCHEMA IF NOT EXISTS __NEW__.gov;\nCREATE SCHEMA IF NOT EXISTS __NEW__.silver;\nCREATE SCHEMA IF NOT EXISTS __NEW__.bronze_api;\nCREATE SCHEMA IF NOT EXISTS __NEW__.core;\n\n\n    \n    \n    create or replace   view __NEW__.GOV.FACT_VALIDATORS\n  \n    \n    \n(\n  \n    \"ADDRESS\" COMMENT \\$\\$Address unique to an individual wallet, validator, or token.\\$\\$, \n  \n    \"BLOCKCHAIN\" COMMENT \\$\\$In this table, always Cosmos. Used to join to cross-chain tables.\\$\\$, \n  \n    \"CREATOR\" COMMENT \\$\\$Name of the label creator - for now, this will always be \"Flipside.\"\\$\\$, \n  \n    \"LABEL_TYPE\" COMMENT \\$\\$A broad category that describes what a label is representing.\\$\\$, \n  \n    \"LABEL_SUBTYPE\" COMMENT \\$\\$Adds more detail to the label type.\\$\\$, \n  \n    \"LABEL\" COMMENT \\$\\$The label or name of the address.\\$\\$, \n  \n    \"PROJECT_NAME\" COMMENT \\$\\$The name of the project the label belongs to.\\$\\$, \n  \n    \"DELEGATOR_SHARES\" COMMENT \\$\\$The number of tokens staked to the validator.\\$\\$, \n  \n    \"JAILED\" COMMENT \\$\\$FALSE when a validator is not jailed, TRUE when a validator is jailed\\$\\$, \n  \n    \"RATE\" COMMENT \\$\\$The current commission rate the validator is charging stakers.\\$\\$, \n  \n    \"MAX_CHANGE_RATE\" COMMENT \\$\\$The maximum rate at which a validator can change their commission per day.\\$\\$, \n  \n    \"MAX_RATE\" COMMENT \\$\\$The maximum commission rate that the validator can charge\\$\\$, \n  \n    \"MIN_SELF_DELEGATION\" COMMENT \\$\\$The minimum number of Evmos tokens that the operator must be staking with their own validator\\$\\$, \n  \n    \"RANK\" COMMENT \\$\\$The rank of the validator in the validator set. Rank is determined by the number of Evmos tokens staked to the validator\\$\\$, \n  \n    \"RAW_METADATA\" COMMENT \\$\\$Additional details about the validator or token in json format.\\$\\$\n  \n)\n\n  copy grants as (\n    \n\nSELECT\n    address,\n    blockchain,\n    creator,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    delegator_shares,\n    jailed,\n    rate,\n    max_change_rate,\n    max_rate,\n    min_self_delegation,\n    RANK,\n    raw_metadata\nFROM\n    __SOURCE__.silver.validators\n  )\n/* {\"app\": \"dbt\", \"dbt_snowflake_query_tags_version\": \"2.3.1\", \"dbt_version\": \"1.4.9\", \"project_name\": \"evmos_models\", \"target_name\": \"dev\", \"target_database\": \"EVMOS\", \"target_schema\": \"SILVER\", \"invocation_id\": \"1e6eac0e-7345-4d1f-9195-958a0f6188f4\", \"node_name\": \"gov__fact_validators\", \"node_alias\": \"fact_validators\", \"node_package_name\": \"evmos_models\", \"node_original_file_path\": \"models/gold/gov/gov__fact_validators.sql\", \"node_database\": \"EVMOS\", \"node_schema\": \"gov\", \"node_id\": \"model.evmos_models.gov__fact_validators\", \"node_resource_type\": \"model\", \"node_meta\": {}, \"node_tags\": [], \"full_refresh\": false, \"which\": \"run\", \"node_refs\": [\"silver__validators\"], \"materialized\": \"view\"} */;\n\n\n    \n    \n    create or replace   view __NEW__.CORE.FACT_MSGS\n  \n    \n    \n(\n  \n    \"BLOCK_ID\" COMMENT \\$\\$The block height the block was recorded at.\\$\\$, \n  \n    \"BLOCK_TIMESTAMP\" COMMENT \\$\\$The date and time at which the block began.\\$\\$, \n  \n    \"TX_ID\" COMMENT \\$\\$A unique key that identifies a transaction. Called \"TxHash\" on block explorers.\\$\\$, \n  \n    \"TX_SUCCEEDED\" COMMENT \\$\\$Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.\\$\\$, \n  \n    \"MSG_GROUP\" COMMENT \\$\\$Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)\\$\\$, \n  \n    \"MSG_INDEX\" COMMENT \\$\\$Short for \"message index,\" the position in which messages occur in a transaction.\\$\\$, \n  \n    \"MSG_TYPE\" COMMENT \\$\\$A string containing information about the type of message occurring.\\$\\$, \n  \n    \"MSG\" COMMENT \\$\\$A block of json that contains the message attributes in base64 encoding.\\$\\$\n  \n)\n\n  copy grants as (\n    \n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    CONCAT(\n        msg_group,\n        ':',\n        msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    msg\nFROM\n    __SOURCE__.silver.msgs\n  )\n/* {\"app\": \"dbt\", \"dbt_snowflake_query_tags_version\": \"2.3.1\", \"dbt_version\": \"1.4.9\", \"project_name\": \"evmos_models\", \"target_name\": \"dev\", \"target_database\": \"EVMOS\", \"target_schema\": \"SILVER\", \"invocation_id\": \"1e6eac0e-7345-4d1f-9195-958a0f6188f4\", \"node_name\": \"core__fact_msgs\", \"node_alias\": \"fact_msgs\", \"node_package_name\": \"evmos_models\", \"node_original_file_path\": \"models/gold/core/core__fact_msgs.sql\", \"node_database\": \"EVMOS\", \"node_schema\": \"core\", \"node_id\": \"model.evmos_models.core__fact_msgs\", \"node_resource_type\": \"model\", \"node_meta\": {}, \"node_tags\": [], \"full_refresh\": false, \"which\": \"run\", \"node_refs\": [\"silver__msgs\"], \"materialized\": \"view\"} */;\n\n\n    \n    \n    create or replace   view __NEW__.CORE.FACT_TRANSFERS\n  \n    \n    \n(\n  \n    \"BLOCK_ID\" COMMENT \\$\\$The block height the block was recorded at.\\$\\$, \n  \n    \"BLOCK_TIMESTAMP\" COMMENT \\$\\$The date and time at which the block began.\\$\\$, \n  \n    \"TX_ID\" COMMENT \\$\\$A unique key that identifies a transaction. Called \"TxHash\" on block explorers.\\$\\$, \n  \n    \"TX_SUCCEEDED\" COMMENT \\$\\$Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.\\$\\$, \n  \n    \"TRANSFER_TYPE\" COMMENT \\$\\$Details on the type of transfer occurring during the transaction. \"Transfer_In\" = depositing tokens onto the Cosmos Hub. \"Transfer_out\" = withdrawing tokens from the Cosmos Hub. \"Cosmos\" = wallet to wallet transfer on the Cosmos Hub.\\$\\$, \n  \n    \"SENDER\" COMMENT \\$\\$The wallet address of the individual sent tokens in the transfer.\\$\\$, \n  \n    \"AMOUNT\" COMMENT \\$\\$The amount that was used in the transaction message.\\$\\$, \n  \n    \"CURRENCY\" COMMENT \\$\\$The currency that was used in the transaction message.\\$\\$, \n  \n    \"RECEIVER\" COMMENT \\$\\$The wallet address of the individual received tokens in the transfer.\\$\\$\n  \n)\n\n  copy grants as (\n    \n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    receiver\nFROM\n    __SOURCE__.silver.transfers\n  )\n/* {\"app\": \"dbt\", \"dbt_snowflake_query_tags_version\": \"2.3.1\", \"dbt_version\": \"1.4.9\", \"project_name\": \"evmos_models\", \"target_name\": \"dev\", \"target_database\": \"EVMOS\", \"target_schema\": \"SILVER\", \"invocation_id\": \"1e6eac0e-7345-4d1f-9195-958a0f6188f4\", \"node_name\": \"core__fact_transfers\", \"node_alias\": \"fact_transfers\", \"node_package_name\": \"evmos_models\", \"node_original_file_path\": \"models/gold/core/core__fact_transfers.sql\", \"node_database\": \"EVMOS\", \"node_schema\": \"core\", \"node_id\": \"model.evmos_models.core__fact_transfers\", \"node_resource_type\": \"model\", \"node_meta\": {}, \"node_tags\": [], \"full_refresh\": false, \"which\": \"run\", \"node_refs\": [\"silver__transfers\"], \"materialized\": \"view\"} */;\n\n\n    \n    \n    create or replace   view __NEW__.CORE.FACT_VALIDATORS\n  \n    \n    \n(\n  \n    \"ADDRESS\" COMMENT \\$\\$Address unique to an individual wallet, validator, or token.\\$\\$, \n  \n    \"BLOCKCHAIN\" COMMENT \\$\\$In this table, always Cosmos. Used to join to cross-chain tables.\\$\\$, \n  \n    \"CREATOR\" COMMENT \\$\\$Name of the label creator - for now, this will always be \"Flipside.\"\\$\\$, \n  \n    \"LABEL_TYPE\" COMMENT \\$\\$A broad category that describes what a label is representing.\\$\\$, \n  \n    \"LABEL_SUBTYPE\" COMMENT \\$\\$Adds more detail to the label type.\\$\\$, \n  \n    \"LABEL\" COMMENT \\$\\$The label or name of the address.\\$\\$, \n  \n    \"PROJECT_NAME\" COMMENT \\$\\$The name of the project the label belongs to.\\$\\$, \n  \n    \"DELEGATOR_SHARES\" COMMENT \\$\\$The number of tokens staked to the validator.\\$\\$, \n  \n    \"JAILED\" COMMENT \\$\\$FALSE when a validator is not jailed, TRUE when a validator is jailed\\$\\$, \n  \n    \"RATE\" COMMENT \\$\\$The current commission rate the validator is charging stakers.\\$\\$, \n  \n    \"MAX_CHANGE_RATE\" COMMENT \\$\\$The maximum rate at which a validator can change their commission per day.\\$\\$, \n  \n    \"MAX_RATE\" COMMENT \\$\\$The maximum commission rate that the validator can charge\\$\\$, \n  \n    \"MIN_SELF_DELEGATION\" COMMENT \\$\\$The minimum number of Evmos tokens that the operator must be staking with their own validator\\$\\$, \n  \n    \"RANK\" COMMENT \\$\\$The rank of the validator in the validator set. Rank is determined by the number of Evmos tokens staked to the validator\\$\\$, \n  \n    \"RAW_METADATA\" COMMENT \\$\\$Additional details about the validator or token in json format.\\$\\$\n  \n)\n\n  copy grants as (\n    \n\nSELECT\n    *\nFROM\n    __NEW__.GOV.FACT_VALIDATORS\n  )\n/* {\"app\": \"dbt\", \"dbt_snowflake_query_tags_version\": \"2.3.1\", \"dbt_version\": \"1.4.9\", \"project_name\": \"evmos_models\", \"target_name\": \"dev\", \"target_database\": \"EVMOS\", \"target_schema\": \"SILVER\", \"invocation_id\": \"1e6eac0e-7345-4d1f-9195-958a0f6188f4\", \"node_name\": \"core__fact_validators\", \"node_alias\": \"fact_validators\", \"node_package_name\": \"evmos_models\", \"node_original_file_path\": \"models/gold/core/core__fact_validators.sql\", \"node_database\": \"EVMOS\", \"node_schema\": \"core\", \"node_id\": \"model.evmos_models.core__fact_validators\", \"node_resource_type\": \"model\", \"node_meta\": {}, \"node_tags\": [], \"full_refresh\": false, \"which\": \"run\", \"node_refs\": [\"gov__fact_validators\"], \"materialized\": \"view\"} */;\n\n\n    \n    \n    create or replace   view __NEW__.CORE.FACT_MSG_ATTRIBUTES\n  \n    \n    \n(\n  \n    \"BLOCK_ID\" COMMENT \\$\\$The block height the block was recorded at.\\$\\$, \n  \n    \"BLOCK_TIMESTAMP\" COMMENT \\$\\$The date and time at which the block began.\\$\\$, \n  \n    \"TX_ID\" COMMENT \\$\\$A unique key that identifies a transaction. Called \"TxHash\" on block explorers.\\$\\$, \n  \n    \"TX_SUCCEEDED\" COMMENT \\$\\$Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.\\$\\$, \n  \n    \"MSG_GROUP\" COMMENT \\$\\$Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)\\$\\$, \n  \n    \"MSG_INDEX\" COMMENT \\$\\$Short for \"message index,\" the position in which messages occur in a transaction.\\$\\$, \n  \n    \"MSG_TYPE\" COMMENT \\$\\$A string containing information about the type of message occurring.\\$\\$, \n  \n    \"ATTRIBUTE_INDEX\" COMMENT \\$\\$\\$\\$, \n  \n    \"ATTRIBUTE_KEY\" COMMENT \\$\\$They key from the key-value pair from the message attribute\\$\\$, \n  \n    \"ATTRIBUTE_VALUE\" COMMENT \\$\\$They value from the key-value pair from the message attribute\\$\\$\n  \n)\n\n  copy grants as (\n    \n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    CONCAT(\n        msg_group,\n        ':',\n        msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    attribute_index,\n    attribute_key,\n    attribute_value\nFROM\n    __SOURCE__.silver.msg_attributes\n  )\n/* {\"app\": \"dbt\", \"dbt_snowflake_query_tags_version\": \"2.3.1\", \"dbt_version\": \"1.4.9\", \"project_name\": \"evmos_models\", \"target_name\": \"dev\", \"target_database\": \"EVMOS\", \"target_schema\": \"SILVER\", \"invocation_id\": \"1e6eac0e-7345-4d1f-9195-958a0f6188f4\", \"node_name\": \"core__fact_msg_attributes\", \"node_alias\": \"fact_msg_attributes\", \"node_package_name\": \"evmos_models\", \"node_original_file_path\": \"models/gold/core/core__fact_msg_attributes.sql\", \"node_database\": \"EVMOS\", \"node_schema\": \"core\", \"node_id\": \"model.evmos_models.core__fact_msg_attributes\", \"node_resource_type\": \"model\", \"node_meta\": {}, \"node_tags\": [], \"full_refresh\": false, \"which\": \"run\", \"node_refs\": [\"silver__msg_attributes\"], \"materialized\": \"view\"} */;\n\n\n    \n    \n    create or replace   view __NEW__.CORE.FACT_BLOCKS\n  \n    \n    \n(\n  \n    \"BLOCK_ID\" COMMENT \\$\\$The block height the block was recorded at.\\$\\$, \n  \n    \"BLOCK_TIMESTAMP\" COMMENT \\$\\$The date and time at which the block began.\\$\\$, \n  \n    \"CHAIN_ID\" COMMENT \\$\\$The name and version of the blockchain.\\$\\$, \n  \n    \"TX_COUNT\" COMMENT \\$\\$The number of transactions that occurred during a block.\\$\\$, \n  \n    \"PROPOSER_ADDRESS\" COMMENT \\$\\$The address of the validator that proposed the block.\\$\\$, \n  \n    \"VALIDATOR_HASH\" COMMENT \\$\\$The root hash of the new validator set.\\$\\$\n  \n)\n\n  copy grants as (\n    \n\nSELECT \n    block_id, \n    block_timestamp, \n    chain_id, \n    tx_count, \n    proposer_address, \n    validator_hash\nFROM \n    __SOURCE__.silver.blocks\n  )\n/* {\"app\": \"dbt\", \"dbt_snowflake_query_tags_version\": \"2.3.1\", \"dbt_version\": \"1.4.9\", \"project_name\": \"evmos_models\", \"target_name\": \"dev\", \"target_database\": \"EVMOS\", \"target_schema\": \"SILVER\", \"invocation_id\": \"1e6eac0e-7345-4d1f-9195-958a0f6188f4\", \"node_name\": \"core__fact_blocks\", \"node_alias\": \"fact_blocks\", \"node_package_name\": \"evmos_models\", \"node_original_file_path\": \"models/gold/core/core__fact_blocks.sql\", \"node_database\": \"EVMOS\", \"node_schema\": \"core\", \"node_id\": \"model.evmos_models.core__fact_blocks\", \"node_resource_type\": \"model\", \"node_meta\": {}, \"node_tags\": [], \"full_refresh\": false, \"which\": \"run\", \"node_refs\": [\"silver__blocks\"], \"materialized\": \"view\"} */;\n\n\n    \n    \n    create or replace   view __NEW__.CORE.FACT_TRANSACTIONS\n  \n    \n    \n(\n  \n    \"BLOCK_ID\" COMMENT \\$\\$The block height the block was recorded at.\\$\\$, \n  \n    \"BLOCK_TIMESTAMP\" COMMENT \\$\\$The date and time at which the block began.\\$\\$, \n  \n    \"TX_ID\" COMMENT \\$\\$A unique key that identifies a transaction. Called \"TxHash\" on block explorers.\\$\\$, \n  \n    \"TX_FROM\" COMMENT \\$\\$The wallet address of the individual who initiated the transaction\\$\\$, \n  \n    \"TX_SUCCEEDED\" COMMENT \\$\\$Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.\\$\\$, \n  \n    \"CODESPACE\" COMMENT \\$\\$Namespace for the code.\\$\\$, \n  \n    \"FEE\" COMMENT \\$\\$The fee is paid by the initiator of the transaction. Fee = gas * gas price and is given in micro-OSMO.\\$\\$, \n  \n    \"GAS_USED\" COMMENT \\$\\$The amount of gas consumed by the transaction.\\$\\$, \n  \n    \"GAS_WANTED\" COMMENT \\$\\$Amount of gas requested for a transaction. It is provided by users when the transaction is generated.\\$\\$, \n  \n    \"MSGS\" COMMENT \\$\\$The underlying json from the messages or events within the transactions.\\$\\$\n  \n)\n\n  copy grants as (\n    \n\nSELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    t.tx_from,\n    t.tx_succeeded,\n    t.codespace,\n    t.fee,\n    t.gas_used,\n    t.gas_wanted,\n    t.msgs\nFROM\n    __SOURCE__.silver.transactions_final\n    t\n  )\n/* {\"app\": \"dbt\", \"dbt_snowflake_query_tags_version\": \"2.3.1\", \"dbt_version\": \"1.4.9\", \"project_name\": \"evmos_models\", \"target_name\": \"dev\", \"target_database\": \"EVMOS\", \"target_schema\": \"SILVER\", \"invocation_id\": \"1e6eac0e-7345-4d1f-9195-958a0f6188f4\", \"node_name\": \"core__fact_transactions\", \"node_alias\": \"fact_transactions\", \"node_package_name\": \"evmos_models\", \"node_original_file_path\": \"models/gold/core/core__fact_transactions.sql\", \"node_database\": \"EVMOS\", \"node_schema\": \"core\", \"node_id\": \"model.evmos_models.core__fact_transactions\", \"node_resource_type\": \"model\", \"node_meta\": {}, \"node_tags\": [], \"full_refresh\": false, \"which\": \"run\", \"node_refs\": [\"silver__transactions_final\"], \"materialized\": \"view\"} */;\nCREATE SCHEMA IF NOT EXISTS __NEW__.core;\nCREATE SCHEMA IF NOT EXISTS __NEW__.silver;\nCREATE SCHEMA IF NOT EXISTS __NEW__.gov;\nCREATE SCHEMA IF NOT EXISTS __NEW__.bronze_api;\nCREATE OR REPLACE VIEW __NEW__.CORE.DIM_LABELS AS SELECT * FROM __SOURCE__.CORE.DIM_LABELS;\nEND$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at,\n\n\n\n['_datashare', 'dbt_expectations_expect_column_to_exist_gov', 'dbt_expectations_expect_column_to_exist_core', 'not_null_core', 'dbt_utils_unique_combination_of_columns_core', 'dbt_expectations_expect_column_values_to_be_in_set_core', 'not_null_silver', 'dbt_expectations_expect_column_values_to_be_in_type_list_silver', 'dbt_expectations_expect_row_values_to_have_recent_data_silver', 'dbt_utils_unique_combination_of_columns_silver', 'dbt_expectations_expect_column_to_exist_silver', 'dbt_expectations_expect_column_values_to_be_in_set_silver', 'sequence_gaps_silver', 'not_null_silver_observability', 'dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability', 'dbt_expectations_expect_row_values_to_have_recent_data_silver_observability', 'dbt_utils_unique_combination_of_columns_silver_observability'] as exclusion_schema\n", "extra_ctes_injected": true, "extra_ctes": []}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_ADDRESS.95fbe5342e": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_ADDRESS", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_ea3c5e068b1330b23b165d57744b93cb.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_ADDRESS.95fbe5342e", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_ADDRESS"], "alias": "fact_validators_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ea3c5e068b1330b23b165d57744b93cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ea3c5e068b1330b23b165d57744b93cb"}, "created_at": 1697554506.572433, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ea3c5e068b1330b23b165d57744b93cb\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_ea3c5e068b1330b23b165d57744b93cb.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ADDRESS' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ADDRESS", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_BLOCKCHAIN.7cf8f7a92c": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_BLOCKCHAIN", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_ecd2350b96603f6e598a73d4f6df8c87.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_BLOCKCHAIN.7cf8f7a92c", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_BLOCKCHAIN"], "alias": "fact_validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ecd2350b96603f6e598a73d4f6df8c87", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ecd2350b96603f6e598a73d4f6df8c87"}, "created_at": 1697554506.5914853, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_BLOCKCHAIN", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ecd2350b96603f6e598a73d4f6df8c87\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_ecd2350b96603f6e598a73d4f6df8c87.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKCHAIN", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_CREATOR.18aee719fc": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_CREATOR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_f6761c88489dc2ce850e13c9633e0a9a.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_CREATOR.18aee719fc", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_CREATOR"], "alias": "fact_validators_CREATOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f6761c88489dc2ce850e13c9633e0a9a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f6761c88489dc2ce850e13c9633e0a9a"}, "created_at": 1697554506.5990212, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_CREATOR", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f6761c88489dc2ce850e13c9633e0a9a\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_f6761c88489dc2ce850e13c9633e0a9a.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CREATOR' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CREATOR", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_TYPE.25a2422c81": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c1ec26ddbf20a318accf888374a26f78.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_TYPE.25a2422c81", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_TYPE"], "alias": "fact_validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1ec26ddbf20a318accf888374a26f78", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c1ec26ddbf20a318accf888374a26f78"}, "created_at": 1697554506.6063735, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_LABEL_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1ec26ddbf20a318accf888374a26f78\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_c1ec26ddbf20a318accf888374a26f78.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_TYPE' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_TYPE", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_SUBTYPE.e0c797ce2d": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_SUBTYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_e2643a5733e6d498a6e903412da4000c.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_SUBTYPE.e0c797ce2d", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_SUBTYPE"], "alias": "fact_validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e2643a5733e6d498a6e903412da4000c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e2643a5733e6d498a6e903412da4000c"}, "created_at": 1697554506.613603, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_LABEL_SUBTYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e2643a5733e6d498a6e903412da4000c\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_e2643a5733e6d498a6e903412da4000c.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_SUBTYPE' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_SUBTYPE", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL.4fe2c43b65": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_769adef158ca127abeba5e6d82d35a70.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL.4fe2c43b65", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL"], "alias": "fact_validators_LABEL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_769adef158ca127abeba5e6d82d35a70", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_769adef158ca127abeba5e6d82d35a70"}, "created_at": 1697554506.6207242, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_LABEL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_769adef158ca127abeba5e6d82d35a70\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_769adef158ca127abeba5e6d82d35a70.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_PROJECT_NAME.5cc1c00d71": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_PROJECT_NAME", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_51659dfb6968d64e28a8054e01694d10.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_PROJECT_NAME.5cc1c00d71", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_PROJECT_NAME"], "alias": "fact_validators_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_51659dfb6968d64e28a8054e01694d10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_51659dfb6968d64e28a8054e01694d10"}, "created_at": 1697554506.6281452, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_PROJECT_NAME", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_51659dfb6968d64e28a8054e01694d10\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_51659dfb6968d64e28a8054e01694d10.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('PROJECT_NAME' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PROJECT_NAME", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_DELEGATOR_SHARES.24087433c1": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DELEGATOR_SHARES", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_DELEGATOR_SHARES", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_53a0b74ca346a34dd52c08184bddf449.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_DELEGATOR_SHARES.24087433c1", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_DELEGATOR_SHARES"], "alias": "fact_validators_DELEGATOR_SHARES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_53a0b74ca346a34dd52c08184bddf449", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_53a0b74ca346a34dd52c08184bddf449"}, "created_at": 1697554506.6355598, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_DELEGATOR_SHARES", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_53a0b74ca346a34dd52c08184bddf449\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_53a0b74ca346a34dd52c08184bddf449.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DELEGATOR_SHARES' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "DELEGATOR_SHARES", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_JAILED.5d66da1491": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "JAILED", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_JAILED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_0919dda15346ddd435acbb8682ae40c2.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_JAILED.5d66da1491", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_JAILED"], "alias": "fact_validators_JAILED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0919dda15346ddd435acbb8682ae40c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0919dda15346ddd435acbb8682ae40c2"}, "created_at": 1697554506.6422062, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_JAILED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0919dda15346ddd435acbb8682ae40c2\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_0919dda15346ddd435acbb8682ae40c2.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('JAILED' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "JAILED", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RATE.e6007c777a": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RATE", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_77436115af91b67188cfbf166bb91261.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RATE.e6007c777a", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_RATE"], "alias": "fact_validators_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_77436115af91b67188cfbf166bb91261", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_77436115af91b67188cfbf166bb91261"}, "created_at": 1697554506.6498988, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_77436115af91b67188cfbf166bb91261\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_77436115af91b67188cfbf166bb91261.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('RATE' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RATE", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_CHANGE_RATE.089f47296a": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MAX_CHANGE_RATE", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_CHANGE_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_2ddae64383294ae6c546f131a7fbf531.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_CHANGE_RATE.089f47296a", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_CHANGE_RATE"], "alias": "fact_validators_MAX_CHANGE_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ddae64383294ae6c546f131a7fbf531", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2ddae64383294ae6c546f131a7fbf531"}, "created_at": 1697554506.657102, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_MAX_CHANGE_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ddae64383294ae6c546f131a7fbf531\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_2ddae64383294ae6c546f131a7fbf531.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_CHANGE_RATE", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_RATE.4a85f9a318": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MAX_RATE", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d4808cc9837674a65c05f3fce226f7f1.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_RATE.4a85f9a318", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_RATE"], "alias": "fact_validators_MAX_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4808cc9837674a65c05f3fce226f7f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d4808cc9837674a65c05f3fce226f7f1"}, "created_at": 1697554506.6651793, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_MAX_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4808cc9837674a65c05f3fce226f7f1\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_d4808cc9837674a65c05f3fce226f7f1.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MAX_RATE' as TEXT) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_RATE", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MIN_SELF_DELEGATION.d05f8a117b": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MIN_SELF_DELEGATION", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_MIN_SELF_DELEGATION", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_4eda106d1b1428f162ccb280ec850922.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MIN_SELF_DELEGATION.d05f8a117b", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_MIN_SELF_DELEGATION"], "alias": "fact_validators_MIN_SELF_DELEGATION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4eda106d1b1428f162ccb280ec850922", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4eda106d1b1428f162ccb280ec850922"}, "created_at": 1697554506.6727405, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_MIN_SELF_DELEGATION", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4eda106d1b1428f162ccb280ec850922\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_4eda106d1b1428f162ccb280ec850922.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_SELF_DELEGATION", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RANK.c623385581": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RANK", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_RANK", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_da4f452b023281e9b4e60b233f00b177.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RANK.c623385581", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_RANK"], "alias": "fact_validators_RANK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_da4f452b023281e9b4e60b233f00b177", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_da4f452b023281e9b4e60b233f00b177"}, "created_at": 1697554506.6800723, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_RANK", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_da4f452b023281e9b4e60b233f00b177\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_da4f452b023281e9b4e60b233f00b177.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('RANK' as TEXT) as column_name,\n            13 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RANK", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RAW_METADATA.1478081a3d": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RAW_METADATA", "model": "{{ get_where_subquery(ref('gov__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validators_RAW_METADATA", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c0414c27499113388bc2783dda86e32f.sql", "original_file_path": "models/gold/gov/gov__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RAW_METADATA.1478081a3d", "fqn": ["evmos_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validators_RAW_METADATA"], "alias": "fact_validators_RAW_METADATA", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c0414c27499113388bc2783dda86e32f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c0414c27499113388bc2783dda86e32f"}, "created_at": 1697554506.6876733, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_gov.fact_validators_RAW_METADATA", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c0414c27499113388bc2783dda86e32f\") }}", "language": "sql", "refs": [["gov__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.gov__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/gov/gov__fact_validators.yml/dbt_expectations_expect_column_c0414c27499113388bc2783dda86e32f.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('RAW_METADATA' as TEXT) as column_name,\n            14 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RAW_METADATA", "file_key_name": "models.gov__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS"], "alias": "dim_tokens_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc"}, "created_at": 1697554506.7030594, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ADDRESS' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ADDRESS", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN"], "alias": "dim_tokens_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d"}, "created_at": 1697554506.7109325, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_BLOCKCHAIN", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR"], "alias": "dim_tokens_CREATOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a"}, "created_at": 1697554506.7189012, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_CREATOR", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CREATOR' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CREATOR", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE"], "alias": "dim_tokens_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755"}, "created_at": 1697554506.7267346, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_LABEL_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_TYPE' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE"], "alias": "dim_tokens_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668"}, "created_at": 1697554506.734119, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_LABEL_SUBTYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_SUBTYPE' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL"], "alias": "dim_tokens_LABEL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554506.7423902, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_LABEL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME"], "alias": "dim_tokens_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071"}, "created_at": 1697554506.7498496, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_PROJECT_NAME", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('PROJECT_NAME' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ALIAS", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS"], "alias": "dim_tokens_ALIAS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554506.7573586, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_ALIAS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ALIAS' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ALIAS", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DECIMAL", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL"], "alias": "dim_tokens_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207"}, "created_at": 1697554506.7644079, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_DECIMAL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DECIMAL' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "DECIMAL", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RAW_METADATA", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA"], "alias": "dim_tokens_RAW_METADATA", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5"}, "created_at": 1697554506.7714686, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_RAW_METADATA", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('RAW_METADATA' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RAW_METADATA", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "UNIQUE_KEY", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8.sql", "original_file_path": "models/gold/core/core__dim_tokens.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY"], "alias": "dim_tokens_UNIQUE_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8"}, "created_at": 1697554506.779421, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.dim_tokens_UNIQUE_KEY", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8\") }}", "language": "sql", "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_tokens"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_tokens.yml/dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('UNIQUE_KEY' as TEXT) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "UNIQUE_KEY", "file_key_name": "models.core__dim_tokens"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS"], "alias": "fact_validators_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f"}, "created_at": 1697554506.7970438, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ADDRESS' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ADDRESS", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN"], "alias": "fact_validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44"}, "created_at": 1697554506.804991, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_BLOCKCHAIN", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR"], "alias": "fact_validators_CREATOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5"}, "created_at": 1697554506.8128219, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_CREATOR", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CREATOR' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CREATOR", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE"], "alias": "fact_validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb"}, "created_at": 1697554506.8204517, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_LABEL_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_TYPE' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_TYPE", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE"], "alias": "fact_validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06"}, "created_at": 1697554506.828502, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_LABEL_SUBTYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_SUBTYPE' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL"], "alias": "fact_validators_LABEL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41"}, "created_at": 1697554506.8358934, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_LABEL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LABEL' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME"], "alias": "fact_validators_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204"}, "created_at": 1697554506.843795, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_PROJECT_NAME", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('PROJECT_NAME' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PROJECT_NAME", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DELEGATOR_SHARES", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES"], "alias": "fact_validators_DELEGATOR_SHARES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d"}, "created_at": 1697554506.8512025, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_DELEGATOR_SHARES", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DELEGATOR_SHARES' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "DELEGATOR_SHARES", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "JAILED", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED"], "alias": "fact_validators_JAILED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa"}, "created_at": 1697554506.8586953, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_JAILED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('JAILED' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "JAILED", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RATE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_RATE"], "alias": "fact_validators_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d"}, "created_at": 1697554506.8659167, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('RATE' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RATE", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MAX_CHANGE_RATE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE"], "alias": "fact_validators_MAX_CHANGE_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d"}, "created_at": 1697554506.873548, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_MAX_CHANGE_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_CHANGE_RATE", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MAX_RATE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE"], "alias": "fact_validators_MAX_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2"}, "created_at": 1697554506.8808656, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_MAX_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MAX_RATE' as TEXT) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_RATE", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MIN_SELF_DELEGATION", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION"], "alias": "fact_validators_MIN_SELF_DELEGATION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7"}, "created_at": 1697554506.889112, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_MIN_SELF_DELEGATION", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_SELF_DELEGATION", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RANK", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_RANK", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_RANK"], "alias": "fact_validators_RANK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862"}, "created_at": 1697554506.8967652, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_RANK", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('RANK' as TEXT) as column_name,\n            13 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RANK", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RAW_METADATA", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468.sql", "original_file_path": "models/gold/core/core__fact_validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA"], "alias": "fact_validators_RAW_METADATA", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468"}, "created_at": 1697554506.9647217, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_validators_RAW_METADATA", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468\") }}", "language": "sql", "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_validators"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_validators.yml/dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('RAW_METADATA' as TEXT) as column_name,\n            14 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RAW_METADATA", "file_key_name": "models.core__fact_validators"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID"], "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e"}, "created_at": 1697554506.9786508, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP"], "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8"}, "created_at": 1697554506.9859908, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID"], "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce"}, "created_at": 1697554506.9930208, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FROM", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_core", "name": "not_null_core__fact_transactions_TX_FROM", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_core__fact_transactions_TX_FROM.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3", "fqn": ["evmos_models", "gold", "core", "not_null_core__fact_transactions_TX_FROM"], "alias": "fact_transactions_TX_FROM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "tx_succeeded = 'TRUE'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "tx_succeeded = 'TRUE'"}, "created_at": 1697554507.0004485, "relation_name": "EVMOS.not_null_core.fact_transactions_TX_FROM", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"tx_succeeded = 'TRUE'\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX_FROM.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from EVMOS.core.fact_transactions where tx_succeeded = 'TRUE') dbt_subquery\nwhere TX_FROM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_FROM", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED"], "alias": "fact_transactions_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e"}, "created_at": 1697554507.0042949, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CODESPACE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE"], "alias": "fact_transactions_CODESPACE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1"}, "created_at": 1697554507.0115442, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transactions_CODESPACE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CODESPACE' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CODESPACE", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.not_null_core__fact_transactions_FEE.f477aa43d7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_core", "name": "not_null_core__fact_transactions_FEE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_core__fact_transactions_FEE.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.not_null_core__fact_transactions_FEE.f477aa43d7", "fqn": ["evmos_models", "gold", "core", "not_null_core__fact_transactions_FEE"], "alias": "fact_transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.017998, "relation_name": "EVMOS.not_null_core.fact_transactions_FEE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/not_null_core__fact_transactions_FEE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.core.fact_transactions\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "FEE", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED"], "alias": "fact_transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a"}, "created_at": 1697554507.021003, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transactions_GAS_USED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('GAS_USED' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "GAS_USED", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAS_WANTED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED"], "alias": "fact_transactions_GAS_WANTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a"}, "created_at": 1697554507.028227, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transactions_GAS_WANTED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('GAS_WANTED' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "GAS_WANTED", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSGS", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS"], "alias": "fact_transactions_MSGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed"}, "created_at": 1697554507.0344574, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transactions_MSGS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSGS' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSGS", "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_core", "name": "dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f", "fqn": ["evmos_models", "gold", "core", "dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID"], "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0"}, "created_at": 1697554507.0413039, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_core.fact_transactions_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0\") }}", "language": "sql", "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transactions"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transactions.yml/dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from EVMOS.core.fact_transactions\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.core__fact_transactions"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID"], "alias": "fact_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718"}, "created_at": 1697554507.0618613, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06ec7a899413bab6063716744517f718\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP"], "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56"}, "created_at": 1697554507.0686824, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID"], "alias": "fact_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0"}, "created_at": 1697554507.0762794, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED"], "alias": "fact_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711"}, "created_at": 1697554507.0829072, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE"], "alias": "fact_transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f"}, "created_at": 1697554507.0894616, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_TRANSFER_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TRANSFER_TYPE' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TRANSFER_TYPE", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER"], "alias": "fact_transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c"}, "created_at": 1697554507.096236, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_SENDER", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('SENDER' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "SENDER", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT"], "alias": "fact_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5"}, "created_at": 1697554507.1034133, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('AMOUNT' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "AMOUNT", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CURRENCY", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY"], "alias": "fact_transfers_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398"}, "created_at": 1697554507.1102617, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_CURRENCY", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CURRENCY' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CURRENCY", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER"], "alias": "fact_transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef"}, "created_at": 1697554507.1166549, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_transfers_RECEIVER", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef\") }}", "language": "sql", "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_transfers"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_transfers.yml/dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('RECEIVER' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RECEIVER", "file_key_name": "models.core__fact_transfers"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID"], "alias": "fact_msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037"}, "created_at": 1697554507.1292336, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP"], "alias": "fact_msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4"}, "created_at": 1697554507.1359076, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID"], "alias": "fact_msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04"}, "created_at": 1697554507.1427352, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED"], "alias": "fact_msg_attributes_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21"}, "created_at": 1697554507.150802, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP"], "alias": "fact_msg_attributes_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920"}, "created_at": 1697554507.1583822, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_MSG_GROUP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSG_GROUP' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_GROUP", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX"], "alias": "fact_msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97"}, "created_at": 1697554507.164996, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_MSG_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSG_INDEX' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_INDEX", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE"], "alias": "fact_msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011"}, "created_at": 1697554507.1724303, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_MSG_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSG_TYPE' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_TYPE", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ATTRIBUTE_KEY", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY"], "alias": "fact_msg_attributes_ATTRIBUTE_KEY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972"}, "created_at": 1697554507.1797304, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_ATTRIBUTE_KEY", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ATTRIBUTE_KEY", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ATTRIBUTE_VALUE", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1.sql", "original_file_path": "models/gold/core/core__fact_msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE"], "alias": "fact_msg_attributes_ATTRIBUTE_VALUE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1"}, "created_at": 1697554507.187486, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_ATTRIBUTE_VALUE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1\") }}", "language": "sql", "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ATTRIBUTE_VALUE", "file_key_name": "models.core__fact_msg_attributes"}, "test.evmos_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_core", "name": "not_null_core__dim_labels_BLOCKCHAIN", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_core__dim_labels_BLOCKCHAIN.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.evmos_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "fqn": ["evmos_models", "gold", "core", "not_null_core__dim_labels_BLOCKCHAIN"], "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.1998522, "relation_name": "EVMOS.not_null_core.dim_labels_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_labels"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_labels.yml/not_null_core__dim_labels_BLOCKCHAIN.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.core.dim_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.evmos_models.not_null_core__dim_labels_CREATOR.0c77d5749c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_core", "name": "not_null_core__dim_labels_CREATOR", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_core__dim_labels_CREATOR.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.evmos_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "fqn": ["evmos_models", "gold", "core", "not_null_core__dim_labels_CREATOR"], "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.203588, "relation_name": "EVMOS.not_null_core.dim_labels_CREATOR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_labels"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_labels.yml/not_null_core__dim_labels_CREATOR.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.core.dim_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CREATOR", "file_key_name": "models.core__dim_labels"}, "test.evmos_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_core", "name": "not_null_core__dim_labels_LABEL_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_core__dim_labels_LABEL_TYPE.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.evmos_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "fqn": ["evmos_models", "gold", "core", "not_null_core__dim_labels_LABEL_TYPE"], "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.2069583, "relation_name": "EVMOS.not_null_core.dim_labels_LABEL_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_labels"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_labels.yml/not_null_core__dim_labels_LABEL_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.core.dim_labels\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__bridge.4ee3b54c5e": {"test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin", "bridge"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__bridge", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c3475e8a855f92a78cd602e7f93c23cb.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__bridge.4ee3b54c5e", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__bridge"], "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c3475e8a855f92a78cd602e7f93c23cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c3475e8a855f92a78cd602e7f93c23cb"}, "created_at": 1697554507.2105887, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_set_core.dim_labels_LABEL_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c3475e8a855f92a78cd602e7f93c23cb\") }}", "language": "sql", "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_labels"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_labels.yml/dbt_expectations_expect_column_c3475e8a855f92a78cd602e7f93c23cb.sql", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from EVMOS.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as TEXT) as value_field\n    union all\n    select\n        cast('nft' as TEXT) as value_field\n    union all\n    select\n        cast('defi' as TEXT) as value_field\n    union all\n    select\n        cast('dex' as TEXT) as value_field\n    union all\n    select\n        cast('cex' as TEXT) as value_field\n    union all\n    select\n        cast('dapp' as TEXT) as value_field\n    union all\n    select\n        cast('token' as TEXT) as value_field\n    union all\n    select\n        cast('operator' as TEXT) as value_field\n    union all\n    select\n        cast('layer2' as TEXT) as value_field\n    union all\n    select\n        cast('chadmin' as TEXT) as value_field\n    union all\n    select\n        cast('bridge' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.evmos_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_core", "name": "not_null_core__dim_labels_LABEL_SUBTYPE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_core__dim_labels_LABEL_SUBTYPE.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.evmos_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "fqn": ["evmos_models", "gold", "core", "not_null_core__dim_labels_LABEL_SUBTYPE"], "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.2365375, "relation_name": "EVMOS.not_null_core.dim_labels_LABEL_SUBTYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_labels"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_labels.yml/not_null_core__dim_labels_LABEL_SUBTYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.core.dim_labels\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.evmos_models.not_null_core__dim_labels_LABEL.05696d692d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_core", "name": "not_null_core__dim_labels_LABEL", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_core__dim_labels_LABEL.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.evmos_models.not_null_core__dim_labels_LABEL.05696d692d", "fqn": ["evmos_models", "gold", "core", "not_null_core__dim_labels_LABEL"], "alias": "dim_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.2401364, "relation_name": "EVMOS.not_null_core.dim_labels_LABEL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_labels"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_labels.yml/not_null_core__dim_labels_LABEL.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.core.dim_labels\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL", "file_key_name": "models.core__dim_labels"}, "test.evmos_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_core", "name": "not_null_core__dim_labels_ADDRESS", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.evmos_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "fqn": ["evmos_models", "gold", "core", "not_null_core__dim_labels_ADDRESS"], "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.2434835, "relation_name": "EVMOS.not_null_core.dim_labels_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__dim_labels"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__dim_labels.yml/not_null_core__dim_labels_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.core.dim_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID"], "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295"}, "created_at": 1697554507.2516139, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295\") }}", "language": "sql", "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_blocks.yml/dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP"], "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6"}, "created_at": 1697554507.2585888, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6\") }}", "language": "sql", "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_blocks.yml/dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID"], "alias": "fact_blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6"}, "created_at": 1697554507.265215, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_blocks_CHAIN_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6\") }}", "language": "sql", "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_blocks.yml/dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CHAIN_ID' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_blocks"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT"], "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a"}, "created_at": 1697554507.271786, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_blocks_TX_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a\") }}", "language": "sql", "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_blocks.yml/dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_COUNT' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS"], "alias": "fact_blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80"}, "created_at": 1697554507.2782953, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_blocks_PROPOSER_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80\") }}", "language": "sql", "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_blocks.yml/dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.core__fact_blocks"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VALIDATOR_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH"], "alias": "fact_blocks_VALIDATOR_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f"}, "created_at": 1697554507.2851143, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_blocks_VALIDATOR_HASH", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f\") }}", "language": "sql", "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_blocks"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_blocks.yml/dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('VALIDATOR_HASH' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "VALIDATOR_HASH", "file_key_name": "models.core__fact_blocks"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19.sql", "original_file_path": "models/gold/core/core__fact_msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID"], "alias": "fact_msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19"}, "created_at": 1697554507.298291, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msgs_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19\") }}", "language": "sql", "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.yml/dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_msgs"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190.sql", "original_file_path": "models/gold/core/core__fact_msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP"], "alias": "fact_msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190"}, "created_at": 1697554507.3050096, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msgs_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190\") }}", "language": "sql", "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.yml/dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_msgs"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.sql", "original_file_path": "models/gold/core/core__fact_msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID"], "alias": "fact_msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.312188, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msgs_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.yml/dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.core__fact_msgs"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e.sql", "original_file_path": "models/gold/core/core__fact_msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED"], "alias": "fact_msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e"}, "created_at": 1697554507.317789, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msgs_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e\") }}", "language": "sql", "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.yml/dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_msgs"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910.sql", "original_file_path": "models/gold/core/core__fact_msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP"], "alias": "fact_msgs_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910"}, "created_at": 1697554507.3248205, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msgs_MSG_GROUP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910\") }}", "language": "sql", "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.yml/dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSG_GROUP' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_GROUP", "file_key_name": "models.core__fact_msgs"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c.sql", "original_file_path": "models/gold/core/core__fact_msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX"], "alias": "fact_msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c"}, "created_at": 1697554507.3325918, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msgs_MSG_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c\") }}", "language": "sql", "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.yml/dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSG_INDEX' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_INDEX", "file_key_name": "models.core__fact_msgs"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6.sql", "original_file_path": "models/gold/core/core__fact_msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE"], "alias": "fact_msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6"}, "created_at": 1697554507.3401966, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msgs_MSG_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6\") }}", "language": "sql", "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.yml/dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSG_TYPE' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_TYPE", "file_key_name": "models.core__fact_msgs"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.sql", "original_file_path": "models/gold/core/core__fact_msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4", "fqn": ["evmos_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG"], "alias": "fact_msgs_MSG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.3477993, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_core.fact_msgs_MSG", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.core__fact_msgs"]}, "compiled_path": "target/compiled/evmos_models/models/gold/core/core__fact_msgs.yml/dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSG' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG", "file_key_name": "models.core__fact_msgs"}, "test.evmos_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_BLOCK_ID"], "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.3611932, "relation_name": "EVMOS.not_null_silver.transfers_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT"], "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f"}, "created_at": 1697554507.364358, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.3776555, "relation_name": "EVMOS.not_null_silver.transfers_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1"], "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d"}, "created_at": 1697554507.3809123, "relation_name": "EVMOS.dbt_expectations_expect_row_values_to_have_recent_data_silver.transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as timestamp_ntz)) as max_timestamp\n    from\n        EVMOS.silver.transfers\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as timestamp_ntz) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp_ntz))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as timestamp_ntz)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1"}, "created_at": 1697554507.415481, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers_TX_ID.1be05d8ee2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_TX_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_TX_ID.1be05d8ee2", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_TX_ID"], "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.423063, "relation_name": "EVMOS.not_null_silver.transfers_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR"], "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b"}, "created_at": 1697554507.4259405, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_TX_SUCCEEDED", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_TX_SUCCEEDED"], "alias": "transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.4333363, "relation_name": "EVMOS.not_null_silver.transfers_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN"], "alias": "transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738"}, "created_at": 1697554507.4361796, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_TRANSFER_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_TRANSFER_TYPE.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_TRANSFER_TYPE"], "alias": "transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.4440837, "relation_name": "EVMOS.not_null_silver.transfers_TRANSFER_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TRANSFER_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere TRANSFER_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TRANSFER_TYPE", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_TYPE__STRING__VARCHAR.43a2c68273": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_TYPE__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_6e2d5f4a8dc26394fe2245310a8f94b6.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_TYPE__STRING__VARCHAR.43a2c68273", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_TYPE__STRING__VARCHAR"], "alias": "transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e2d5f4a8dc26394fe2245310a8f94b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6e2d5f4a8dc26394fe2245310a8f94b6"}, "created_at": 1697554507.447164, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_TRANSFER_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e2d5f4a8dc26394fe2245310a8f94b6\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_6e2d5f4a8dc26394fe2245310a8f94b6.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRANSFER_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TRANSFER_TYPE", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers_SENDER.0abbede6fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_SENDER", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_SENDER.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_SENDER.0abbede6fe", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_SENDER"], "alias": "transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.4552372, "relation_name": "EVMOS.not_null_silver.transfers_SENDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_SENDER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "SENDER", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_SENDER__STRING__VARCHAR.4ae271899a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_SENDER__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_e10a71d546a72baeafc567861c2786ec.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_SENDER__STRING__VARCHAR.4ae271899a", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_SENDER__STRING__VARCHAR"], "alias": "transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e10a71d546a72baeafc567861c2786ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e10a71d546a72baeafc567861c2786ec"}, "created_at": 1697554507.4580743, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_SENDER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e10a71d546a72baeafc567861c2786ec\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_e10a71d546a72baeafc567861c2786ec.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SENDER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "SENDER", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers_AMOUNT.ba102cb51b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_AMOUNT", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_AMOUNT.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_AMOUNT.ba102cb51b", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_AMOUNT"], "alias": "transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.4655428, "relation_name": "EVMOS.not_null_silver.transfers_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_AMOUNT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "AMOUNT", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_AMOUNT__NUMBER__FLOAT.d9692a78f1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_AMOUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_3d2e580b5050635224f5adef1606662f.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_AMOUNT__NUMBER__FLOAT.d9692a78f1", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_AMOUNT__NUMBER__FLOAT"], "alias": "transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d2e580b5050635224f5adef1606662f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3d2e580b5050635224f5adef1606662f"}, "created_at": 1697554507.4683852, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d2e580b5050635224f5adef1606662f\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_3d2e580b5050635224f5adef1606662f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "AMOUNT", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers_CURRENCY.4a8953d5ec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENCY", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_CURRENCY", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_CURRENCY.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_CURRENCY.4a8953d5ec", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_CURRENCY"], "alias": "transfers_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.4758666, "relation_name": "EVMOS.not_null_silver.transfers_CURRENCY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_CURRENCY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere CURRENCY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CURRENCY", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CURRENCY__STRING__VARCHAR.a650f3fc35": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CURRENCY", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CURRENCY__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_b6a3425524fb0c40bcd8df9df7d4b19b.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CURRENCY__STRING__VARCHAR.a650f3fc35", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CURRENCY__STRING__VARCHAR"], "alias": "transfers_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b6a3425524fb0c40bcd8df9df7d4b19b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b6a3425524fb0c40bcd8df9df7d4b19b"}, "created_at": 1697554507.4793687, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_CURRENCY", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b6a3425524fb0c40bcd8df9df7d4b19b\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_b6a3425524fb0c40bcd8df9df7d4b19b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CURRENCY", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers_RECEIVER.965c9f325d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers_RECEIVER", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers_RECEIVER.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers_RECEIVER.965c9f325d", "fqn": ["evmos_models", "silver", "not_null_silver__transfers_RECEIVER"], "alias": "transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.4882066, "relation_name": "EVMOS.not_null_silver.transfers_RECEIVER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers_RECEIVER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere RECEIVER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RECEIVER", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIVER__STRING__VARCHAR.b93628338d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIVER__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d10227dfb81ed91851b8671c5fbe4d86.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIVER__STRING__VARCHAR.b93628338d", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIVER__STRING__VARCHAR"], "alias": "transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d10227dfb81ed91851b8671c5fbe4d86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d10227dfb81ed91851b8671c5fbe4d86"}, "created_at": 1697554507.49241, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_RECEIVER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d10227dfb81ed91851b8671c5fbe4d86\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d10227dfb81ed91851b8671c5fbe4d86.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECEIVER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RECEIVER", "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transfers__INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transfers__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a", "fqn": ["evmos_models", "silver", "not_null_silver__transfers__INSERTED_TIMESTAMP"], "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.501672, "relation_name": "EVMOS.not_null_silver.transfers", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/not_null_silver__transfers__INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transfers\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8d4833df5c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ", "TIMESTAMP_LTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_034409a6d4c9f4460c937d58b78cb9f6.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8d4833df5c", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ"], "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_034409a6d4c9f4460c937d58b78cb9f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_034409a6d4c9f4460c937d58b78cb9f6"}, "created_at": 1697554507.5051916, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_034409a6d4c9f4460c937d58b78cb9f6\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_034409a6d4c9f4460c937d58b78cb9f6.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ', 'TIMESTAMP_LTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__BLOCK_ID__MSG_INDEX__CURRENCY.0b4f1afb10": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCK_ID", "MSG_INDEX", "CURRENCY"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__BLOCK_ID__MSG_INDEX__CURRENCY", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_2b4647e14ef22315e222ddaf052c9fa2.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__BLOCK_ID__MSG_INDEX__CURRENCY.0b4f1afb10", "fqn": ["evmos_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__BLOCK_ID__MSG_INDEX__CURRENCY"], "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2b4647e14ef22315e222ddaf052c9fa2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_2b4647e14ef22315e222ddaf052c9fa2"}, "created_at": 1697554507.5129952, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver.transfers_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2b4647e14ef22315e222ddaf052c9fa2\") }}", "language": "sql", "refs": [["silver__transfers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transfers"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transfers.yml/dbt_utils_unique_combination_o_2b4647e14ef22315e222ddaf052c9fa2.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, BLOCK_ID, MSG_INDEX, CURRENCY\n    from EVMOS.silver.transfers\n    group by TX_ID, BLOCK_ID, MSG_INDEX, CURRENCY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__transfers"}, "test.evmos_models.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msg_attributes_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msg_attributes_BLOCK_ID.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf", "fqn": ["evmos_models", "silver", "not_null_silver__msg_attributes_BLOCK_ID"], "alias": "msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.5278711, "relation_name": "EVMOS.not_null_silver.msg_attributes_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_BLOCK_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msg_attributes\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT"], "alias": "msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191"}, "created_at": 1697554507.5309725, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msg_attributes_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msg_attributes_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9", "fqn": ["evmos_models", "silver", "not_null_silver__msg_attributes_BLOCK_TIMESTAMP"], "alias": "msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.5382988, "relation_name": "EVMOS.not_null_silver.msg_attributes_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msg_attributes\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1"], "alias": "msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf"}, "created_at": 1697554507.5420387, "relation_name": "EVMOS.dbt_expectations_expect_row_values_to_have_recent_data_silver.msg_attributes_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf.sql", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as timestamp_ntz)) as max_timestamp\n    from\n        EVMOS.silver.msg_attributes\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as timestamp_ntz) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp_ntz))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as timestamp_ntz)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8"}, "created_at": 1697554507.5545247, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.not_null_silver__msg_attributes_TX_ID.34f30240c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msg_attributes_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msg_attributes_TX_ID.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.not_null_silver__msg_attributes_TX_ID.34f30240c0", "fqn": ["evmos_models", "silver", "not_null_silver__msg_attributes_TX_ID"], "alias": "msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.5618289, "relation_name": "EVMOS.not_null_silver.msg_attributes_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_TX_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msg_attributes\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__STRING__VARCHAR.f3a5b084a1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_39cd8196f183cb993be2e6d4a8a38b80.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__STRING__VARCHAR.f3a5b084a1", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__STRING__VARCHAR"], "alias": "msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_39cd8196f183cb993be2e6d4a8a38b80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_39cd8196f183cb993be2e6d4a8a38b80"}, "created_at": 1697554507.5657399, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_39cd8196f183cb993be2e6d4a8a38b80\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_39cd8196f183cb993be2e6d4a8a38b80.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__NUMBER__FLOAT.3ff8ce7ee1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_ed1635c0ddf306788271bff3c0d0cf20.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__NUMBER__FLOAT.3ff8ce7ee1", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__NUMBER__FLOAT"], "alias": "msg_attributes_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ed1635c0ddf306788271bff3c0d0cf20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ed1635c0ddf306788271bff3c0d0cf20"}, "created_at": 1697554507.573181, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MSG_GROUP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ed1635c0ddf306788271bff3c0d0cf20\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_ed1635c0ddf306788271bff3c0d0cf20.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_GROUP'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_GROUP", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_SUB_GROUP__NUMBER__FLOAT.ffdfeb6ce8": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MSG_SUB_GROUP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_SUB_GROUP__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_63d96ef0480cccadb6f3ddb5706cbd0b.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_SUB_GROUP__NUMBER__FLOAT.ffdfeb6ce8", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_SUB_GROUP__NUMBER__FLOAT"], "alias": "msg_attributes_MSG_SUB_GROUP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_63d96ef0480cccadb6f3ddb5706cbd0b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_63d96ef0480cccadb6f3ddb5706cbd0b"}, "created_at": 1697554507.581353, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MSG_SUB_GROUP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_63d96ef0480cccadb6f3ddb5706cbd0b\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_63d96ef0480cccadb6f3ddb5706cbd0b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_SUB_GROUP'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_SUB_GROUP", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msg_attributes_MSG_INDEX", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msg_attributes_MSG_INDEX.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717", "fqn": ["evmos_models", "silver", "not_null_silver__msg_attributes_MSG_INDEX"], "alias": "msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.5887887, "relation_name": "EVMOS.not_null_silver.msg_attributes_MSG_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_MSG_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msg_attributes\nwhere MSG_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_INDEX", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT"], "alias": "msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc"}, "created_at": 1697554507.5918086, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MSG_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_INDEX", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msg_attributes_MSG_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msg_attributes_MSG_TYPE.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361", "fqn": ["evmos_models", "silver", "not_null_silver__msg_attributes_MSG_TYPE"], "alias": "msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.5996213, "relation_name": "EVMOS.not_null_silver.msg_attributes_MSG_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_MSG_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msg_attributes\nwhere MSG_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_TYPE", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__STRING__VARCHAR.20bcdff679": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_0553e1806b9ae2660d48a463d77dc376.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__STRING__VARCHAR.20bcdff679", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__STRING__VARCHAR"], "alias": "msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0553e1806b9ae2660d48a463d77dc376", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0553e1806b9ae2660d48a463d77dc376"}, "created_at": 1697554507.6025538, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MSG_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0553e1806b9ae2660d48a463d77dc376\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_0553e1806b9ae2660d48a463d77dc376.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_TYPE", "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msg_attributes_TX_ID__MSG_INDEX__ATTRIBUTE_INDEX.e7c19e7974": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MSG_INDEX", "ATTRIBUTE_INDEX"], "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__msg_attributes_TX_ID__MSG_INDEX__ATTRIBUTE_INDEX", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_7c6a83e825eb7eb7ea1370710ff1baeb.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msg_attributes_TX_ID__MSG_INDEX__ATTRIBUTE_INDEX.e7c19e7974", "fqn": ["evmos_models", "silver", "dbt_utils_unique_combination_of_columns_silver__msg_attributes_TX_ID__MSG_INDEX__ATTRIBUTE_INDEX"], "alias": "msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7c6a83e825eb7eb7ea1370710ff1baeb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_7c6a83e825eb7eb7ea1370710ff1baeb"}, "created_at": 1697554507.609914, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver.msg_attributes_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7c6a83e825eb7eb7ea1370710ff1baeb\") }}", "language": "sql", "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msg_attributes"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msg_attributes.yml/dbt_utils_unique_combination_o_7c6a83e825eb7eb7ea1370710ff1baeb.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MSG_INDEX, ATTRIBUTE_INDEX\n    from EVMOS.silver.msg_attributes\n    group by TX_ID, MSG_INDEX, ATTRIBUTE_INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__msg_attributes"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_ID.bf1b3be3d9": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_silver", "name": "dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_1282fed2f39ccfef73e5aecdac674753.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_ID.bf1b3be3d9", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_ID"], "alias": "transactions_final_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1282fed2f39ccfef73e5aecdac674753", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1282fed2f39ccfef73e5aecdac674753"}, "created_at": 1697554507.6242936, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_silver.transactions_final_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1282fed2f39ccfef73e5aecdac674753\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_expectations_expect_column_1282fed2f39ccfef73e5aecdac674753.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_TIMESTAMP.ea92ba4a11": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_silver", "name": "dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_2d64ff1e5f2121a337cf9223fcba5b0e.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_TIMESTAMP.ea92ba4a11", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_TIMESTAMP"], "alias": "transactions_final_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2d64ff1e5f2121a337cf9223fcba5b0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2d64ff1e5f2121a337cf9223fcba5b0e"}, "created_at": 1697554507.631094, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_silver.transactions_final_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2d64ff1e5f2121a337cf9223fcba5b0e\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_expectations_expect_column_2d64ff1e5f2121a337cf9223fcba5b0e.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_ID.c258bff1f9": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_silver", "name": "dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_8adfa043381d35766067c61d02e988fb.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_ID.c258bff1f9", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_ID"], "alias": "transactions_final_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8adfa043381d35766067c61d02e988fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8adfa043381d35766067c61d02e988fb"}, "created_at": 1697554507.6377017, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_silver.transactions_final_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8adfa043381d35766067c61d02e988fb\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_expectations_expect_column_8adfa043381d35766067c61d02e988fb.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.not_null_silver__transactions_final_TX_FROM.12296b6fae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FROM", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_final_TX_FROM", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_final_TX_FROM.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_final_TX_FROM.12296b6fae", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_final_TX_FROM"], "alias": "transactions_final_TX_FROM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "tx_succeeded = 'TRUE'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "tx_succeeded = 'TRUE'"}, "created_at": 1697554507.6443906, "relation_name": "EVMOS.not_null_silver.transactions_final_TX_FROM", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"tx_succeeded = 'TRUE'\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/not_null_silver__transactions_final_TX_FROM.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from EVMOS.silver.transactions_final where tx_succeeded = 'TRUE') dbt_subquery\nwhere TX_FROM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_FROM", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_SUCCEEDED.8412d10220": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_silver", "name": "dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_SUCCEEDED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_6ffd205681e54964590e7a27bb4d89c9.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_SUCCEEDED.8412d10220", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_SUCCEEDED"], "alias": "transactions_final_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ffd205681e54964590e7a27bb4d89c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6ffd205681e54964590e7a27bb4d89c9"}, "created_at": 1697554507.6477578, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_silver.transactions_final_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ffd205681e54964590e7a27bb4d89c9\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_expectations_expect_column_6ffd205681e54964590e7a27bb4d89c9.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_CODESPACE.1a2bc35449": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CODESPACE", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_silver", "name": "dbt_expectations_expect_column_to_exist_silver__transactions_final_CODESPACE", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_39344e616683a3ceb2e77f9a3859783f.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_CODESPACE.1a2bc35449", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_to_exist_silver__transactions_final_CODESPACE"], "alias": "transactions_final_CODESPACE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_39344e616683a3ceb2e77f9a3859783f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_39344e616683a3ceb2e77f9a3859783f"}, "created_at": 1697554507.6538742, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_silver.transactions_final_CODESPACE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_39344e616683a3ceb2e77f9a3859783f\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_expectations_expect_column_39344e616683a3ceb2e77f9a3859783f.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CODESPACE' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CODESPACE", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.not_null_silver__transactions_final_FEE.c284e11dcd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_final_FEE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_final_FEE.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_final_FEE.c284e11dcd", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_final_FEE"], "alias": "transactions_final_FEE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.6607854, "relation_name": "EVMOS.not_null_silver.transactions_final_FEE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/not_null_silver__transactions_final_FEE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions_final\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "FEE", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_USED.a3513b2796": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_silver", "name": "dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_USED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d4de7645f5d058b89dc28268c79e10d4.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_USED.a3513b2796", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_USED"], "alias": "transactions_final_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4de7645f5d058b89dc28268c79e10d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d4de7645f5d058b89dc28268c79e10d4"}, "created_at": 1697554507.663706, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_silver.transactions_final_GAS_USED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4de7645f5d058b89dc28268c79e10d4\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_expectations_expect_column_d4de7645f5d058b89dc28268c79e10d4.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('GAS_USED' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "GAS_USED", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_WANTED.8599c41151": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAS_WANTED", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_silver", "name": "dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_WANTED", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_424cd14634d310dcc7671e77eaf9f33e.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_WANTED.8599c41151", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_WANTED"], "alias": "transactions_final_GAS_WANTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_424cd14634d310dcc7671e77eaf9f33e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_424cd14634d310dcc7671e77eaf9f33e"}, "created_at": 1697554507.6703804, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_silver.transactions_final_GAS_WANTED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_424cd14634d310dcc7671e77eaf9f33e\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_expectations_expect_column_424cd14634d310dcc7671e77eaf9f33e.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('GAS_WANTED' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "GAS_WANTED", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_MSGS.243f811eab": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSGS", "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_to_exist_silver", "name": "dbt_expectations_expect_column_to_exist_silver__transactions_final_MSGS", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_9f699993cdb8404403016d48a7687667.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_MSGS.243f811eab", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_to_exist_silver__transactions_final_MSGS"], "alias": "transactions_final_MSGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9f699993cdb8404403016d48a7687667", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9f699993cdb8404403016d48a7687667"}, "created_at": 1697554507.6770236, "relation_name": "EVMOS.dbt_expectations_expect_column_to_exist_silver.transactions_final_MSGS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9f699993cdb8404403016d48a7687667\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_expectations_expect_column_9f699993cdb8404403016d48a7687667.sql", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('MSGS' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSGS", "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_final_TX_ID.09096ac176": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__transactions_final')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_final_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_7a0d12c9f862c3c804f2570c1c089567.sql", "original_file_path": "models/silver/silver__transactions_final.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_final_TX_ID.09096ac176", "fqn": ["evmos_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_final_TX_ID"], "alias": "transactions_final_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7a0d12c9f862c3c804f2570c1c089567", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_7a0d12c9f862c3c804f2570c1c089567"}, "created_at": 1697554507.683511, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver.transactions_final_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7a0d12c9f862c3c804f2570c1c089567\") }}", "language": "sql", "refs": [["silver__transactions_final"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions_final"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions_final.yml/dbt_utils_unique_combination_o_7a0d12c9f862c3c804f2570c1c089567.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from EVMOS.silver.transactions_final\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__transactions_final"}, "test.evmos_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_BLOCK_ID.ba1565770d", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_BLOCK_ID"], "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.698788, "relation_name": "EVMOS.not_null_silver.transactions_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT"], "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea"}, "created_at": 1697554507.7016106, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_BLOCK_TIMESTAMP"], "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.7087817, "relation_name": "EVMOS.not_null_silver.transactions_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2"], "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec"}, "created_at": 1697554507.712234, "relation_name": "EVMOS.dbt_expectations_expect_row_values_to_have_recent_data_silver.transactions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_row_va_75107901d55b276d94ae32fb40ce17ec.sql", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as timestamp_ntz)) as max_timestamp\n    from\n        EVMOS.silver.transactions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as timestamp_ntz) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp_ntz))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as timestamp_ntz)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb"}, "created_at": 1697554507.722867, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions_TX_ID.5bc0e20339": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_TX_ID.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_TX_ID.5bc0e20339", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_TX_ID"], "alias": "transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.7311485, "relation_name": "EVMOS.not_null_silver.transactions_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_ID__STRING__VARCHAR.81b523ec1d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_2de2b3a2ad5f45c204ac3dbd63d53b34.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_ID__STRING__VARCHAR.81b523ec1d", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_ID__STRING__VARCHAR"], "alias": "transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2de2b3a2ad5f45c204ac3dbd63d53b34", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2de2b3a2ad5f45c204ac3dbd63d53b34"}, "created_at": 1697554507.73431, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2de2b3a2ad5f45c204ac3dbd63d53b34\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_2de2b3a2ad5f45c204ac3dbd63d53b34.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions_GAS_USED.1c943486c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_GAS_USED", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_GAS_USED.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_GAS_USED.1c943486c0", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_GAS_USED"], "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.741642, "relation_name": "EVMOS.not_null_silver.transactions_GAS_USED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_USED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT"], "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07"}, "created_at": 1697554507.7449389, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_GAS_USED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions_GAS_WANTED.440469f6c5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_WANTED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_GAS_WANTED", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_GAS_WANTED.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_GAS_WANTED.440469f6c5", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_GAS_WANTED"], "alias": "transactions_GAS_WANTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.7519157, "relation_name": "EVMOS.not_null_silver.transactions_GAS_WANTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_WANTED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions\nwhere GAS_WANTED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "GAS_WANTED", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_WANTED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT"], "alias": "transactions_GAS_WANTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0"}, "created_at": 1697554507.7554238, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_GAS_WANTED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_WANTED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "GAS_WANTED", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_TX_SUCCEEDED", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_TX_SUCCEEDED"], "alias": "transactions_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.762715, "relation_name": "EVMOS.not_null_silver.transactions_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SUCCEEDED__BOOLEAN.1f7ce5b336": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SUCCEEDED__BOOLEAN", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_f9fc390efda16d57dd2d2515218f7ada.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SUCCEEDED__BOOLEAN.1f7ce5b336", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SUCCEEDED__BOOLEAN"], "alias": "transactions_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f9fc390efda16d57dd2d2515218f7ada", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f9fc390efda16d57dd2d2515218f7ada"}, "created_at": 1697554507.766085, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f9fc390efda16d57dd2d2515218f7ada\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_f9fc390efda16d57dd2d2515218f7ada.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions_TX_CODE.080a71cc61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_CODE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_TX_CODE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_TX_CODE.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_TX_CODE.080a71cc61", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_TX_CODE"], "alias": "transactions_TX_CODE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TX_SUCCEEDED", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TX_SUCCEEDED"}, "created_at": 1697554507.774601, "relation_name": "EVMOS.not_null_silver.transactions_TX_CODE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"TX_SUCCEEDED\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_CODE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from EVMOS.silver.transactions where TX_SUCCEEDED) dbt_subquery\nwhere TX_CODE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_CODE", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_CODE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT"], "alias": "transactions_TX_CODE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0"}, "created_at": 1697554507.7782311, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_TX_CODE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_CODE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_CODE", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions_MSGS.e30a3fea27": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSGS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_MSGS", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_MSGS.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_MSGS.e30a3fea27", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_MSGS"], "alias": "transactions_MSGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.7868145, "relation_name": "EVMOS.not_null_silver.transactions_MSGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_MSGS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions\nwhere MSGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSGS", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions_TX_LOG.1ceefab63d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_LOG", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions_TX_LOG", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions_TX_LOG.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions_TX_LOG.1ceefab63d", "fqn": ["evmos_models", "silver", "not_null_silver__transactions_TX_LOG"], "alias": "transactions_TX_LOG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TX_SUCCEEDED", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TX_SUCCEEDED"}, "created_at": 1697554507.7908473, "relation_name": "EVMOS.not_null_silver.transactions_TX_LOG", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"TX_SUCCEEDED\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_LOG.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from EVMOS.silver.transactions where TX_SUCCEEDED) dbt_subquery\nwhere TX_LOG is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_LOG", "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__transactions__INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__transactions__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0", "fqn": ["evmos_models", "silver", "not_null_silver__transactions__INSERTED_TIMESTAMP"], "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.7938137, "relation_name": "EVMOS.not_null_silver.transactions", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/not_null_silver__transactions__INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.transactions\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8451af7915": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ", "TIMESTAMP_LTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_595ef6cf3f95c7ae143a1049a7e2f3a8.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8451af7915", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ"], "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_595ef6cf3f95c7ae143a1049a7e2f3a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_595ef6cf3f95c7ae143a1049a7e2f3a8"}, "created_at": 1697554507.7971513, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_595ef6cf3f95c7ae143a1049a7e2f3a8\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_595ef6cf3f95c7ae143a1049a7e2f3a8.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ', 'TIMESTAMP_LTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020.sql", "original_file_path": "models/silver/silver__transactions.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b", "fqn": ["evmos_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID"], "alias": "transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020"}, "created_at": 1697554507.8051276, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver.transactions_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020\") }}", "language": "sql", "refs": [["silver__transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__transactions"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__transactions.yml/dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from EVMOS.silver.transactions\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__transactions"}, "test.evmos_models.not_null_silver__validators_ADDRESS.044bdd0fb3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_ADDRESS", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_ADDRESS.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_ADDRESS.044bdd0fb3", "fqn": ["evmos_models", "silver", "not_null_silver__validators_ADDRESS"], "alias": "validators_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.8222961, "relation_name": "EVMOS.not_null_silver.validators_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ADDRESS", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR"], "alias": "validators_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7"}, "created_at": 1697554507.8252487, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ADDRESS", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_BLOCKCHAIN.8d62ff2215": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_BLOCKCHAIN", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_BLOCKCHAIN.8d62ff2215", "fqn": ["evmos_models", "silver", "not_null_silver__validators_BLOCKCHAIN"], "alias": "validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.8330846, "relation_name": "EVMOS.not_null_silver.validators_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_BLOCKCHAIN.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR"], "alias": "validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77"}, "created_at": 1697554507.8363502, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_BLOCKCHAIN", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__evmos.03ce0c8a26": {"test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["evmos"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__evmos", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_f11044abf92abc221739026ad75a7d8b.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__evmos.03ce0c8a26", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__evmos"], "alias": "validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f11044abf92abc221739026ad75a7d8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f11044abf92abc221739026ad75a7d8b"}, "created_at": 1697554507.8438294, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_set_silver.validators_BLOCKCHAIN", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f11044abf92abc221739026ad75a7d8b\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_f11044abf92abc221739026ad75a7d8b.sql", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from EVMOS.silver.validators\n    \n\n),\nset_values as (\n\n    select\n        cast('evmos' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_CREATOR.29e051ca7b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_CREATOR", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_CREATOR.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_CREATOR.29e051ca7b", "fqn": ["evmos_models", "silver", "not_null_silver__validators_CREATOR"], "alias": "validators_CREATOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.851439, "relation_name": "EVMOS.not_null_silver.validators_CREATOR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_CREATOR.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CREATOR", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR"], "alias": "validators_CREATOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58"}, "created_at": 1697554507.8547254, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_CREATOR", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CREATOR", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_LABEL_TYPE.9ac3147d2a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_LABEL_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_LABEL_TYPE.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_LABEL_TYPE.9ac3147d2a", "fqn": ["evmos_models", "silver", "not_null_silver__validators_LABEL_TYPE"], "alias": "validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.8617544, "relation_name": "EVMOS.not_null_silver.validators_LABEL_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_LABEL_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_TYPE", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR"], "alias": "validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa"}, "created_at": 1697554507.8652794, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_LABEL_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_TYPE", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8": {"test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["operator"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator"], "alias": "validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71"}, "created_at": 1697554507.8735125, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_set_silver.validators_LABEL_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71.sql", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from EVMOS.silver.validators\n    \n\n),\nset_values as (\n\n    select\n        cast('operator' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_TYPE", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_LABEL_SUBTYPE.64be738825": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_LABEL_SUBTYPE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_LABEL_SUBTYPE.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_LABEL_SUBTYPE.64be738825", "fqn": ["evmos_models", "silver", "not_null_silver__validators_LABEL_SUBTYPE"], "alias": "validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.8823886, "relation_name": "EVMOS.not_null_silver.validators_LABEL_SUBTYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_LABEL_SUBTYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_SUBTYPE", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR"], "alias": "validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186"}, "created_at": 1697554507.8856587, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_LABEL_SUBTYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_SUBTYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_SUBTYPE", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b": {"test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["validator"], "column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator"], "alias": "validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7"}, "created_at": 1697554507.8933718, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_set_silver.validators_LABEL_SUBTYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7.sql", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        LABEL_SUBTYPE as value_field\n\n    from EVMOS.silver.validators\n    \n\n),\nset_values as (\n\n    select\n        cast('validator' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL_SUBTYPE", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_LABEL.5e8c7267ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_LABEL", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_LABEL.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_LABEL.5e8c7267ff", "fqn": ["evmos_models", "silver", "not_null_silver__validators_LABEL"], "alias": "validators_LABEL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.9013152, "relation_name": "EVMOS.not_null_silver.validators_LABEL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_LABEL.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR"], "alias": "validators_LABEL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5"}, "created_at": 1697554507.9047139, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_LABEL", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LABEL", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_PROJECT_NAME.b8f893f8e7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_PROJECT_NAME", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_PROJECT_NAME.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_PROJECT_NAME.b8f893f8e7", "fqn": ["evmos_models", "silver", "not_null_silver__validators_PROJECT_NAME"], "alias": "validators_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.912771, "relation_name": "EVMOS.not_null_silver.validators_PROJECT_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_PROJECT_NAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PROJECT_NAME", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR"], "alias": "validators_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063"}, "created_at": 1697554507.9158738, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_PROJECT_NAME", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROJECT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PROJECT_NAME", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_DELEGATOR_SHARES.89b722f278": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DELEGATOR_SHARES", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_DELEGATOR_SHARES", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_DELEGATOR_SHARES.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_DELEGATOR_SHARES.89b722f278", "fqn": ["evmos_models", "silver", "not_null_silver__validators_DELEGATOR_SHARES"], "alias": "validators_DELEGATOR_SHARES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.9228847, "relation_name": "EVMOS.not_null_silver.validators_DELEGATOR_SHARES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_DELEGATOR_SHARES.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere DELEGATOR_SHARES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "DELEGATOR_SHARES", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DELEGATOR_SHARES", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT"], "alias": "validators_DELEGATOR_SHARES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53"}, "created_at": 1697554507.9261127, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_DELEGATOR_SHARES", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DELEGATOR_SHARES'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "DELEGATOR_SHARES", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_JAILED.f85ae4ab21": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "JAILED", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_JAILED", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_JAILED.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_JAILED.f85ae4ab21", "fqn": ["evmos_models", "silver", "not_null_silver__validators_JAILED"], "alias": "validators_JAILED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.9342756, "relation_name": "EVMOS.not_null_silver.validators_JAILED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_JAILED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere JAILED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "JAILED", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "JAILED", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN"], "alias": "validators_JAILED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd"}, "created_at": 1697554507.9378507, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_JAILED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'JAILED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "JAILED", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_RATE.fea467fa10": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_RATE.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_RATE.fea467fa10", "fqn": ["evmos_models", "silver", "not_null_silver__validators_RATE"], "alias": "validators_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.9450526, "relation_name": "EVMOS.not_null_silver.validators_RATE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_RATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere RATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RATE", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT"], "alias": "validators_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5"}, "created_at": 1697554507.948051, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RATE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RATE", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_MAX_CHANGE_RATE.6156472781": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_CHANGE_RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_MAX_CHANGE_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_MAX_CHANGE_RATE.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_MAX_CHANGE_RATE.6156472781", "fqn": ["evmos_models", "silver", "not_null_silver__validators_MAX_CHANGE_RATE"], "alias": "validators_MAX_CHANGE_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.9561272, "relation_name": "EVMOS.not_null_silver.validators_MAX_CHANGE_RATE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_MAX_CHANGE_RATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere MAX_CHANGE_RATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_CHANGE_RATE", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MAX_CHANGE_RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT"], "alias": "validators_MAX_CHANGE_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e"}, "created_at": 1697554507.9592273, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_MAX_CHANGE_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_CHANGE_RATE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_CHANGE_RATE", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_MAX_RATE.24b5d3c90d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_MAX_RATE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_MAX_RATE.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_MAX_RATE.24b5d3c90d", "fqn": ["evmos_models", "silver", "not_null_silver__validators_MAX_RATE"], "alias": "validators_MAX_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.9672909, "relation_name": "EVMOS.not_null_silver.validators_MAX_RATE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_MAX_RATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere MAX_RATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_RATE", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MAX_RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT"], "alias": "validators_MAX_RATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5"}, "created_at": 1697554507.9701455, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_MAX_RATE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_RATE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_RATE", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_SELF_DELEGATION", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_MIN_SELF_DELEGATION", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_MIN_SELF_DELEGATION.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9", "fqn": ["evmos_models", "silver", "not_null_silver__validators_MIN_SELF_DELEGATION"], "alias": "validators_MIN_SELF_DELEGATION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.978872, "relation_name": "EVMOS.not_null_silver.validators_MIN_SELF_DELEGATION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_MIN_SELF_DELEGATION.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere MIN_SELF_DELEGATION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_SELF_DELEGATION", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MIN_SELF_DELEGATION", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT"], "alias": "validators_MIN_SELF_DELEGATION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28"}, "created_at": 1697554507.9817927, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_MIN_SELF_DELEGATION", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MIN_SELF_DELEGATION'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_SELF_DELEGATION", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_RANK.2e8e4ef4a4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RANK", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_RANK", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_RANK.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_RANK.2e8e4ef4a4", "fqn": ["evmos_models", "silver", "not_null_silver__validators_RANK"], "alias": "validators_RANK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554507.9891598, "relation_name": "EVMOS.not_null_silver.validators_RANK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_RANK.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere RANK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RANK", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RANK", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT"], "alias": "validators_RANK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa"}, "created_at": 1697554507.992667, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_RANK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RANK'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RANK", "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__validators_RAW_METADATA.fb6370f348": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RAW_METADATA", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__validators_RAW_METADATA", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__validators_RAW_METADATA.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.not_null_silver__validators_RAW_METADATA.fb6370f348", "fqn": ["evmos_models", "silver", "not_null_silver__validators_RAW_METADATA"], "alias": "validators_RAW_METADATA", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.0007339, "relation_name": "EVMOS.not_null_silver.validators_RAW_METADATA", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/not_null_silver__validators_RAW_METADATA.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.validators\nwhere RAW_METADATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RAW_METADATA", "file_key_name": "models.silver__validators"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__validators_ADDRESS__CREATOR__BLOCKCHAIN.818d7392ef": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "CREATOR", "BLOCKCHAIN"], "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__validators_ADDRESS__CREATOR__BLOCKCHAIN", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_f0fb3a2042929dbe7f53812ccff9f0e7.sql", "original_file_path": "models/silver/silver__validators.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__validators_ADDRESS__CREATOR__BLOCKCHAIN.818d7392ef", "fqn": ["evmos_models", "silver", "dbt_utils_unique_combination_of_columns_silver__validators_ADDRESS__CREATOR__BLOCKCHAIN"], "alias": "validators_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f0fb3a2042929dbe7f53812ccff9f0e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f0fb3a2042929dbe7f53812ccff9f0e7"}, "created_at": 1697554508.0039604, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver.validators_ADDRESS", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f0fb3a2042929dbe7f53812ccff9f0e7\") }}", "language": "sql", "refs": [["silver__validators"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__validators"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__validators.yml/dbt_utils_unique_combination_o_f0fb3a2042929dbe7f53812ccff9f0e7.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, CREATOR, BLOCKCHAIN\n    from EVMOS.silver.validators\n    group by ADDRESS, CREATOR, BLOCKCHAIN\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__validators"}, "test.evmos_models.not_null_silver__blockchain_CHAIN_ID.c381503839": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blockchain_CHAIN_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blockchain_CHAIN_ID.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.not_null_silver__blockchain_CHAIN_ID.c381503839", "fqn": ["evmos_models", "silver", "not_null_silver__blockchain_CHAIN_ID"], "alias": "blockchain_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.016615, "relation_name": "EVMOS.not_null_silver.blockchain_CHAIN_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/not_null_silver__blockchain_CHAIN_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blockchain\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CHAIN_ID", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_CHAIN_ID__STRING__VARCHAR.fd3829b376": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_CHAIN_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_459a18e8a4cef621681e4653497e5f95.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_CHAIN_ID__STRING__VARCHAR.fd3829b376", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_CHAIN_ID__STRING__VARCHAR"], "alias": "blockchain_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_459a18e8a4cef621681e4653497e5f95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_459a18e8a4cef621681e4653497e5f95"}, "created_at": 1697554508.0196502, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blockchain_CHAIN_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_459a18e8a4cef621681e4653497e5f95\") }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/dbt_expectations_expect_column_459a18e8a4cef621681e4653497e5f95.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID_OBJECT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NUM_TXS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CHAIN_ID", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.not_null_silver__blockchain_BLOCK_ID.5997704c2b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blockchain_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blockchain_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.not_null_silver__blockchain_BLOCK_ID.5997704c2b", "fqn": ["evmos_models", "silver", "not_null_silver__blockchain_BLOCK_ID"], "alias": "blockchain_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.027834, "relation_name": "EVMOS.not_null_silver.blockchain_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/not_null_silver__blockchain_BLOCK_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blockchain\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_ID__NUMBER__FLOAT.254cf4f40e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_ID__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d8e80b41a787e26f818d69c1c8163bef.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_ID__NUMBER__FLOAT.254cf4f40e", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_ID__NUMBER__FLOAT"], "alias": "blockchain_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8e80b41a787e26f818d69c1c8163bef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d8e80b41a787e26f818d69c1c8163bef"}, "created_at": 1697554508.0307553, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blockchain_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8e80b41a787e26f818d69c1c8163bef\") }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/dbt_expectations_expect_column_d8e80b41a787e26f818d69c1c8163bef.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID_OBJECT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NUM_TXS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.not_null_silver__blockchain_BLOCK_TIMESTAMP.936901e9b8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blockchain_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blockchain_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.not_null_silver__blockchain_BLOCK_TIMESTAMP.936901e9b8", "fqn": ["evmos_models", "silver", "not_null_silver__blockchain_BLOCK_TIMESTAMP"], "alias": "blockchain_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.038688, "relation_name": "EVMOS.not_null_silver.blockchain_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/not_null_silver__blockchain_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blockchain\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.9dc38be292": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_5ebe7049c9de2775d781efc87e985c78.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.9dc38be292", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blockchain_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5ebe7049c9de2775d781efc87e985c78", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5ebe7049c9de2775d781efc87e985c78"}, "created_at": 1697554508.042097, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blockchain_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5ebe7049c9de2775d781efc87e985c78\") }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/dbt_expectations_expect_column_5ebe7049c9de2775d781efc87e985c78.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID_OBJECT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NUM_TXS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.not_null_silver__blockchain_BLOCK_SIZE.9120ec052a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_SIZE", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blockchain_BLOCK_SIZE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blockchain_BLOCK_SIZE.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.not_null_silver__blockchain_BLOCK_SIZE.9120ec052a", "fqn": ["evmos_models", "silver", "not_null_silver__blockchain_BLOCK_SIZE"], "alias": "blockchain_BLOCK_SIZE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.04939, "relation_name": "EVMOS.not_null_silver.blockchain_BLOCK_SIZE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/not_null_silver__blockchain_BLOCK_SIZE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blockchain\nwhere BLOCK_SIZE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_SIZE", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_SIZE__NUMBER__FLOAT.36f07f3fba": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_SIZE", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_SIZE__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a1533d93edaa632787c79bd8c873d008.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_SIZE__NUMBER__FLOAT.36f07f3fba", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_SIZE__NUMBER__FLOAT"], "alias": "blockchain_BLOCK_SIZE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a1533d93edaa632787c79bd8c873d008", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a1533d93edaa632787c79bd8c873d008"}, "created_at": 1697554508.052767, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blockchain_BLOCK_SIZE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a1533d93edaa632787c79bd8c873d008\") }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/dbt_expectations_expect_column_a1533d93edaa632787c79bd8c873d008.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID_OBJECT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NUM_TXS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_SIZE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_SIZE", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.not_null_silver__blockchain_BLOCK_HEADER.0b30826529": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEADER", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blockchain_BLOCK_HEADER", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blockchain_BLOCK_HEADER.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.not_null_silver__blockchain_BLOCK_HEADER.0b30826529", "fqn": ["evmos_models", "silver", "not_null_silver__blockchain_BLOCK_HEADER"], "alias": "blockchain_BLOCK_HEADER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.0614884, "relation_name": "EVMOS.not_null_silver.blockchain_BLOCK_HEADER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/not_null_silver__blockchain_BLOCK_HEADER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blockchain\nwhere BLOCK_HEADER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_HEADER", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.not_null_silver__blockchain_BLOCK_ID_OBJECT.dbc8f0771a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID_OBJECT", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blockchain_BLOCK_ID_OBJECT", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blockchain_BLOCK_ID_OBJECT.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.not_null_silver__blockchain_BLOCK_ID_OBJECT.dbc8f0771a", "fqn": ["evmos_models", "silver", "not_null_silver__blockchain_BLOCK_ID_OBJECT"], "alias": "blockchain_BLOCK_ID_OBJECT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.0648932, "relation_name": "EVMOS.not_null_silver.blockchain_BLOCK_ID_OBJECT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/not_null_silver__blockchain_BLOCK_ID_OBJECT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blockchain\nwhere BLOCK_ID_OBJECT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID_OBJECT", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.not_null_silver__blockchain_NUM_TXS.4e5926d643": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUM_TXS", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blockchain_NUM_TXS", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blockchain_NUM_TXS.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.not_null_silver__blockchain_NUM_TXS.4e5926d643", "fqn": ["evmos_models", "silver", "not_null_silver__blockchain_NUM_TXS"], "alias": "blockchain_NUM_TXS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.0682435, "relation_name": "EVMOS.not_null_silver.blockchain_NUM_TXS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/not_null_silver__blockchain_NUM_TXS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blockchain\nwhere NUM_TXS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "NUM_TXS", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_NUM_TXS__NUMBER__FLOAT.258ab6cc34": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "NUM_TXS", "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_NUM_TXS__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d0a8f144d3faee738ca300447d1a9535.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_NUM_TXS__NUMBER__FLOAT.258ab6cc34", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_NUM_TXS__NUMBER__FLOAT"], "alias": "blockchain_NUM_TXS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d0a8f144d3faee738ca300447d1a9535", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d0a8f144d3faee738ca300447d1a9535"}, "created_at": 1697554508.0721412, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blockchain_NUM_TXS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d0a8f144d3faee738ca300447d1a9535\") }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/dbt_expectations_expect_column_d0a8f144d3faee738ca300447d1a9535.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID_OBJECT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NUM_TXS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NUM_TXS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "NUM_TXS", "file_key_name": "models.silver__blockchain"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blockchain_BLOCK_ID.70f4075332": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID"], "model": "{{ get_where_subquery(ref('silver__blockchain')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__blockchain_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_1f7f12b70f4182e210b61036a66db383.sql", "original_file_path": "models/silver/silver__blockchain.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blockchain_BLOCK_ID.70f4075332", "fqn": ["evmos_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blockchain_BLOCK_ID"], "alias": "blockchain_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1f7f12b70f4182e210b61036a66db383", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_1f7f12b70f4182e210b61036a66db383"}, "created_at": 1697554508.079718, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver.blockchain_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1f7f12b70f4182e210b61036a66db383\") }}", "language": "sql", "refs": [["silver__blockchain"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blockchain"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blockchain.yml/dbt_utils_unique_combination_o_1f7f12b70f4182e210b61036a66db383.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID\n    from EVMOS.silver.blockchain\n    group by BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__blockchain"}, "test.evmos_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blocks_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "fqn": ["evmos_models", "silver", "not_null_silver__blocks_BLOCK_ID"], "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.0935733, "relation_name": "EVMOS.not_null_silver.blocks_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT"], "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e"}, "created_at": 1697554508.097357, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.evmos_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "fqn": ["evmos_models", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.1049025, "relation_name": "EVMOS.not_null_silver.blocks_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1"], "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692"}, "created_at": 1697554508.1081703, "relation_name": "EVMOS.dbt_expectations_expect_row_values_to_have_recent_data_silver.blocks_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as timestamp_ntz)) as max_timestamp\n    from\n        EVMOS.silver.blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as timestamp_ntz) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp_ntz))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as timestamp_ntz)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27"}, "created_at": 1697554508.120064, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.evmos_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blocks_CHAIN_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blocks_CHAIN_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.not_null_silver__blocks_CHAIN_ID.a10569ee35", "fqn": ["evmos_models", "silver", "not_null_silver__blocks_CHAIN_ID"], "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.1266425, "relation_name": "EVMOS.not_null_silver.blocks_CHAIN_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/not_null_silver__blocks_CHAIN_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blocks\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR"], "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a"}, "created_at": 1697554508.1297417, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_CHAIN_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.evmos_models.not_null_silver__blocks_TX_COUNT.34525b51e6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blocks_TX_COUNT", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "fqn": ["evmos_models", "silver", "not_null_silver__blocks_TX_COUNT"], "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.1375132, "relation_name": "EVMOS.not_null_silver.blocks_TX_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/not_null_silver__blocks_TX_COUNT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT"], "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7"}, "created_at": 1697554508.140412, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_TX_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_COUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.evmos_models.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blocks_PROPOSER_ADDRESS", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blocks_PROPOSER_ADDRESS.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74", "fqn": ["evmos_models", "silver", "not_null_silver__blocks_PROPOSER_ADDRESS"], "alias": "blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.147746, "relation_name": "EVMOS.not_null_silver.blocks_PROPOSER_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/not_null_silver__blocks_PROPOSER_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blocks\nwhere PROPOSER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR"], "alias": "blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a"}, "created_at": 1697554508.1511168, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_PROPOSER_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSER_ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.silver__blocks"}, "test.evmos_models.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blocks_VALIDATOR_HASH", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blocks_VALIDATOR_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877", "fqn": ["evmos_models", "silver", "not_null_silver__blocks_VALIDATOR_HASH"], "alias": "blocks_VALIDATOR_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.1584978, "relation_name": "EVMOS.not_null_silver.blocks_VALIDATOR_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/not_null_silver__blocks_VALIDATOR_HASH.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blocks\nwhere VALIDATOR_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "VALIDATOR_HASH", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_HASH__STRING__VARCHAR.985e07aa79": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "VALIDATOR_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_HASH__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_2519c7234a219fa759de7f5c33112c3e.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_HASH__STRING__VARCHAR.985e07aa79", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_HASH__STRING__VARCHAR"], "alias": "blocks_VALIDATOR_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2519c7234a219fa759de7f5c33112c3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2519c7234a219fa759de7f5c33112c3e"}, "created_at": 1697554508.1613162, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_VALIDATOR_HASH", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2519c7234a219fa759de7f5c33112c3e\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2519c7234a219fa759de7f5c33112c3e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATOR_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "VALIDATOR_HASH", "file_key_name": "models.silver__blocks"}, "test.evmos_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__blocks__INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "fqn": ["evmos_models", "silver", "not_null_silver__blocks__INSERTED_TIMESTAMP"], "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.1690404, "relation_name": "EVMOS.not_null_silver.blocks", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.blocks\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169"}, "created_at": 1697554508.1718733, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blocks_CHAIN_ID__BLOCK_ID.00ab619aa5": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CHAIN_ID", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_CHAIN_ID__BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_8be7506fb9e9f74eeb469851646f973a.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blocks_CHAIN_ID__BLOCK_ID.00ab619aa5", "fqn": ["evmos_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_CHAIN_ID__BLOCK_ID"], "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8be7506fb9e9f74eeb469851646f973a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_8be7506fb9e9f74eeb469851646f973a"}, "created_at": 1697554508.1789815, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver.blocks_CHAIN_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8be7506fb9e9f74eeb469851646f973a\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/dbt_utils_unique_combination_o_8be7506fb9e9f74eeb469851646f973a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CHAIN_ID, BLOCK_ID\n    from EVMOS.silver.blocks\n    group by CHAIN_ID, BLOCK_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__blocks"}, "test.evmos_models.sequence_gaps_silver__blocks_BLOCK_ID.0254cbc422": {"test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "sequence_gaps_silver", "name": "sequence_gaps_silver__blocks_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "sequence_gaps_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "unique_id": "test.evmos_models.sequence_gaps_silver__blocks_BLOCK_ID.0254cbc422", "fqn": ["evmos_models", "silver", "sequence_gaps_silver__blocks_BLOCK_ID"], "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <= CURRENT_DATE - 1", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= CURRENT_DATE - 1"}, "created_at": 1697554508.1869326, "relation_name": "EVMOS.sequence_gaps_silver.blocks_BLOCK_ID", "raw_code": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= CURRENT_DATE - 1\") }}", "language": "sql", "refs": [["silver__blocks"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.evmos_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__blocks"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__blocks.yml/sequence_gaps_silver__blocks_BLOCK_ID.sql", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT\n        \n        BLOCK_ID,\n        LAG(\n            BLOCK_ID,\n            1\n        ) over (\n            \n            ORDER BY\n                BLOCK_ID ASC\n        ) AS prev_BLOCK_ID\n    FROM\n        (select * from EVMOS.silver.blocks where BLOCK_TIMESTAMP <= CURRENT_DATE - 1) dbt_subquery\n)\nSELECT\n    \n    prev_BLOCK_ID,\n    BLOCK_ID,\n    BLOCK_ID - prev_BLOCK_ID\n    - 1 AS gap\nFROM\n    source\nWHERE\n    BLOCK_ID - prev_BLOCK_ID <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__blocks"}, "test.evmos_models.not_null_silver__msgs_BLOCK_ID.1de1a37994": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msgs_BLOCK_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msgs_BLOCK_ID.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.not_null_silver__msgs_BLOCK_ID.1de1a37994", "fqn": ["evmos_models", "silver", "not_null_silver__msgs_BLOCK_ID"], "alias": "msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.2035313, "relation_name": "EVMOS.not_null_silver.msgs_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/not_null_silver__msgs_BLOCK_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msgs\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT"], "alias": "msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678"}, "created_at": 1697554508.2063625, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_ID", "file_key_name": "models.silver__msgs"}, "test.evmos_models.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msgs_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msgs_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79", "fqn": ["evmos_models", "silver", "not_null_silver__msgs_BLOCK_TIMESTAMP"], "alias": "msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.2139657, "relation_name": "EVMOS.not_null_silver.msgs_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/not_null_silver__msgs_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msgs\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1"], "alias": "msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8"}, "created_at": 1697554508.2168038, "relation_name": "EVMOS.dbt_expectations_expect_row_values_to_have_recent_data_silver.msgs_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8.sql", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as timestamp_ntz)) as max_timestamp\n    from\n        EVMOS.silver.msgs\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as timestamp_ntz) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp_ntz))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as timestamp_ntz)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0"}, "created_at": 1697554508.2277272, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msgs"}, "test.evmos_models.not_null_silver__msgs_TX_ID.59a107fa1e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msgs_TX_ID", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msgs_TX_ID.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.not_null_silver__msgs_TX_ID.59a107fa1e", "fqn": ["evmos_models", "silver", "not_null_silver__msgs_TX_ID"], "alias": "msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.2347248, "relation_name": "EVMOS.not_null_silver.msgs_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/not_null_silver__msgs_TX_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msgs\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__STRING__VARCHAR.007224ef8b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_8f7996fc1cc711e758259f737abefcc8.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__STRING__VARCHAR.007224ef8b", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__STRING__VARCHAR"], "alias": "msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8f7996fc1cc711e758259f737abefcc8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8f7996fc1cc711e758259f737abefcc8"}, "created_at": 1697554508.237565, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8f7996fc1cc711e758259f737abefcc8\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_column_8f7996fc1cc711e758259f737abefcc8.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_ID", "file_key_name": "models.silver__msgs"}, "test.evmos_models.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msgs_TX_SUCCEEDED", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msgs_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2", "fqn": ["evmos_models", "silver", "not_null_silver__msgs_TX_SUCCEEDED"], "alias": "msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.245364, "relation_name": "EVMOS.not_null_silver.msgs_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/not_null_silver__msgs_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msgs\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN"], "alias": "msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed"}, "created_at": 1697554508.2482076, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__NUMBER__FLOAT.c2035fb2bc": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_b2f293f0275837aca01df4e92584b123.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__NUMBER__FLOAT.c2035fb2bc", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__NUMBER__FLOAT"], "alias": "msgs_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b2f293f0275837aca01df4e92584b123", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b2f293f0275837aca01df4e92584b123"}, "created_at": 1697554508.2548125, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG_GROUP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b2f293f0275837aca01df4e92584b123\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_column_b2f293f0275837aca01df4e92584b123.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_GROUP'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_GROUP", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_SUB_GROUP__NUMBER__FLOAT.1036402d60": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MSG_SUB_GROUP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_SUB_GROUP__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_1edca6305d00494db412f28c898f1ab1.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_SUB_GROUP__NUMBER__FLOAT.1036402d60", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_SUB_GROUP__NUMBER__FLOAT"], "alias": "msgs_MSG_SUB_GROUP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1edca6305d00494db412f28c898f1ab1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1edca6305d00494db412f28c898f1ab1"}, "created_at": 1697554508.2630227, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG_SUB_GROUP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1edca6305d00494db412f28c898f1ab1\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_column_1edca6305d00494db412f28c898f1ab1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_SUB_GROUP'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_SUB_GROUP", "file_key_name": "models.silver__msgs"}, "test.evmos_models.not_null_silver__msgs_MSG_INDEX.227765e0bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msgs_MSG_INDEX", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msgs_MSG_INDEX.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.not_null_silver__msgs_MSG_INDEX.227765e0bf", "fqn": ["evmos_models", "silver", "not_null_silver__msgs_MSG_INDEX"], "alias": "msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.2699664, "relation_name": "EVMOS.not_null_silver.msgs_MSG_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/not_null_silver__msgs_MSG_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msgs\nwhere MSG_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_INDEX", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_49b195a36b135b701165de9077016793.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT"], "alias": "msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_49b195a36b135b701165de9077016793", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_49b195a36b135b701165de9077016793"}, "created_at": 1697554508.2732084, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_49b195a36b135b701165de9077016793\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_column_49b195a36b135b701165de9077016793.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_INDEX", "file_key_name": "models.silver__msgs"}, "test.evmos_models.not_null_silver__msgs_MSG_TYPE.312b195565": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver", "name": "not_null_silver__msgs_MSG_TYPE", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver__msgs_MSG_TYPE.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.not_null_silver__msgs_MSG_TYPE.312b195565", "fqn": ["evmos_models", "silver", "not_null_silver__msgs_MSG_TYPE"], "alias": "msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.2805014, "relation_name": "EVMOS.not_null_silver.msgs_MSG_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/not_null_silver__msgs_MSG_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver.msgs\nwhere MSG_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_TYPE", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__STRING__VARCHAR.ca4da74e2a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__STRING__VARCHAR", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_f8c184b9779221d5209777f8eafddbcd.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__STRING__VARCHAR.ca4da74e2a", "fqn": ["evmos_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__STRING__VARCHAR"], "alias": "msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f8c184b9779221d5209777f8eafddbcd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f8c184b9779221d5209777f8eafddbcd"}, "created_at": 1697554508.2839537, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f8c184b9779221d5209777f8eafddbcd\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_expectations_expect_column_f8c184b9779221d5209777f8eafddbcd.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_LTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MSG_TYPE", "file_key_name": "models.silver__msgs"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msgs_TX_ID__MSG_INDEX.73756b76d1": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MSG_INDEX"], "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__msgs_TX_ID__MSG_INDEX", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_a7cdb7dcd0b082f1ed47a30638b3d35e.sql", "original_file_path": "models/silver/silver__msgs.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msgs_TX_ID__MSG_INDEX.73756b76d1", "fqn": ["evmos_models", "silver", "dbt_utils_unique_combination_of_columns_silver__msgs_TX_ID__MSG_INDEX"], "alias": "msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a7cdb7dcd0b082f1ed47a30638b3d35e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_a7cdb7dcd0b082f1ed47a30638b3d35e"}, "created_at": 1697554508.2913861, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver.msgs_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a7cdb7dcd0b082f1ed47a30638b3d35e\") }}", "language": "sql", "refs": [["silver__msgs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver__msgs"]}, "compiled_path": "target/compiled/evmos_models/models/silver/silver__msgs.yml/dbt_utils_unique_combination_o_a7cdb7dcd0b082f1ed47a30638b3d35e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MSG_INDEX\n    from EVMOS.silver.msgs\n    group by TX_ID, MSG_INDEX\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver__msgs"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_MIN_BLOCK", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__blocks_completeness_MIN_BLOCK.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_MIN_BLOCK"], "alias": "blocks_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.3047097, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_MIN_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__blocks_completeness_MIN_BLOCK.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere MIN_BLOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER"], "alias": "blocks_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8"}, "created_at": 1697554508.3083367, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_MIN_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MIN_BLOCK'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_MAX_BLOCK", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__blocks_completeness_MAX_BLOCK.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_MAX_BLOCK"], "alias": "blocks_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1697554508.315699, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_MAX_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__blocks_completeness_MAX_BLOCK.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere MAX_BLOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER"], "alias": "blocks_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5"}, "created_at": 1697554508.3186545, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_MAX_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_BLOCK'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__d5783dd05cb245139a83139f64b4471f.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP"], "alias": "blocks_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__d5783dd05cb245139a83139f64b4471f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__d5783dd05cb245139a83139f64b4471f"}, "created_at": 1697554508.325942, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__d5783dd05cb245139a83139f64b4471f\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__d5783dd05cb245139a83139f64b4471f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere MIN_BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b"}, "created_at": 1697554508.3288105, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MIN_BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__330010c3e984d97050486179f4215d63.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP"], "alias": "blocks_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__330010c3e984d97050486179f4215d63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__330010c3e984d97050486179f4215d63"}, "created_at": 1697554508.3358538, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__330010c3e984d97050486179f4215d63\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__330010c3e984d97050486179f4215d63.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere MAX_BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__3.2f4ade795a": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 3, "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__3", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_row_va_952e22a9df91eb2db0b8ee144b5a097d.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__3.2f4ade795a", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__3"], "alias": "blocks_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_952e22a9df91eb2db0b8ee144b5a097d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_952e22a9df91eb2db0b8ee144b5a097d"}, "created_at": 1697554508.3396964, "relation_name": "EVMOS.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability.blocks_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_952e22a9df91eb2db0b8ee144b5a097d\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_row_va_952e22a9df91eb2db0b8ee144b5a097d.sql", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(MAX_BLOCK_TIMESTAMP as timestamp_ntz)) as max_timestamp\n    from\n        EVMOS.silver_observability.blocks_completeness\n    where\n        -- to exclude erroneous future dates\n        cast(MAX_BLOCK_TIMESTAMP as timestamp_ntz) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp_ntz))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -3,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as timestamp_ntz)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8"}, "created_at": 1697554508.3513184, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_BLOCKS_TESTED", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_BLOCKS_TESTED"], "alias": "blocks_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125"}, "created_at": 1697554508.3589327, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_BLOCKS_TESTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere BLOCKS_TESTED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER"], "alias": "blocks_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381"}, "created_at": 1697554508.3623407, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_BLOCKS_TESTED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKS_TESTED'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT"], "alias": "blocks_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501"}, "created_at": 1697554508.3698473, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere BLOCKS_IMPACTED_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER"], "alias": "blocks_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9"}, "created_at": 1697554508.373055, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKS_IMPACTED_COUNT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY"], "alias": "blocks_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85"}, "created_at": 1697554508.3796937, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere BLOCKS_IMPACTED_ARRAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY"], "alias": "blocks_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659"}, "created_at": 1697554508.3828838, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKS_IMPACTED_ARRAY'\n            and\n            relation_column_type not in ('ARRAY')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS"], "alias": "blocks_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3"}, "created_at": 1697554508.3905706, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere TEST_FAILURE_DETAILS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY"], "alias": "blocks_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9"}, "created_at": 1697554508.3938951, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TEST_FAILURE_DETAILS'\n            and\n            relation_column_type not in ('ARRAY')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP"], "alias": "blocks_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea"}, "created_at": 1697554508.4016786, "relation_name": "EVMOS.not_null_silver_observability.blocks_completeness_TEST_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.blocks_completeness\nwhere TEST_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d"}, "created_at": 1697554508.4050078, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TEST_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TEST_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver_observability", "name": "dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134.sql", "original_file_path": "models/silver/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284", "fqn": ["evmos_models", "silver", "_observability", "dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP"], "alias": "blocks_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134"}, "created_at": 1697554508.4114203, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver_observability.blocks_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134\") }}", "language": "sql", "refs": [["silver_observability__blocks_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__blocks_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__blocks_completeness.yml/dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TEST_TIMESTAMP\n    from EVMOS.silver_observability.blocks_completeness\n    group by TEST_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver_observability__blocks_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_MIN_BLOCK", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_MIN_BLOCK"], "alias": "transactions_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b"}, "created_at": 1697554508.4265437, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_MIN_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere MIN_BLOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER"], "alias": "transactions_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2"}, "created_at": 1697554508.4294796, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_MIN_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MIN_BLOCK'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_MAX_BLOCK", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_MAX_BLOCK"], "alias": "transactions_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013"}, "created_at": 1697554508.4369159, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_MAX_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere MAX_BLOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER"], "alias": "transactions_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7"}, "created_at": 1697554508.4399483, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_MAX_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_BLOCK'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP"], "alias": "transactions_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d"}, "created_at": 1697554508.447007, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere MIN_BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transactions_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e"}, "created_at": 1697554508.4506345, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MIN_BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP"], "alias": "transactions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f"}, "created_at": 1697554508.4578214, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere MAX_BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__3.9eb4f223a6": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 3, "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__3", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_row_va_a47c4fcf48305b8ead1452cb843e94c9.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__3.9eb4f223a6", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__3"], "alias": "transactions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a47c4fcf48305b8ead1452cb843e94c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_a47c4fcf48305b8ead1452cb843e94c9"}, "created_at": 1697554508.4606998, "relation_name": "EVMOS.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability.transactions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a47c4fcf48305b8ead1452cb843e94c9\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_row_va_a47c4fcf48305b8ead1452cb843e94c9.sql", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(MAX_BLOCK_TIMESTAMP as timestamp_ntz)) as max_timestamp\n    from\n        EVMOS.silver_observability.transactions_completeness\n    where\n        -- to exclude erroneous future dates\n        cast(MAX_BLOCK_TIMESTAMP as timestamp_ntz) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp_ntz))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -3,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as timestamp_ntz)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transactions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d"}, "created_at": 1697554508.4721637, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_BLOCKS_TESTED", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_BLOCKS_TESTED"], "alias": "transactions_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e"}, "created_at": 1697554508.4797084, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_BLOCKS_TESTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere BLOCKS_TESTED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER"], "alias": "transactions_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f"}, "created_at": 1697554508.4830647, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_BLOCKS_TESTED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKS_TESTED'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__1d08a6ef35119526932d590d6ba20417.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT"], "alias": "transactions_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__1d08a6ef35119526932d590d6ba20417", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__1d08a6ef35119526932d590d6ba20417"}, "created_at": 1697554508.4907966, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__1d08a6ef35119526932d590d6ba20417\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__1d08a6ef35119526932d590d6ba20417.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere BLOCKS_IMPACTED_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER"], "alias": "transactions_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17"}, "created_at": 1697554508.4939988, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKS_IMPACTED_COUNT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY"], "alias": "transactions_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da"}, "created_at": 1697554508.5011117, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere BLOCKS_IMPACTED_ARRAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY"], "alias": "transactions_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c"}, "created_at": 1697554508.504157, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKS_IMPACTED_ARRAY'\n            and\n            relation_column_type not in ('ARRAY')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTIONS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__353a62dc527ea800ce8f462683cedf23.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT"], "alias": "transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__353a62dc527ea800ce8f462683cedf23", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__353a62dc527ea800ce8f462683cedf23"}, "created_at": 1697554508.5114906, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__353a62dc527ea800ce8f462683cedf23\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__353a62dc527ea800ce8f462683cedf23.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere TRANSACTIONS_IMPACTED_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TRANSACTIONS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "TRANSACTIONS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER"], "alias": "transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5"}, "created_at": 1697554508.5154977, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRANSACTIONS_IMPACTED_COUNT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TRANSACTIONS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY"], "alias": "transactions_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf"}, "created_at": 1697554508.5220768, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TEST_FAILURE_DETAILS'\n            and\n            relation_column_type not in ('ARRAY')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}, "database": "EVMOS", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c", "fqn": ["evmos_models", "silver", "_observability", "not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP"], "alias": "transactions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a"}, "created_at": 1697554508.5294185, "relation_name": "EVMOS.not_null_silver_observability.transactions_completeness_TEST_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom EVMOS.silver_observability.transactions_completeness\nwhere TEST_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}, "database": "EVMOS", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138", "fqn": ["evmos_models", "silver", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transactions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58"}, "created_at": 1697554508.5323722, "relation_name": "EVMOS.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TEST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_TESTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKS_IMPACTED_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSACTIONS_IMPACTED_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TEST_FAILURE_DETAILS' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TEST_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness"}, "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TEST_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_utils"}, "database": "EVMOS", "schema": "dbt_utils_unique_combination_of_columns_silver_observability", "name": "dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "evmos_models", "path": "dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d.sql", "original_file_path": "models/silver/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2", "fqn": ["evmos_models", "silver", "_observability", "dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP"], "alias": "transactions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d"}, "created_at": 1697554508.5398364, "relation_name": "EVMOS.dbt_utils_unique_combination_of_columns_silver_observability.transactions_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d\") }}", "language": "sql", "refs": [["silver_observability__transactions_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.evmos_models.silver_observability__transactions_completeness"]}, "compiled_path": "target/compiled/evmos_models/models/silver/_observability/silver_observability__transactions_completeness.yml/dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TEST_TIMESTAMP\n    from EVMOS.silver_observability.transactions_completeness\n    group by TEST_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.silver_observability__transactions_completeness"}}, "sources": {"source.evmos_models.crosschain.dim_date_hours": {"database": "crosschain", "schema": "core", "name": "dim_date_hours", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.crosschain.dim_date_hours", "fqn": ["evmos_models", "crosschain", "dim_date_hours"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_date_hours", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.dim_date_hours", "created_at": 1697554508.5467298}, "source.evmos_models.crosschain.dim_labels": {"database": "crosschain", "schema": "core", "name": "dim_labels", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.crosschain.dim_labels", "fqn": ["evmos_models", "crosschain", "dim_labels"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_labels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.dim_labels", "created_at": 1697554508.5471587}, "source.evmos_models.crosschain.dim_dates": {"database": "crosschain", "schema": "core", "name": "dim_dates", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.crosschain.dim_dates", "fqn": ["evmos_models", "crosschain", "dim_dates"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_dates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.dim_dates", "created_at": 1697554508.547468}, "source.evmos_models.crosschain_silver.number_sequence": {"database": "crosschain", "schema": "silver", "name": "number_sequence", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.crosschain_silver.number_sequence", "fqn": ["evmos_models", "crosschain_silver", "number_sequence"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "number_sequence", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.number_sequence", "created_at": 1697554508.5477233}, "source.evmos_models.bronze_streamline.eth_blocks": {"database": "streamline", "schema": "EVMOS", "name": "eth_blocks", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.bronze_streamline.eth_blocks", "fqn": ["evmos_models", "bronze_streamline", "eth_blocks"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "eth_blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.EVMOS.eth_blocks", "created_at": 1697554508.5479736}, "source.evmos_models.bronze_streamline.eth_transactions": {"database": "streamline", "schema": "EVMOS", "name": "eth_transactions", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.bronze_streamline.eth_transactions", "fqn": ["evmos_models", "bronze_streamline", "eth_transactions"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "eth_transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.EVMOS.eth_transactions", "created_at": 1697554508.5485086}, "source.evmos_models.bronze_streamline.tendermint_blocks": {"database": "streamline", "schema": "EVMOS", "name": "tendermint_blocks", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.bronze_streamline.tendermint_blocks", "fqn": ["evmos_models", "bronze_streamline", "tendermint_blocks"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "tendermint_blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.EVMOS.tendermint_blocks", "created_at": 1697554508.548806}, "source.evmos_models.bronze_streamline.tendermint_transactions": {"database": "streamline", "schema": "EVMOS", "name": "tendermint_transactions", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.bronze_streamline.tendermint_transactions", "fqn": ["evmos_models", "bronze_streamline", "tendermint_transactions"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "tendermint_transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.EVMOS.tendermint_transactions", "created_at": 1697554508.5490575}, "source.evmos_models.bronze_streamline.tendermint_validators": {"database": "streamline", "schema": "EVMOS", "name": "tendermint_validators", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.bronze_streamline.tendermint_validators", "fqn": ["evmos_models", "bronze_streamline", "tendermint_validators"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "tendermint_validators", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.EVMOS.tendermint_validators", "created_at": 1697554508.549307}, "source.evmos_models.bronze_streamline.address_labels": {"database": "streamline", "schema": "EVMOS", "name": "address_labels", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.bronze_streamline.address_labels", "fqn": ["evmos_models", "bronze_streamline", "address_labels"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "address_labels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.EVMOS.address_labels", "created_at": 1697554508.5495546}, "source.evmos_models.bronze.sample_blocks": {"database": "evmos", "schema": "bronze", "name": "sample_blocks", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.bronze.sample_blocks", "fqn": ["evmos_models", "bronze", "sample_blocks"], "source_name": "bronze", "source_description": "", "loader": "", "identifier": "sample_blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "evmos.bronze.sample_blocks", "created_at": 1697554508.5498428}, "source.evmos_models.bronze.sample_txs": {"database": "evmos", "schema": "bronze", "name": "sample_txs", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.bronze.sample_txs", "fqn": ["evmos_models", "bronze", "sample_txs"], "source_name": "bronze", "source_description": "", "loader": "", "identifier": "sample_txs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "evmos.bronze.sample_txs", "created_at": 1697554508.5501287}, "source.evmos_models.osmo.asset_metadata": {"database": "osmosis", "schema": "silver", "name": "asset_metadata", "resource_type": "source", "package_name": "evmos_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.evmos_models.osmo.asset_metadata", "fqn": ["evmos_models", "osmo", "asset_metadata"], "source_name": "osmo", "source_description": "", "loader": "", "identifier": "asset_metadata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "osmosis.silver.asset_metadata", "created_at": 1697554508.550432}}, "macros": {"macro.evmos_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.evmos_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7714322, "supported_languages": null}, "macro.evmos_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.evmos_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.772915, "supported_languages": null}, "macro.evmos_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.evmos_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7739394, "supported_languages": null}, "macro.evmos_models.generate_tmp_view_name": {"name": "generate_tmp_view_name", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.evmos_models.generate_tmp_view_name", "macro_sql": "{% macro generate_tmp_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] ~ '__dbt_tmp' | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7751777, "supported_languages": null}, "macro.evmos_models.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.evmos_models.create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {{ create_udtf_get_base_table(\n        schema = \"streamline\"\n    ) }}\n    {{ create_udf_get_chainhead() }}\n    {{ create_udf_json_rpc() }}\n    {{ create_udf_get_tendermint_transactions() }}\n    {{ create_udf_get_tendermint_validators() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.evmos_models.create_udtf_get_base_table", "macro.evmos_models.create_udf_get_chainhead", "macro.evmos_models.create_udf_json_rpc", "macro.evmos_models.create_udf_get_tendermint_transactions", "macro.evmos_models.create_udf_get_tendermint_validators"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7760942, "supported_languages": null}, "macro.evmos_models.if_data_call_function": {"name": "if_data_call_function", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.evmos_models.if_data_call_function", "macro_sql": "{% macro if_data_call_function(\n        func,\n        target\n    ) %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: Calling udf \" ~ func ~ \" on \" ~ target,\n                True\n            ) }}\n        {% endif %}\n    SELECT\n        {{ func }}\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ target }}\n            LIMIT\n                1\n        )\n    {% else %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: NOOP\",\n                False\n            ) }}\n        {% endif %}\n    SELECT\n        NULL\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7791233, "supported_languages": null}, "macro.evmos_models.if_data_call_wait": {"name": "if_data_call_wait", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.evmos_models.if_data_call_wait", "macro_sql": "{% macro if_data_call_wait() %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% set query %}\n    SELECT\n        1\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ model.schema ~ \".\" ~ model.alias }}\n            LIMIT\n                1\n        ) {% endset %}\n        {% if execute %}\n            {% set results = run_query(\n                query\n            ) %}\n            {% if results %}\n                {{ log(\n                    \"Waiting...\",\n                    info = True\n                ) }}\n\n                {% set wait_query %}\n            SELECT\n                system$wait(\n                    {{ var(\n                        \"WAIT\",\n                        600\n                    ) }}\n                ) {% endset %}\n                {% do run_query(wait_query) %}\n            {% else %}\n            SELECT\n                NULL;\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7809215, "supported_languages": null}, "macro.evmos_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.evmos_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n{% set clone_query %}\ncall evmos._internal.create_prod_clone('evmos', 'evmos_dev', 'internal_dev');\n{% endset %}\n\n{% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7814684, "supported_languages": null}, "macro.evmos_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.evmos_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'EVMOS' %}\n        CREATE SCHEMA IF NOT EXISTS _internal;\n        {{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.evmos_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7820687, "supported_languages": null}, "macro.evmos_models.tx_gaps": {"name": "tx_gaps", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "unique_id": "macro.evmos_models.tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_id,\n            tx_count\n        FROM\n            {{ ref('silver__blocks') }}\n    ),\n    model_name AS (\n        SELECT\n            block_id,\n            COUNT(\n                DISTINCT tx_id\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_id\n    )\nSELECT\n    block_base.block_id,\n    tx_count,\n    model_name.block_id,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_id = model_name.block_id\nWHERE\n    tx_count <> model_tx_count\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7827914, "supported_languages": null}, "macro.evmos_models.test_compare_model_subset": {"name": "test_compare_model_subset", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tests/compare_model_subset.sql", "original_file_path": "macros/tests/compare_model_subset.sql", "unique_id": "macro.evmos_models.test_compare_model_subset", "macro_sql": "{% test compare_model_subset(model, compare_model, compare_columns, model_condition) %}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n    select {{compare_cols_csv}} from {{ model }}\n    {{ model_condition }}\n),\nb as (\n    select {{compare_cols_csv}} from {{ compare_model }}\n),\na_minus_b as (\n    select * from a\n    except\n    select * from b\n),\nb_minus_a as (\n    select * from b\n    except\n    select * from a\n),\nunioned as (\n    select 'in_actual_not_in_expected' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'in_expected_not_in_actual' as which_diff, b_minus_a.* from b_minus_a\n)\nselect * from unioned\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.783926, "supported_languages": null}, "macro.evmos_models.test_sequence_gaps": {"name": "test_sequence_gaps", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "unique_id": "macro.evmos_models.test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.7863812, "supported_languages": null}, "macro.evmos_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.evmos_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.evmos_models.create_tag_if_missing", "macro.evmos_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.807806, "supported_languages": null}, "macro.evmos_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.evmos_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8091211, "supported_languages": null}, "macro.evmos_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.evmos_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.811777, "supported_languages": null}, "macro.evmos_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.evmos_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8145647, "supported_languages": null}, "macro.evmos_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.evmos_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8158882, "supported_languages": null}, "macro.evmos_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.evmos_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8170338, "supported_languages": null}, "macro.evmos_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.evmos_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value(\n        'BLOCKCHAIN_NAME',\n        'EVMOS'\n    ) }}\n      {{ set_database_tag_value(\n        'BLOCKCHAIN_TYPE',\n        'IBC'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.evmos_models.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8176432, "supported_languages": null}, "macro.evmos_models.create_udf_get_chainhead": {"name": "create_udf_get_chainhead", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "unique_id": "macro.evmos_models.create_udf_get_chainhead", "macro_sql": "{% macro create_udf_get_chainhead() %}\n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.udf_get_chainhead() returns variant api_integration = aws_evmos_api AS {% if target.name == \"prod\" %}\n        'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/get_chainhead'\n    {% else %}\n        'https://55h4rahr50.execute-api.us-east-1.amazonaws.com/dev/get_chainhead'\n    {%- endif %};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.818936, "supported_languages": null}, "macro.evmos_models.create_udf_json_rpc": {"name": "create_udf_json_rpc", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "unique_id": "macro.evmos_models.create_udf_json_rpc", "macro_sql": "{% macro create_udf_json_rpc() %}\n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.udf_json_rpc(\n        json OBJECT\n    ) returns ARRAY api_integration = aws_evmos_api AS {% if target.name == \"prod\" %}\n        'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/bulk_get_json_rpc'\n    {% else %}\n        'https://55h4rahr50.execute-api.us-east-1.amazonaws.com/dev/bulk_get_json_rpc'\n    {%- endif %};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8194194, "supported_languages": null}, "macro.evmos_models.create_udf_get_tendermint_transactions": {"name": "create_udf_get_tendermint_transactions", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "unique_id": "macro.evmos_models.create_udf_get_tendermint_transactions", "macro_sql": "{% macro create_udf_get_tendermint_transactions() %}\n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.bulk_get_tendermint_transactions(\n        json OBJECT\n    ) returns ARRAY api_integration = aws_evmos_api AS {% if target.name == \"prod\" %}\n        'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/bulk_get_tendermint_transactions'\n    {% else %}\n        'https://55h4rahr50.execute-api.us-east-1.amazonaws.com/dev/bulk_get_tendermint_transactions'\n    {%- endif %};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.819904, "supported_languages": null}, "macro.evmos_models.create_udf_get_tendermint_validators": {"name": "create_udf_get_tendermint_validators", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "unique_id": "macro.evmos_models.create_udf_get_tendermint_validators", "macro_sql": "{% macro create_udf_get_tendermint_validators() %}\n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.bulk_get_tendermint_validators(\n        json OBJECT\n    ) returns ARRAY api_integration = aws_evmos_api AS {% if target.name == \"prod\" %}\n        'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/bulk_get_tendermint_validators'\n    {% else %}\n        'https://55h4rahr50.execute-api.us-east-1.amazonaws.com/dev/bulk_get_tendermint_validators'\n    {%- endif %};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8204648, "supported_languages": null}, "macro.evmos_models.decode_logs_history": {"name": "decode_logs_history", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.evmos_models.decode_logs_history", "macro_sql": "{% macro decode_logs_history(\n        start,\n        stop\n    ) %}\n    WITH look_back AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"_max_block_by_date\") }}\n            qualify ROW_NUMBER() over (\n                ORDER BY\n                    block_number DESC\n            ) = 1\n    )\nSELECT\n    l.block_number,\n    l._log_id,\n    abi.data AS abi,\n    l.data\nFROM\n    {{ ref(\"streamline__decode_logs\") }}\n    l\n    INNER JOIN {{ ref(\"silver__abis\") }}\n    abi\n    ON l.abi_address = abi.contract_address\nWHERE\n    (\n        l.block_number BETWEEN {{ start }}\n        AND {{ stop }}\n    )\n    AND l.block_number <= (\n        SELECT\n            block_number\n        FROM\n            look_back\n    )\n    AND _log_id NOT IN (\n        SELECT\n            _log_id\n        FROM\n            {{ ref(\"streamline__complete_decode_logs\") }}\n        WHERE\n            (\n                block_number BETWEEN {{ start }}\n                AND {{ stop }}\n            )\n            AND block_number <= (\n                SELECT\n                    block_number\n                FROM\n                    look_back\n            )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8265545, "supported_languages": null}, "macro.evmos_models.streamline_external_table_query": {"name": "streamline_external_table_query", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.evmos_models.streamline_external_table_query", "macro_sql": "{% macro streamline_external_table_query(\n        model,\n        partition_function,\n        partition_name,\n        unique_key\n    ) %}\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS {{ partition_name }}\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -7, CURRENT_TIMESTAMP()),\n                    table_name => '{{ source( \"bronze_streamline\", model) }}')\n                ) A\n            )\n        SELECT\n            {{ unique_key }},\n            DATA,\n            _inserted_timestamp,\n            MD5(\n                CAST(\n                    COALESCE(CAST({{ unique_key }} AS text), '' :: STRING) AS text\n                )\n            ) AS id,\n            s.{{ partition_name }},\n            s.value AS VALUE\n        FROM\n            {{ source(\n                \"bronze_streamline\",\n                model\n            ) }}\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b.{{ partition_name }} = s.{{ partition_name }}\n        WHERE\n            b.{{ partition_name }} = s.{{ partition_name }}\n            AND (\n                DATA :error :code IS NULL\n                OR DATA :error :code NOT IN (\n                    '-32000',\n                    '-32001',\n                    '-32002',\n                    '-32003',\n                    '-32004',\n                    '-32005',\n                    '-32006',\n                    '-32007',\n                    '-32008',\n                    '-32009',\n                    '-32010'\n                )\n            )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8276496, "supported_languages": null}, "macro.evmos_models.streamline_external_table_FR_query": {"name": "streamline_external_table_FR_query", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.evmos_models.streamline_external_table_FR_query", "macro_sql": "{% macro streamline_external_table_FR_query(\n        model,\n        partition_function,\n        partition_name,\n        unique_key\n    ) %}\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS {{ partition_name }}\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => '{{ source( \"bronze_streamline\", model) }}'\n                )\n            ) A\n    )\nSELECT\n    {{ unique_key }},\n    DATA,\n    _inserted_timestamp,\n    MD5(\n        CAST(\n            COALESCE(CAST({{ unique_key }} AS text), '' :: STRING) AS text\n        )\n    ) AS id,\n    s.{{ partition_name }},\n    s.value AS VALUE\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b.{{ partition_name }} = s.{{ partition_name }}\nWHERE\n    b.{{ partition_name }} = s.{{ partition_name }}\n    AND (\n        DATA :error :code IS NULL\n        OR DATA :error :code NOT IN (\n            '-32000',\n            '-32001',\n            '-32002',\n            '-32003',\n            '-32004',\n            '-32005',\n            '-32006',\n            '-32007',\n            '-32008',\n            '-32009',\n            '-32010'\n        )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8287091, "supported_languages": null}, "macro.evmos_models.create_aws_ethereum_api": {"name": "create_aws_ethereum_api", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/api_integrations.sql", "original_file_path": "macros/streamline/api_integrations.sql", "unique_id": "macro.evmos_models.create_aws_ethereum_api", "macro_sql": "{% macro create_aws_ethereum_api() %}\n    {% if target.name == \"prod\" %}\n        {% set sql %}\n        CREATE api integration IF NOT EXISTS aws_evmos_api api_provider = aws_api_gateway api_aws_role_arn = 'arn:aws:iam::490041342817:role/snowflake-api-evmos' api_allowed_prefixes = (\n            'https://55h4rahr50.execute-api.us-east-1.amazonaws.com/dev/',\n            'https://n0reh6ugbf.execute-api.us-east-1.amazonaws.com/prod/'\n        ) enabled = TRUE;\n{% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8295405, "supported_languages": null}, "macro.evmos_models.create_udtf_get_base_table": {"name": "create_udtf_get_base_table", "resource_type": "macro", "package_name": "evmos_models", "path": "macros/streamline/get_base_table_udtf.sql", "original_file_path": "macros/streamline/get_base_table_udtf.sql", "unique_id": "macro.evmos_models.create_udtf_get_base_table", "macro_sql": "{% macro create_udtf_get_base_table(schema) %}\ncreate or replace function {{ schema }}.udtf_get_base_table(max_height integer)\nreturns table (height number)\nas\n$$\n    with base as (\n        select\n            row_number() over (\n                order by\n                    seq4()\n            ) as id\n        from\n            table(generator(rowcount => 100000000))\n    )\nselect\n    id as height\nfrom\n    base\nwhere\n    id <= max_height\n$$\n;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8299732, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8306344, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8309083, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8325388, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8573172, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8596334, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.860525, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8628554, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8632815, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.865458, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8673735, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8691163, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8701942, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8708556, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8715925, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8721735, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8736413, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8742213, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8747964, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8761837, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.87687, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.878294, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8803856, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8809247, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8815272, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8819444, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8826063, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.883214, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8835943, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8839657, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.88443, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.88508, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8854408, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8860118, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8864596, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8893104, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8900743, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.890741, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8920355, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8928995, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8977263, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.8985348, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9044464, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9050436, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9053001, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9109507, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9204412, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.920865, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9217064, "supported_languages": ["sql"]}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9224718, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9230325, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9242742, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9249814, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9271562, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9276605, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9289258, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9299157, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9318924, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9333963, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.933608, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9342887, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9346101, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9353976, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9357977, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9366775, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9371498, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9378912, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.938332, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9393573, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9398372, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9404576, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9408166, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.941565, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.941938, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.942615, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.942916, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9437273, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9441106, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.944846, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9451866, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9458294, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9462922, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9472857, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9477375, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9494123, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9506211, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.95143, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9521296, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9525526, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9532285, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9535081, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9540365, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9542258, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.954888, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9552279, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9559097, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9563246, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.958111, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9586942, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.959286, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9596634, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9600592, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9604993, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.960962, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9615207, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9619958, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9625373, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9631228, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.96363, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9641163, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.964472, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9654815, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9659183, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.966565, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9672456, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9675062, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9682431, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9688334, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9696836, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.970026, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9710298, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9716408, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9739368, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9744403, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9748554, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9752707, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9756808, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9765475, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9774294, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9784446, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9844127, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.985127, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9855402, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9857588, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9861147, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9864137, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9869251, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.989153, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9898176, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9906917, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9919834, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9990458, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554503.9996495, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0003695, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0023575, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0027819, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.003215, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0066378, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.010707, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.023025, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0239885, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0247364, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.026036, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0268672, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0276449, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0285733, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0335627, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0343378, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.03499, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0383117, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.044658, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0454593, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0458655, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0463114, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0469708, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0485463, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0491304, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.049592, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0505257, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0512097, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0521228, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0527053, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0533655, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0538263, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0542014, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0549083, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0643485, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.068322, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0689683, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.072062, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0729494, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0747504, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0861392, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.089584, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0911868, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0930583, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0936437, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.095428, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.0968723, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1058097, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1094468, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.113267, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1154058, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1164308, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1168904, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1180332, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1193938, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1258237, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1328783, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.135599, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1364257, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1380968, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1388106, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1392293, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1396315, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1399324, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.140327, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1406147, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1420603, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1427336, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1459801, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1536787, "supported_languages": ["sql"]}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1546674, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.155238, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.156072, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1566913, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1577127, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1583571, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1590815, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1620276, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.16551, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1679385, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.168717, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1718943, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1737893, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1746514, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1778111, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1782057, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1789827, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1794708, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1805196, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1812754, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.18319, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.183957, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1859047, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1868317, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1878774, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1888142, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1891544, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1895416, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.190543, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1914694, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1918416, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1921923, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.192451, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1931942, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.193464, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1939855, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.194397, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1952615, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1957412, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1962042, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1967316, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1981547, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1987975, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.1995332, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.20002, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2007926, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.202397, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.205885, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2062225, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2067227, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2070415, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2080162, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.208554, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2088478, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2095008, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.210045, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2110832, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2117445, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2125008, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2147374, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2154005, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.216021, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2165937, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2200572, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.225797, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2262135, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2267702, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.227604, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2283356, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.229246, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2297757, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2305825, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2311864, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2315862, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2320883, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2327864, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2336502, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2354496, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2360382, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2363982, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2368817, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2392466, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.239892, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2403545, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.240737, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.241182, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.24179, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2422955, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2431526, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2437587, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2443347, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2455094, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2463276, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2473261, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2480097, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2498305, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2516985, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2535121, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.266954, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2724776, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.279969, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2811172, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2815013, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2820153, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2825274, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2830207, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2834759, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.284131, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2845986, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.285062, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.285715, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.286346, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.286949, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2880023, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.288397, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2887414, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2890868, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2894323, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2906148, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2910802, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2915173, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2919393, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2924557, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2950547, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2957609, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2961435, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.296548, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2971325, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2976017, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2981308, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2985895, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.2997103, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3001904, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3005366, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.300878, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3012357, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3020627, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3026702, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3031077, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3039236, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.304626, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3051293, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3056223, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3059878, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.306745, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3095675, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3103423, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3111258, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.312308, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.313281, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.314232, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3147376, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.315273, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3164744, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3170455, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.317448, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3178463, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3184762, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3196423, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3201392, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3206356, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3212185, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3218014, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3229299, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3235984, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3246949, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3254158, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3261232, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3268254, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3274102, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3300676, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3309338, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3322535, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3332107, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3342686, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3353226, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3362715, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3367743, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3371716, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.33767, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3382525, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3393016, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3398004, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3408244, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3416784, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3425753, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3441236, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.346885, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3484464, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3500223, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3510776, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3515496, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.352992, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3542953, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.355924, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3567693, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3579967, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3588333, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3590224, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3592012, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3593779, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.359769, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3599534, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3601315, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3603077, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3609443, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3615568, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.362466, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.362984, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.363493, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3641336, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3643646, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3646002, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3648605, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3650923, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3653243, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3658495, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.366634, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3670104, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.367381, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3678372, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3702714, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3712854, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.372686, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.374364, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3751404, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3759656, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3770373, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3783858, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3789525, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.379877, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3807135, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3813071, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3842013, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.386072, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3872564, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3896964, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.392005, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3944843, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.395949, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.3978362, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4001806, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4025736, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4049842, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4060705, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4087663, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4101896, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4116247, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4127216, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4133275, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4144287, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.417381, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4192307, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4209087, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.423261, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4259768, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4280024, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4324653, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4401097, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4414878, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4427865, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4459686, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4478097, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.448853, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4503806, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.450964, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4512215, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.452517, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.454264, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4564154, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4583986, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4645355, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4658813, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4703176, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4787595, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4805243, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4819, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.485182, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4868608, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.487727, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4895363, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4905794, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4933212, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4951859, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4966993, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.4993534, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.500743, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.502439, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.503612, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5043216, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5078297, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.511386, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5124426, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5132642, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.515259, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5162458, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5188303, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5202281, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5224528, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5250618, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5269344, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.528596, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5299618, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5321915, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5337296, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5357158, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5372667, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5403743, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5426114, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5445545, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5457678, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5472982, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.549259, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5518286, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5529113, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5544298, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.556095, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.557738, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5597124, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5633132, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.564207, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {%- set columns_and_partitions = columns | list -%}\n    {%- if partitions -%}\n        {%- for i in partitions -%}\n            {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n                {%- do columns_and_partitions.append(i) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns | length > 0 %} (\n        {% for column in columns_and_partitions %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.569988, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5710547, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5727959, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5732706, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5737052, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% if not dbt_external_tables.create_external_schema(source_node)|length %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% endif %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5764446, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_schema": {"name": "bigquery__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_schema.sql", "original_file_path": "macros/plugins/bigquery/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_schema", "macro_sql": "{%- macro bigquery__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            `{{ source_node.database }}`.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set schema_exists_query %}\n        select * from {{ source_node.database }}.INFORMATION_SCHEMA.SCHEMATA where schema_name = '{{ source_node.schema }}' limit 1\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}  \n\n    {%- if not schema_exists -%}\n        {%- set ddl -%}\n            create schema if not exists {{ fqn }}\n        {%- endset -%}\n        {{ return(ddl) }}\n    {%- else -%}\n        {{ return('') }}\n    {% endif %} \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5794575, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {% if options is mapping and options.get('connection_name', none) %}\n        {% set connection_name = options.pop('connection_name') %}\n    {% endif %}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        {% if connection_name %}\n            with connection `{{ connection_name }}`\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5877235, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.590557, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_schema": {"name": "sqlserver__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_schema.sql", "original_file_path": "macros/plugins/sqlserver/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_schema", "macro_sql": "{% macro sqlserver__create_external_schema(source_node) %}\n    {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n    {% set ddl %}\n        IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n        BEGIN\n        EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n        END \n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5916717, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5958128, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5967553, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not dbt_external_tables.redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.5988288, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.608487, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6128716, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6139245, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.614507, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6150107, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6154485, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6180515, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6203492, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6210766, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6255558, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6308277, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6337395, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_schema": {"name": "snowflake__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_schema.sql", "original_file_path": "macros/plugins/snowflake/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_schema", "macro_sql": "{% macro snowflake__create_external_schema(source_node) %}\n\n    {% set schema_exists_query %}\n        show terse schemas like '{{ source_node.schema }}' in database {{ source_node.database }} limit 1;\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}    \n\n    {% if schema_exists %}\n        {% set ddl %}\n            select 'Schema {{ source_node.schema }} exists' from dual;\n        {% endset %}\n    {% else %}\n        {% set fqn %}\n            {% if source_node.database %}\n                {{ source_node.database }}.{{ source_node.schema }}\n            {% else %}\n                {{ source_node.schema }}\n            {% endif %}\n        {% endset %}\n\n        {% set ddl %}\n            create schema if not exists {{ fqn }};\n        {% endset %}\n    {% endif %}\n\n    {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6368687, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set infer_schema = external.infer_schema -%}\n\n    {% if infer_schema %}\n        {% set query_infer_schema %}\n            select * from table( infer_schema( location=>'{{external.location}}', file_format=>'{{external.file_format}}') )\n        {% endset %}\n        {% if execute %}\n            {% set columns_infer = run_query(query_infer_schema) %}\n        {% endif %}\n    {% endif %}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions or infer_schema -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 or infer_schema -}}\n        {%- endfor -%}{%- endif -%}\n        {%- if not infer_schema -%}\n            {%- for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {%- set col_expression -%}\n                    {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {% else %}\n        {%- for column in columns_infer %}\n                {%- set col_expression -%}\n                    {%- set col_id = 'value:' ~ column[0] -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column[0]}} {{column[1]}} as ({{col_expression}}::{{column[1]}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {%- endif -%}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6471496, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6510062, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6527426, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6549158, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.656857, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6639025, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6646118, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.665001, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6759982, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6767514, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.677126, "supported_languages": null}, "macro.dbt_external_tables.create_external_schema": {"name": "create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.create_external_schema", "macro_sql": "{%- macro create_external_schema(source_node) -%}\n    {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6778774, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_schema": {"name": "default__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.default__create_external_schema", "macro_sql": "{%- macro default__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            {{ source_node.database }}.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set ddl -%}\n        create schema if not exists {{ fqn }}\n    {%- endset -%}\n\n    {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6787992, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6794658, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.679817, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6805058, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6808844, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.681588, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.681956, "supported_languages": null}, "macro.dbt_snowflake_query_tags.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_query_tags.get_query_comment", "macro_sql": "{% macro get_query_comment(node) %}\n    {%- set comment_dict = {} -%}\n    {%- do comment_dict.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.3.1',\n        dbt_version=dbt_version,\n        project_name=project_name,\n        target_name=target.name,\n        target_database=target.database,\n        target_schema=target.schema,\n        invocation_id=invocation_id\n    ) -%}\n\n    {%- if node is not none -%}\n        {%- do comment_dict.update(\n            node_name=node.name,\n            node_alias=node.alias,\n            node_package_name=node.package_name,\n            node_original_file_path=node.original_file_path,\n            node_database=node.database,\n            node_schema=node.schema,\n            node_id=node.unique_id,\n            node_resource_type=node.resource_type,\n            node_meta=node.config.meta,\n            node_tags=node.tags,\n            full_refresh=flags.FULL_REFRESH,\n            which=flags.WHICH,\n        ) -%}\n\n        {%- if flags.INVOCATION_COMMAND -%}\n            {%- do comment_dict.update(\n                invocation_command=flags.INVOCATION_COMMAND\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.resource_type != ('seed') -%} {# Otherwise this throws an error saying 'Seeds cannot depend on other nodes.' #}\n            {%- if node.refs is defined -%}\n                {% set refs = [] %}\n                {% for ref in node.refs %}\n                    {%- if dbt_version >= '1.5.0' -%}\n                        {%- do refs.append(ref.name) -%}\n                    {%- else -%}\n                        {%- do refs.append(ref[0]) -%}\n                    {%- endif -%}\n                {% endfor %}\n                {%- do comment_dict.update(\n                    node_refs=refs | unique | list\n                ) -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if node.resource_type == 'model' -%}\n            {%- do comment_dict.update(\n                materialized=node.config.materialized,\n            ) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_PROJECT_ID', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_project_id=env_var('DBT_CLOUD_PROJECT_ID')\n    ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_JOB_ID', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_job_id=env_var('DBT_CLOUD_JOB_ID')\n    ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_ID', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_run_id=env_var('DBT_CLOUD_RUN_ID')\n    ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON_CATEGORY', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_run_reason_category=env_var('DBT_CLOUD_RUN_REASON_CATEGORY')\n    ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_run_reason=env_var('DBT_CLOUD_RUN_REASON')\n    ) -%}\n    {%- endif -%}\n\n    {{ return(tojson(comment_dict)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6905973, "supported_languages": null}, "macro.dbt_snowflake_query_tags.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6921587, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag() -%}\n    {# Start with any model-configured dict #}\n    {% set query_tag = config.get('query_tag', default={}) %}\n\n    {% if query_tag is not mapping %}\n    {% do log(\"dbt-snowflake-query-tags warning: the query_tag config value of '{}' is not a mapping type, so is being ignored. If you'd like to add additional query tag information, use a mapping type instead, or remove it to avoid this message.\".format(query_tag), True) %}\n    {% set query_tag = {} %} {# If the user has set the query tag config as a non mapping type, start fresh #}\n    {% endif %}\n\n\n    {%- do query_tag.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.3.1',\n    ) -%}\n\n    {% if thread_id %}\n        {%- do query_tag.update(\n            thread_id=thread_id\n        ) -%}\n    {% endif %}\n\n\n    {# We have to bring is_incremental through here because its not available in the comment context #}\n    {% if model.resource_type == 'model' %}\n        {%- do query_tag.update(\n            is_incremental=is_incremental()\n        ) -%}\n    {% endif %}\n\n    {% set query_tag_json = tojson(query_tag) %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ query_tag_json ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(query_tag_json)) %}\n    {{ return(original_query_tag)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6950815, "supported_languages": null}, "macro.dbt_snowflake_query_tags.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6955533, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {% if original_query_tag %}\n    {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n    {{ log(\"No original query_tag, unsetting parameter.\") }}\n    {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.6966197, "supported_languages": null}, "macro.fsc_utils.get_ancestors": {"name": "get_ancestors", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_ancestors", "macro_sql": "{%- macro get_ancestors(node, include_depth=false, exclude_source=false) -%}\n{#\n    Return a list of ancestors for a node in a DAG.\n #}\n    {%- for dep in node.depends_on.nodes | unique | list  recursive %}\n        {% if dep.startswith(\"model.\") and \"bronze__\" not in dep %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n            {{- loop(graph.nodes[dep].depends_on.nodes) -}}\n        {% elif not exclude_source %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n        {%- endif -%}\n    {%- endfor %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7014158, "supported_languages": null}, "macro.fsc_utils.get_view_ddl": {"name": "get_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_view_ddl", "macro_sql": "{% macro get_view_ddl() %}\n{#\n    Return a dictionary of view names and their DDL statements.\n    The DDL statements are escaped to be used in a Snowflake query.\n    The dictionary is converted to JSON to be used in a dbt macro..\n #}\n    {% if execute %}\n        {% set query %}\n            SELECT\n            CONCAT_WS('.', TABLE_SCHEMA, TABLE_NAME) as VIEW_NAME,\n            VIEW_DEFINITION\n            FROM {{target.database}}.INFORMATION_SCHEMA.VIEWS\n            WHERE TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'STREAMLINE')\n            AND TABLE_SCHEMA NOT LIKE 'TEST_%'\n        {%- endset -%}\n        {%- set results = run_query(query) -%}\n        {% set ddl = {} %}\n        {% for key, value in results.rows %}\n          {%- do ddl.update({key: value|replace(\"$$\", \"\\$\\$\")}) -%}\n        {%- endfor -%}\n        {{- tojson(ddl) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.703593, "supported_languages": null}, "macro.fsc_utils.replace_database_references": {"name": "replace_database_references", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.replace_database_references", "macro_sql": "{% macro replace_database_references(references_to_replace, ddl, new_database) %}\n{#\n    Return the DDL statement for a view with the references replaced.\n\n    references_to_replace: a dictionary of references to replace\n    ddl: the DDL statement to replace the references in\n    new_database: the new database to replace the references with\n#}\n    {% set outer = namespace(replaced=ddl) %}\n    {% for key in references_to_replace %}\n        {%- set original = target.database ~ \".\" ~ key.upper() -%}\n        {%- set replacement  =  new_database ~ \".\" ~ key -%}\n        {%- set outer.replaced = outer.replaced|replace(original, replacement) -%}\n        {%- set original = target.database ~ \".\" ~ key.lower() -%}\n        {%- set replacement  =  new_database ~ \".\" ~ key -%}\n        {%- set outer.replaced = outer.replaced|replace(original, replacement) -%}\n    {%- endfor -%}\n    {% set outer.replaced = outer.replaced|replace(target.database.upper() ~ \".\", \"__SOURCE__.\") %}\n    {% set outer.replaced = outer.replaced|replace(target.database.lower() ~ \".\", \"__SOURCE__.\") %}\n    {{- outer.replaced -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7064676, "supported_languages": null}, "macro.fsc_utils.generate_view_ddl": {"name": "generate_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_view_ddl", "macro_sql": "{% macro generate_view_ddl(dag, schema) %}\n{#\n    Return a list of DDL statements for views in a DAG.\n\n    dag: a DAG of views\n    schema: schemas to create schema DDL for\n #}\n    {%- set ddl =  fromjson(fsc_utils.get_view_ddl())  -%}\n    {%- set created = {} -%}\n    {%- set final_text = [] -%}\n    {%- for view, deps in dag.items() -%}\n        {%- for d in deps -%}\n            {%- set table_name = d.split(\".\")[-1].replace(\"__\", \".\").upper() -%}\n            {%- if ddl.get(table_name) and table_name not in created -%}\n                {%- set replaced = fsc_utils.replace_database_references(ddl.keys(), ddl[table_name], \"__NEW__\") -%}\n                {%- do final_text.append(replaced) -%}\n                {%- do created.update({table_name:true}) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endfor -%}\n    {%- set schema_ddl = [] -%}\n    {%- for s in schema -%}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + final_text) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_view_ddl", "macro.fsc_utils.replace_database_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7091663, "supported_languages": null}, "macro.fsc_utils.generate_dag_and_schemas": {"name": "generate_dag_and_schemas", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_dag_and_schemas", "macro_sql": "{% macro generate_dag_and_schemas(node_paths, materializations) %}\n{#\n    Return a DAG of views and a list of schemas to create.\n\n    node_paths: a list of node paths to include in the DAG\n    materializations: a list of materializations to include in the DAG\n #}\n    {%- set dag = {} -%}\n    {%- set schema = [] -%}\n    {%- for key, value in graph.nodes.items() -%}\n        {%\n        if value.refs\n        and set(value.fqn).intersection(node_paths)\n        and value.config.materialized in materializations\n        and value.config.enabled\n        and not value.sources\n        and not key.endswith(\"_create_gold\")\n        -%}\n        {%- set name = value.schema + \".\" + value.alias -%}\n        {%- set _result = fromyaml(\"[\" ~ fsc_utils.get_ancestors(value, exclude_source=true)[:-1] ~ \"]\") -%}\n            {% if _result -%}\n                {%- do _result.insert(0, key) -%}\n                {%- do dag.update({name.upper() : _result | reverse|list})  -%}\n                {% for d in _result -%}\n                    {%- if d.split(\".\")[-1].split(\"__\")[0] not in schema -%}\n                        {%- do schema.append(d.split(\".\")[-1].split(\"__\")[0]) -%}\n                    {%- endif -%}\n                {%- endfor -%}\n            {%- else -%}\n                {%- do dag.update({name.upper() : [key] }) -%}\n                {%- if value.schema not in schema -%}\n                    {%- do schema.append(value.schema) -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {%- set final = {\"dag\": dag, \"schema\": schema} -%}\n    {{- tojson(final) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_ancestors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7139282, "supported_languages": null}, "macro.fsc_utils.generate_table_views_ddl": {"name": "generate_table_views_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_table_views_ddl", "macro_sql": "{% macro generate_table_views_ddl(tables, schema) %}\n{#\n    Return a list of DDL statements for views of tables from a list.\n\n    tables: a list of tables to create views for\n    schema: schemas to create schema DDL for\n #}\n    {%- set schema_ddl = [] -%}\n    {%- set view_ddl = [] -%}\n    {% for s in schema %}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {% for table in tables %}\n        {%- do view_ddl.append(\"CREATE OR REPLACE VIEW __NEW__.\" ~ table ~ \" AS SELECT * FROM \" ~ \"__SOURCE__.\" ~ table ~\";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + view_ddl) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7155704, "supported_languages": null}, "macro.fsc_utils.generate_datashare_ddl": {"name": "generate_datashare_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_ddl", "macro_sql": "{% macro generate_datashare_ddl() %}\n{#\n    generate DDL for datashare\n\n    Return: DDL for datashare\n #}\n    {%- set gold_views = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"view\"])) -%}\n    {%- set gold_views_ddl = fromyaml(fsc_utils.generate_view_ddl(gold_views[\"dag\"], gold_views[\"schema\"])) -%}\n    {%- set gold_tables = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"incremental\", \"table\"])) -%}\n    {%- set gold_tables_ddl = fromyaml(fsc_utils.generate_table_views_ddl(gold_tables[\"dag\"].keys(), gold_tables[\"schema\"])) -%}\n    {%- set combined_ddl = gold_views_ddl + gold_tables_ddl -%}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {{- \"BEGIN\\n\" ~ (combined_ddl | join(\"\\n\")) ~ \"\\nEND\" -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.generate_dag_and_schemas", "macro.fsc_utils.generate_view_ddl", "macro.fsc_utils.generate_table_views_ddl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7177012, "supported_languages": null}, "macro.fsc_utils.get_exclusion_schema": {"name": "get_exclusion_schema", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_exclusion_schema", "macro_sql": "{% macro get_exclusion_schema() %}\n{#\n    Return a list of schemas to exclude from the data shares\n #}\n{% set schema = {} %}\n{% for key, value in graph.nodes.items() -%}\n    {%\n    if key.startswith(\"test.\") or value.schema.startswith(\"_\")\n    -%}\n    {% do schema.update({value.schema:None}) %}\n    {%- endif %}\n{%- endfor %}\n{{- schema.keys() | list | tojson  -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.718895, "supported_languages": null}, "macro.fsc_utils.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7199013, "supported_languages": null}, "macro.fsc_utils.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.720894, "supported_languages": null}, "macro.fsc_utils.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.fsc_utils.create_udfs", "macro_sql": "{% macro create_udfs(drop_=False,schema=\"utils\") %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set name %}\n        {{- fsc_utils.udf_configs(schema) -}}\n        {% endset %}\n        {%  set udfs = fromyaml(name) %}\n        {% set sql %}\n        CREATE schema if NOT EXISTS {{ schema }};\n        {%- for udf in udfs -%}\n        {{- fsc_utils.create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {% endfor %}\n        {% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_or_drop_function_from_config", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7227092, "supported_languages": null}, "macro.fsc_utils.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.725257, "supported_languages": null}, "macro.fsc_utils.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7261467, "supported_languages": null}, "macro.fsc_utils.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  hex_to_int('hex', '200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', '0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', NULL);\n  >> NULL\n  hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n  >> -440911153\n  \"\"\"\n  if not hex:\n    return None\n  if encoding.lower() == 's2c':\n    if hex[0:2].lower() != '0x':\n      hex = f'0x{hex}'\n\n    bits = len(hex[2:])*4\n    value = int(hex, 0)\n    if value & (1 << (bits-1)):\n        value -= 1 << bits\n    return str(value)\n  else:\n    return str(int(hex, 16))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7263985, "supported_languages": null}, "macro.fsc_utils.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.726625, "supported_languages": null}, "macro.fsc_utils.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7268834, "supported_languages": null}, "macro.fsc_utils.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.sql", "original_file_path": "macros/streamline/functions.sql", "unique_id": "macro.fsc_utils.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7275815, "supported_languages": null}, "macro.fsc_utils.udf_configs": {"name": "udf_configs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/configs.yaml.sql", "original_file_path": "macros/streamline/configs.yaml.sql", "unique_id": "macro.fsc_utils.udf_configs", "macro_sql": "{% macro udf_configs(schema) %}\n\n{#\n  UTILITY SCHEMA\n#}\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_udf_hex_to_int_with_encoding() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL \n    STRICT IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ fsc_utils.create_udf_evm_text_signature() | indent(4) }}\n\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ fsc_utils.create_udf_keccak256() | indent(4) }}  \n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.python_hex_to_int", "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro.fsc_utils.sql_udf_json_rpc_call", "macro.fsc_utils.create_udf_evm_text_signature", "macro.fsc_utils.create_udf_keccak256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7313077, "supported_languages": null}, "macro.fsc_utils.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ fsc_utils.compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.735583, "supported_languages": null}, "macro.fsc_utils.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"REST_API_ID_PROD\") if target.name == \"prod\" else var(\"REST_API_ID_DEV\") }}.execute-api.{{ var( aws_region, \"us-east-1\" ) }}.amazonaws.com/{{ target.name }}/{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.736672, "supported_languages": null}, "macro.fsc_utils.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for name,\n        data_type in params -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {% endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7375765, "supported_languages": null}, "macro.fsc_utils.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- fsc_utils.compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ fsc_utils.construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.compile_signature", "macro.fsc_utils.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7388868, "supported_languages": null}, "macro.fsc_utils.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ fsc_utils.create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ fsc_utils.drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.create_sql_function", "macro.fsc_utils.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7412684, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.742178, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.744097, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7450862, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.745891, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.746632, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7479296, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7491443, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7511742, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.752857, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7536812, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7549546, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.756209, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7572608, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7580876, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7592669, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7600212, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7609665, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7621086, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7630143, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7639146, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7656333, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7668507, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.768845, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7716248, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7732487, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.77617, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7779756, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.780808, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7823508, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.785051, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.786551, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7882895, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7932265, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7974536, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.7987335, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8000484, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.801607, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.803994, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8050907, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8060296, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8067322, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8082373, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8101013, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8108244, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8112984, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8119075, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8124347, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.814397, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8192408, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8203068, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.82104, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8226664, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8251398, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8262918, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.828224, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8299625, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8307405, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.832521, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8345473, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8352683, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8363457, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8375344, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8382306, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8390946, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8399947, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8409119, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.842848, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8448935, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8476024, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8502169, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8511286, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8530912, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.854445, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8558946, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.857298, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8579133, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8592095, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8641634, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8737125, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8764603, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8815958, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8829427, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8835268, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8840983, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8846273, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8850358, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8854544, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.886777, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8886423, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8892143, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8900938, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8909566, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.891343, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8917117, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.89444, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8957486, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8970602, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8977382, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.8989086, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9013515, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9021146, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9028437, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9040234, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9060779, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9086397, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9127042, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.91339, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9137232, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9145682, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9160705, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.9173746, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697554504.920032, "supported_languages": null}}, "docs": {"doc.evmos_models.validator_hash": {"name": "validator_hash", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/validator_hash.md", "original_file_path": "models/descriptions/validator_hash.md", "unique_id": "doc.evmos_models.validator_hash", "block_contents": "The root hash of the new validator set."}, "doc.evmos_models.label_type": {"name": "label_type", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/label_type.md", "original_file_path": "models/descriptions/label_type.md", "unique_id": "doc.evmos_models.label_type", "block_contents": "A broad category that describes what a label is representing."}, "doc.evmos_models.tx_log": {"name": "tx_log", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/tx_log.md", "original_file_path": "models/descriptions/tx_log.md", "unique_id": "doc.evmos_models.tx_log", "block_contents": "A string that contains the transaction logs, which are logs written by the program interacted with during the transaction."}, "doc.evmos_models.gas_used": {"name": "gas_used", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/gas_used.md", "original_file_path": "models/descriptions/gas_used.md", "unique_id": "doc.evmos_models.gas_used", "block_contents": "The amount of gas consumed by the transaction."}, "doc.evmos_models.codespace": {"name": "codespace", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/codespace.md", "original_file_path": "models/descriptions/codespace.md", "unique_id": "doc.evmos_models.codespace", "block_contents": "Namespace for the code."}, "doc.evmos_models.receiver": {"name": "receiver", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/receiver.md", "original_file_path": "models/descriptions/receiver.md", "unique_id": "doc.evmos_models.receiver", "block_contents": "The wallet address of the individual received tokens in the transfer."}, "doc.evmos_models.tx_from": {"name": "tx_from", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/tx_from.md", "original_file_path": "models/descriptions/tx_from.md", "unique_id": "doc.evmos_models.tx_from", "block_contents": "The wallet address of the individual who initiated the transaction"}, "doc.evmos_models.project_name": {"name": "project_name", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/project_name.md", "original_file_path": "models/descriptions/project_name.md", "unique_id": "doc.evmos_models.project_name", "block_contents": "The name of the project the label belongs to."}, "doc.evmos_models.label_subtype": {"name": "label_subtype", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/label_subtype.md", "original_file_path": "models/descriptions/label_subtype.md", "unique_id": "doc.evmos_models.label_subtype", "block_contents": "Adds more detail to the label type."}, "doc.evmos_models.sender": {"name": "sender", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/sender.md", "original_file_path": "models/descriptions/sender.md", "unique_id": "doc.evmos_models.sender", "block_contents": "The wallet address of the individual sent tokens in the transfer."}, "doc.evmos_models.tx_succeeded": {"name": "tx_succeeded", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/tx_succeeded.md", "original_file_path": "models/descriptions/tx_succeeded.md", "unique_id": "doc.evmos_models.tx_succeeded", "block_contents": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed."}, "doc.evmos_models.gas_wanted": {"name": "gas_wanted", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/gas_wanted.md", "original_file_path": "models/descriptions/gas_wanted.md", "unique_id": "doc.evmos_models.gas_wanted", "block_contents": "Amount of gas requested for a transaction. It is provided by users when the transaction is generated."}, "doc.evmos_models._unique_key": {"name": "_unique_key", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/_unique_key.md", "original_file_path": "models/descriptions/_unique_key.md", "unique_id": "doc.evmos_models._unique_key", "block_contents": "The unique key for the table."}, "doc.evmos_models.msg_sub_group": {"name": "msg_sub_group", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/msg_sub_group.md", "original_file_path": "models/descriptions/msg_sub_group.md", "unique_id": "doc.evmos_models.msg_sub_group", "block_contents": "Silver only -- Numeric value grouping different messages together to represent a single action within a group. This is relevent for exec actions that contain mutiple underlying actions. NULL sub group means messages are related to the header (overall transaction)"}, "doc.evmos_models.tx_id": {"name": "tx_id", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "unique_id": "doc.evmos_models.tx_id", "block_contents": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers."}, "doc.evmos_models.chain_id": {"name": "chain_id", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/chain_id.md", "original_file_path": "models/descriptions/chain_id.md", "unique_id": "doc.evmos_models.chain_id", "block_contents": "The name and version of the blockchain."}, "doc.evmos_models.msg_group": {"name": "msg_group", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/msg_group.md", "original_file_path": "models/descriptions/msg_group.md", "unique_id": "doc.evmos_models.msg_group", "block_contents": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)"}, "doc.evmos_models.label": {"name": "label", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/label.md", "original_file_path": "models/descriptions/label.md", "unique_id": "doc.evmos_models.label", "block_contents": "The label or name of the address."}, "doc.evmos_models.proposer_address": {"name": "proposer_address", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/proposer_address.md", "original_file_path": "models/descriptions/proposer_address.md", "unique_id": "doc.evmos_models.proposer_address", "block_contents": "The address of the validator that proposed the block."}, "doc.evmos_models.creator": {"name": "creator", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/creator.md", "original_file_path": "models/descriptions/creator.md", "unique_id": "doc.evmos_models.creator", "block_contents": "Name of the label creator - for now, this will always be \"Flipside.\""}, "doc.evmos_models.blockchain": {"name": "blockchain", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/blockchain.md", "original_file_path": "models/descriptions/blockchain.md", "unique_id": "doc.evmos_models.blockchain", "block_contents": "In this table, always Cosmos. Used to join to cross-chain tables."}, "doc.evmos_models.msg_type": {"name": "msg_type", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/msg_type.md", "original_file_path": "models/descriptions/msg_type.md", "unique_id": "doc.evmos_models.msg_type", "block_contents": "A string containing information about the type of message occurring."}, "doc.evmos_models.raw_metadata": {"name": "raw_metadata", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/raw_metadata.md", "original_file_path": "models/descriptions/raw_metadata.md", "unique_id": "doc.evmos_models.raw_metadata", "block_contents": "Additional details about the validator or token in json format."}, "doc.evmos_models.fee": {"name": "fee", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/fee.md", "original_file_path": "models/descriptions/fee.md", "unique_id": "doc.evmos_models.fee", "block_contents": "The fee is paid by the initiator of the transaction. Fee = gas * gas price and is given in micro-OSMO."}, "doc.evmos_models.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/__overview__.md", "original_file_path": "models/descriptions/__overview__.md", "unique_id": "doc.evmos_models.__overview__", "block_contents": "# Welcome to the Flipside Crypto EVMOS Models Documentation\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the evmos\n tables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/) For more information on how these models are built, please see [the github repository.](https://github.com/flipsideCrypto/evmos-models/)\n\n## **How do I use these docs?**\nThe easiest way to navigate this documentation is to use the Quick Links below. These links will take you to the documentation for each table, which contains a description, a list of the columns, and other helpful information.\n\nIf you are experienced with dbt docs, feel free to use the sidebar to navigate the documentation, as well as explore the relationships between tables and the logic building them.\n\nThere is more information on how to use dbt docs in the last section of this document.\n\n## **Quick Links to Table Documentation**\n\n**Click on the links below to jump to the documentation for each schema.**\n\n### Core Tables (`evmos`.`CORE`.`<table_name>`)\n### Governance Tables (`evmos`.`GOV`.`<table_name>`)\n### DeFi Tables (`evmos`.`DEFI`.`<table_name>`)\n\n\n**Core Dimension Tables:**\n- [dim_labels](#!/model/model.evmos.core__dim_labels)\n- [dim_tokens](#!/model/model.evmos.core__dim_tokens)\n\n**Core Fact Tables:**\n- [fact_blocks](#!/model/model.evmos.core__fact_blocks)\n- [fact_msg_attributes](#!/model/model.evmos.core__fact_msg_attributes)\n- [fact_msgs](#!/model/model.evmos.core__fact_msgs)\n- [fact_transactions](#!/model/model.evmos.core__fact_transactions)\n- [fact_transfers](#!/model/model.evmos.core__fact_transfers)\n\n**Governance Fact Tables:**\n- [fact_validators](#!/model/model.evmos.gov__fact_validators)\n\n\n\n## **Data Model Overview**\n\nThe evmos models are built a few different ways, but the core fact tables are built using three layers of sql models: **bronze, silver, and gold (or core).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (core/gov): Final views and tables that are available publicly\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez_) are a combination of different fact and dimension tables. These views are built to make it easier to query the data.\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Data Studio](https://flipsidecrypto.xyz/edit)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/evmos-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}, "doc.evmos_models.tx_code": {"name": "tx_code", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/tx_code.md", "original_file_path": "models/descriptions/tx_code.md", "unique_id": "doc.evmos_models.tx_code", "block_contents": "A number that corresponds to various error codes. When \"0\", the transaction is successful. Non-zero numbers signify different types of transaction failures."}, "doc.evmos_models.transfer_type": {"name": "transfer_type", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/transfer_type.md", "original_file_path": "models/descriptions/transfer_type.md", "unique_id": "doc.evmos_models.transfer_type", "block_contents": "Details on the type of transfer occurring during the transaction. \"Transfer_In\" = depositing tokens onto the Cosmos Hub. \"Transfer_out\" = withdrawing tokens from the Cosmos Hub. \"Cosmos\" = wallet to wallet transfer on the Cosmos Hub."}, "doc.evmos_models.inserted_timestamp": {"name": "inserted_timestamp", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/inserted_timestamp.md", "original_file_path": "models/descriptions/inserted_timestamp.md", "unique_id": "doc.evmos_models.inserted_timestamp", "block_contents": "The date and time at which the block or transaction was inserted in the bronze tables."}, "doc.evmos_models.block_id": {"name": "block_id", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "unique_id": "doc.evmos_models.block_id", "block_contents": "The block height the block was recorded at."}, "doc.evmos_models.msgs": {"name": "msgs", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/msgs.md", "original_file_path": "models/descriptions/msgs.md", "unique_id": "doc.evmos_models.msgs", "block_contents": "The underlying json from the messages or events within the transactions."}, "doc.evmos_models.amount": {"name": "amount", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/amount.md", "original_file_path": "models/descriptions/amount.md", "unique_id": "doc.evmos_models.amount", "block_contents": "The amount that was used in the transaction message."}, "doc.evmos_models.decimal": {"name": "decimal", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/decimal.md", "original_file_path": "models/descriptions/decimal.md", "unique_id": "doc.evmos_models.decimal", "block_contents": "Divide the amount by POW(10, decimal) to get the amount used in the transaction. This value can be NULL, as decimals are hand curated from an outside source and not found on-chain."}, "doc.evmos_models.currency": {"name": "currency", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/currency.md", "original_file_path": "models/descriptions/currency.md", "unique_id": "doc.evmos_models.currency", "block_contents": "The currency that was used in the transaction message."}, "doc.evmos_models.address": {"name": "address", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/address.md", "original_file_path": "models/descriptions/address.md", "unique_id": "doc.evmos_models.address", "block_contents": "Address unique to an individual wallet, validator, or token."}, "doc.evmos_models.tx_count": {"name": "tx_count", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/tx_count.md", "original_file_path": "models/descriptions/tx_count.md", "unique_id": "doc.evmos_models.tx_count", "block_contents": "The number of transactions that occurred during a block."}, "doc.evmos_models.msg_index": {"name": "msg_index", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/msg_index.md", "original_file_path": "models/descriptions/msg_index.md", "unique_id": "doc.evmos_models.msg_index", "block_contents": "Short for \"message index,\" the position in which messages occur in a transaction."}, "doc.evmos_models.block_timestamp": {"name": "block_timestamp", "resource_type": "doc", "package_name": "evmos_models", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "unique_id": "doc.evmos_models.block_timestamp", "block_contents": "The date and time at which the block began."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.evmos_models.gov__fact_validators": ["model.evmos_models.silver__validators"], "model.evmos_models.core__dim_labels": ["model.evmos_models.core__dim_tokens", "model.evmos_models.core__fact_validators", "model.evmos_models.silver__labels"], "model.evmos_models.core__fact_msgs": ["model.evmos_models.silver__msgs"], "model.evmos_models.core__fact_transfers": ["model.evmos_models.silver__transfers"], "model.evmos_models.core__fact_validators": ["model.evmos_models.gov__fact_validators"], "model.evmos_models.core__fact_msg_attributes": ["model.evmos_models.silver__msg_attributes"], "model.evmos_models.core__fact_blocks": ["model.evmos_models.silver__blocks"], "model.evmos_models.core__dim_tokens": ["source.evmos_models.osmo.asset_metadata"], "model.evmos_models.core__fact_transactions": ["model.evmos_models.silver__transactions_final"], "model.evmos_models.bronze__streamline_FR_eth_transactions": ["source.evmos_models.bronze_streamline.eth_transactions", "source.evmos_models.bronze_streamline.eth_transactions"], "model.evmos_models.bronze__streamline_FR_tendermint_validators": ["source.evmos_models.bronze_streamline.tendermint_validators", "source.evmos_models.bronze_streamline.tendermint_validators"], "model.evmos_models.bronze__streamline_eth_blocks": ["source.evmos_models.bronze_streamline.eth_blocks", "source.evmos_models.bronze_streamline.eth_blocks"], "model.evmos_models.bronze__streamline_FR_eth_blocks": ["source.evmos_models.bronze_streamline.eth_blocks", "source.evmos_models.bronze_streamline.eth_blocks"], "model.evmos_models.bronze__streamline_eth_transactions": ["source.evmos_models.bronze_streamline.eth_transactions", "source.evmos_models.bronze_streamline.eth_transactions"], "model.evmos_models.bronze__streamline_FR_tendermint_transactions": ["source.evmos_models.bronze_streamline.tendermint_transactions", "source.evmos_models.bronze_streamline.tendermint_transactions"], "model.evmos_models.bronze__streamline_tendermint_validators": ["source.evmos_models.bronze_streamline.tendermint_validators", "source.evmos_models.bronze_streamline.tendermint_validators"], "model.evmos_models.bronze__streamline_FR_tendermint_blocks": ["source.evmos_models.bronze_streamline.tendermint_blocks", "source.evmos_models.bronze_streamline.tendermint_blocks"], "model.evmos_models.bronze__streamline_tendermint_blocks": ["source.evmos_models.bronze_streamline.tendermint_blocks", "source.evmos_models.bronze_streamline.tendermint_blocks"], "model.evmos_models.bronze__streamline_tendermint_transactions": ["source.evmos_models.bronze_streamline.tendermint_transactions", "source.evmos_models.bronze_streamline.tendermint_transactions"], "model.evmos_models.streamline__blocks": [], "model.evmos_models.streamline__eth_blocks_realtime": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_eth_blocks"], "model.evmos_models.streamline__eth_transactions_realtime": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_eth_transactions"], "model.evmos_models.streamline__tendermint_transactions_realtime": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_tendermint_transactions"], "model.evmos_models.streamline__tendermint_blocks_realtime": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_tendermint_blocks"], "model.evmos_models.streamline__tendermint_validators_realtime": ["model.evmos_models.streamline__blocks", "model.evmos_models.streamline__blocks", "model.evmos_models.streamline__complete_tendermint_validators"], "model.evmos_models.streamline__complete_eth_blocks": ["model.evmos_models.bronze__streamline_FR_eth_blocks", "model.evmos_models.bronze__streamline_eth_blocks"], "model.evmos_models.streamline__complete_tendermint_transactions": ["model.evmos_models.bronze__streamline_FR_tendermint_transactions", "model.evmos_models.bronze__streamline_tendermint_transactions"], "model.evmos_models.streamline__complete_tendermint_blocks": ["model.evmos_models.bronze__streamline_FR_tendermint_blocks", "model.evmos_models.bronze__streamline_tendermint_blocks"], "model.evmos_models.streamline__complete_tendermint_validators": ["model.evmos_models.bronze__streamline_FR_tendermint_validators", "model.evmos_models.bronze__streamline_tendermint_validators"], "model.evmos_models.streamline__complete_eth_transactions": ["model.evmos_models.bronze__streamline_FR_eth_transactions", "model.evmos_models.bronze__streamline_eth_transactions"], "model.evmos_models.silver__msgs": ["model.evmos_models.silver__transactions"], "model.evmos_models.silver__validators": ["model.evmos_models.bronze_api__get_validator_metadata_lcd"], "model.evmos_models.silver__transactions": ["model.evmos_models.bronze__streamline_FR_tendermint_transactions", "model.evmos_models.bronze__streamline_tendermint_transactions", "model.evmos_models.silver__blocks"], "model.evmos_models.silver__transactions_final": ["model.evmos_models.silver__msg_attributes", "model.evmos_models.silver__transactions"], "model.evmos_models.silver__msg_attributes": ["model.evmos_models.silver__msgs"], "model.evmos_models.silver__blocks": ["model.evmos_models.bronze__streamline_FR_tendermint_blocks", "model.evmos_models.bronze__streamline_tendermint_blocks"], "model.evmos_models.silver__transfers": ["model.evmos_models.silver__msg_attributes"], "model.evmos_models.silver__blockchain": ["model.evmos_models.bronze_api__get_blockchain"], "model.evmos_models.silver__labels": ["source.evmos_models.crosschain.dim_labels"], "model.evmos_models.silver_observability__blocks_completeness": ["model.evmos_models.silver__blocks", "source.evmos_models.crosschain_silver.number_sequence"], "model.evmos_models.silver_observability__transactions_completeness": ["model.evmos_models.bronze__streamline_tendermint_transactions", "model.evmos_models.silver__blockchain", "model.evmos_models.silver__blocks"], "model.evmos_models.bronze_api__get_validator_metadata_lcd": [], "model.evmos_models.bronze_api__get_blockchain": ["model.evmos_models.silver__blocks"], "operation.evmos_models.evmos_models-on-run-start-0": [], "operation.evmos_models.evmos_models-on-run-start-1": [], "operation.evmos_models.evmos_models-on-run-end-0": [], "model.fsc_utils._datashare___create_gold": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_ADDRESS.95fbe5342e": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_BLOCKCHAIN.7cf8f7a92c": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_CREATOR.18aee719fc": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_TYPE.25a2422c81": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_SUBTYPE.e0c797ce2d": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL.4fe2c43b65": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_PROJECT_NAME.5cc1c00d71": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_DELEGATOR_SHARES.24087433c1": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_JAILED.5d66da1491": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RATE.e6007c777a": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_CHANGE_RATE.089f47296a": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_RATE.4a85f9a318": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MIN_SELF_DELEGATION.d05f8a117b": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RANK.c623385581": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RAW_METADATA.1478081a3d": ["model.evmos_models.gov__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd": ["model.evmos_models.core__dim_tokens"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216": ["model.evmos_models.core__fact_validators"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.not_null_core__fact_transactions_FEE.f477aa43d7": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f": ["model.evmos_models.core__fact_transactions"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": ["model.evmos_models.core__fact_transfers"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60": ["model.evmos_models.core__fact_msg_attributes"], "test.evmos_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": ["model.evmos_models.core__dim_labels"], "test.evmos_models.not_null_core__dim_labels_CREATOR.0c77d5749c": ["model.evmos_models.core__dim_labels"], "test.evmos_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": ["model.evmos_models.core__dim_labels"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__bridge.4ee3b54c5e": ["model.evmos_models.core__dim_labels"], "test.evmos_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": ["model.evmos_models.core__dim_labels"], "test.evmos_models.not_null_core__dim_labels_LABEL.05696d692d": ["model.evmos_models.core__dim_labels"], "test.evmos_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.evmos_models.core__dim_labels"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": ["model.evmos_models.core__fact_blocks"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": ["model.evmos_models.core__fact_blocks"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": ["model.evmos_models.core__fact_blocks"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": ["model.evmos_models.core__fact_blocks"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a": ["model.evmos_models.core__fact_blocks"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2": ["model.evmos_models.core__fact_blocks"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9": ["model.evmos_models.core__fact_msgs"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790": ["model.evmos_models.core__fact_msgs"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe": ["model.evmos_models.core__fact_msgs"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946": ["model.evmos_models.core__fact_msgs"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2": ["model.evmos_models.core__fact_msgs"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb": ["model.evmos_models.core__fact_msgs"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983": ["model.evmos_models.core__fact_msgs"], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4": ["model.evmos_models.core__fact_msgs"], "test.evmos_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers_TX_ID.1be05d8ee2": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_TYPE__STRING__VARCHAR.43a2c68273": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers_SENDER.0abbede6fe": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_SENDER__STRING__VARCHAR.4ae271899a": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers_AMOUNT.ba102cb51b": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_AMOUNT__NUMBER__FLOAT.d9692a78f1": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers_CURRENCY.4a8953d5ec": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CURRENCY__STRING__VARCHAR.a650f3fc35": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers_RECEIVER.965c9f325d": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIVER__STRING__VARCHAR.b93628338d": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8d4833df5c": ["model.evmos_models.silver__transfers"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__BLOCK_ID__MSG_INDEX__CURRENCY.0b4f1afb10": ["model.evmos_models.silver__transfers"], "test.evmos_models.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.not_null_silver__msg_attributes_TX_ID.34f30240c0": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__STRING__VARCHAR.f3a5b084a1": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__NUMBER__FLOAT.3ff8ce7ee1": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_SUB_GROUP__NUMBER__FLOAT.ffdfeb6ce8": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__STRING__VARCHAR.20bcdff679": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msg_attributes_TX_ID__MSG_INDEX__ATTRIBUTE_INDEX.e7c19e7974": ["model.evmos_models.silver__msg_attributes"], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_ID.bf1b3be3d9": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_TIMESTAMP.ea92ba4a11": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_ID.c258bff1f9": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.not_null_silver__transactions_final_TX_FROM.12296b6fae": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_SUCCEEDED.8412d10220": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_CODESPACE.1a2bc35449": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.not_null_silver__transactions_final_FEE.c284e11dcd": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_USED.a3513b2796": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_WANTED.8599c41151": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_MSGS.243f811eab": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_final_TX_ID.09096ac176": ["model.evmos_models.silver__transactions_final"], "test.evmos_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions_TX_ID.5bc0e20339": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_ID__STRING__VARCHAR.81b523ec1d": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions_GAS_USED.1c943486c0": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions_GAS_WANTED.440469f6c5": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SUCCEEDED__BOOLEAN.1f7ce5b336": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions_TX_CODE.080a71cc61": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions_MSGS.e30a3fea27": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions_TX_LOG.1ceefab63d": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8451af7915": ["model.evmos_models.silver__transactions"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b": ["model.evmos_models.silver__transactions"], "test.evmos_models.not_null_silver__validators_ADDRESS.044bdd0fb3": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_BLOCKCHAIN.8d62ff2215": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__evmos.03ce0c8a26": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_CREATOR.29e051ca7b": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_LABEL_TYPE.9ac3147d2a": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_LABEL_SUBTYPE.64be738825": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_LABEL.5e8c7267ff": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_PROJECT_NAME.b8f893f8e7": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_DELEGATOR_SHARES.89b722f278": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_JAILED.f85ae4ab21": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_RATE.fea467fa10": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_MAX_CHANGE_RATE.6156472781": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_MAX_RATE.24b5d3c90d": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_RANK.2e8e4ef4a4": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__validators_RAW_METADATA.fb6370f348": ["model.evmos_models.silver__validators"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__validators_ADDRESS__CREATOR__BLOCKCHAIN.818d7392ef": ["model.evmos_models.silver__validators"], "test.evmos_models.not_null_silver__blockchain_CHAIN_ID.c381503839": ["model.evmos_models.silver__blockchain"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_CHAIN_ID__STRING__VARCHAR.fd3829b376": ["model.evmos_models.silver__blockchain"], "test.evmos_models.not_null_silver__blockchain_BLOCK_ID.5997704c2b": ["model.evmos_models.silver__blockchain"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_ID__NUMBER__FLOAT.254cf4f40e": ["model.evmos_models.silver__blockchain"], "test.evmos_models.not_null_silver__blockchain_BLOCK_TIMESTAMP.936901e9b8": ["model.evmos_models.silver__blockchain"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.9dc38be292": ["model.evmos_models.silver__blockchain"], "test.evmos_models.not_null_silver__blockchain_BLOCK_SIZE.9120ec052a": ["model.evmos_models.silver__blockchain"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_SIZE__NUMBER__FLOAT.36f07f3fba": ["model.evmos_models.silver__blockchain"], "test.evmos_models.not_null_silver__blockchain_BLOCK_HEADER.0b30826529": ["model.evmos_models.silver__blockchain"], "test.evmos_models.not_null_silver__blockchain_BLOCK_ID_OBJECT.dbc8f0771a": ["model.evmos_models.silver__blockchain"], "test.evmos_models.not_null_silver__blockchain_NUM_TXS.4e5926d643": ["model.evmos_models.silver__blockchain"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_NUM_TXS__NUMBER__FLOAT.258ab6cc34": ["model.evmos_models.silver__blockchain"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blockchain_BLOCK_ID.70f4075332": ["model.evmos_models.silver__blockchain"], "test.evmos_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": ["model.evmos_models.silver__blocks"], "test.evmos_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": ["model.evmos_models.silver__blocks"], "test.evmos_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": ["model.evmos_models.silver__blocks"], "test.evmos_models.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": ["model.evmos_models.silver__blocks"], "test.evmos_models.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": ["model.evmos_models.silver__blocks"], "test.evmos_models.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_HASH__STRING__VARCHAR.985e07aa79": ["model.evmos_models.silver__blocks"], "test.evmos_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": ["model.evmos_models.silver__blocks"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blocks_CHAIN_ID__BLOCK_ID.00ab619aa5": ["model.evmos_models.silver__blocks"], "test.evmos_models.sequence_gaps_silver__blocks_BLOCK_ID.0254cbc422": ["model.evmos_models.silver__blocks"], "test.evmos_models.not_null_silver__msgs_BLOCK_ID.1de1a37994": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0": ["model.evmos_models.silver__msgs"], "test.evmos_models.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": ["model.evmos_models.silver__msgs"], "test.evmos_models.not_null_silver__msgs_TX_ID.59a107fa1e": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__STRING__VARCHAR.007224ef8b": ["model.evmos_models.silver__msgs"], "test.evmos_models.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__NUMBER__FLOAT.c2035fb2bc": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_SUB_GROUP__NUMBER__FLOAT.1036402d60": ["model.evmos_models.silver__msgs"], "test.evmos_models.not_null_silver__msgs_MSG_INDEX.227765e0bf": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5": ["model.evmos_models.silver__msgs"], "test.evmos_models.not_null_silver__msgs_MSG_TYPE.312b195565": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__STRING__VARCHAR.ca4da74e2a": ["model.evmos_models.silver__msgs"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msgs_TX_ID__MSG_INDEX.73756b76d1": ["model.evmos_models.silver__msgs"], "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__3.2f4ade795a": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284": ["model.evmos_models.silver_observability__blocks_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__3.9eb4f223a6": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138": ["model.evmos_models.silver_observability__transactions_completeness"], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2": ["model.evmos_models.silver_observability__transactions_completeness"], "source.evmos_models.crosschain.dim_date_hours": [], "source.evmos_models.crosschain.dim_labels": [], "source.evmos_models.crosschain.dim_dates": [], "source.evmos_models.crosschain_silver.number_sequence": [], "source.evmos_models.bronze_streamline.eth_blocks": [], "source.evmos_models.bronze_streamline.eth_transactions": [], "source.evmos_models.bronze_streamline.tendermint_blocks": [], "source.evmos_models.bronze_streamline.tendermint_transactions": [], "source.evmos_models.bronze_streamline.tendermint_validators": [], "source.evmos_models.bronze_streamline.address_labels": [], "source.evmos_models.bronze.sample_blocks": [], "source.evmos_models.bronze.sample_txs": [], "source.evmos_models.osmo.asset_metadata": []}, "child_map": {"model.evmos_models.gov__fact_validators": ["model.evmos_models.core__fact_validators", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_ADDRESS.95fbe5342e", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_BLOCKCHAIN.7cf8f7a92c", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_CREATOR.18aee719fc", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_DELEGATOR_SHARES.24087433c1", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_JAILED.5d66da1491", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL.4fe2c43b65", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_SUBTYPE.e0c797ce2d", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_TYPE.25a2422c81", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_CHANGE_RATE.089f47296a", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_RATE.4a85f9a318", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MIN_SELF_DELEGATION.d05f8a117b", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_PROJECT_NAME.5cc1c00d71", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RANK.c623385581", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RATE.e6007c777a", "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RAW_METADATA.1478081a3d"], "model.evmos_models.core__dim_labels": ["test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__bridge.4ee3b54c5e", "test.evmos_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.evmos_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "test.evmos_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "test.evmos_models.not_null_core__dim_labels_LABEL.05696d692d", "test.evmos_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "test.evmos_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed"], "model.evmos_models.core__fact_msgs": ["test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946"], "model.evmos_models.core__fact_transfers": ["test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382"], "model.evmos_models.core__fact_validators": ["model.evmos_models.core__dim_labels", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216"], "model.evmos_models.core__fact_msg_attributes": ["test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb"], "model.evmos_models.core__fact_blocks": ["test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2"], "model.evmos_models.core__dim_tokens": ["model.evmos_models.core__dim_labels", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd"], "model.evmos_models.core__fact_transactions": ["test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6", "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e", "test.evmos_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f", "test.evmos_models.not_null_core__fact_transactions_FEE.f477aa43d7", "test.evmos_models.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3"], "model.evmos_models.bronze__streamline_FR_eth_transactions": ["model.evmos_models.streamline__complete_eth_transactions"], "model.evmos_models.bronze__streamline_FR_tendermint_validators": ["model.evmos_models.streamline__complete_tendermint_validators"], "model.evmos_models.bronze__streamline_eth_blocks": ["model.evmos_models.streamline__complete_eth_blocks"], "model.evmos_models.bronze__streamline_FR_eth_blocks": ["model.evmos_models.streamline__complete_eth_blocks"], "model.evmos_models.bronze__streamline_eth_transactions": ["model.evmos_models.streamline__complete_eth_transactions"], "model.evmos_models.bronze__streamline_FR_tendermint_transactions": ["model.evmos_models.silver__transactions", "model.evmos_models.streamline__complete_tendermint_transactions"], "model.evmos_models.bronze__streamline_tendermint_validators": ["model.evmos_models.streamline__complete_tendermint_validators"], "model.evmos_models.bronze__streamline_FR_tendermint_blocks": ["model.evmos_models.silver__blocks", "model.evmos_models.streamline__complete_tendermint_blocks"], "model.evmos_models.bronze__streamline_tendermint_blocks": ["model.evmos_models.silver__blocks", "model.evmos_models.streamline__complete_tendermint_blocks"], "model.evmos_models.bronze__streamline_tendermint_transactions": ["model.evmos_models.silver__transactions", "model.evmos_models.silver_observability__transactions_completeness", "model.evmos_models.streamline__complete_tendermint_transactions"], "model.evmos_models.streamline__blocks": ["model.evmos_models.streamline__eth_blocks_realtime", "model.evmos_models.streamline__eth_blocks_realtime", "model.evmos_models.streamline__eth_transactions_realtime", "model.evmos_models.streamline__eth_transactions_realtime", "model.evmos_models.streamline__tendermint_blocks_realtime", "model.evmos_models.streamline__tendermint_blocks_realtime", "model.evmos_models.streamline__tendermint_transactions_realtime", "model.evmos_models.streamline__tendermint_transactions_realtime", "model.evmos_models.streamline__tendermint_validators_realtime", "model.evmos_models.streamline__tendermint_validators_realtime"], "model.evmos_models.streamline__eth_blocks_realtime": [], "model.evmos_models.streamline__eth_transactions_realtime": [], "model.evmos_models.streamline__tendermint_transactions_realtime": [], "model.evmos_models.streamline__tendermint_blocks_realtime": [], "model.evmos_models.streamline__tendermint_validators_realtime": [], "model.evmos_models.streamline__complete_eth_blocks": ["model.evmos_models.streamline__eth_blocks_realtime"], "model.evmos_models.streamline__complete_tendermint_transactions": ["model.evmos_models.streamline__tendermint_transactions_realtime"], "model.evmos_models.streamline__complete_tendermint_blocks": ["model.evmos_models.streamline__tendermint_blocks_realtime"], "model.evmos_models.streamline__complete_tendermint_validators": ["model.evmos_models.streamline__tendermint_validators_realtime"], "model.evmos_models.streamline__complete_eth_transactions": ["model.evmos_models.streamline__eth_transactions_realtime"], "model.evmos_models.silver__msgs": ["model.evmos_models.core__fact_msgs", "model.evmos_models.silver__msg_attributes", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__NUMBER__FLOAT.c2035fb2bc", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_SUB_GROUP__NUMBER__FLOAT.1036402d60", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__STRING__VARCHAR.ca4da74e2a", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__STRING__VARCHAR.007224ef8b", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172", "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msgs_TX_ID__MSG_INDEX.73756b76d1", "test.evmos_models.not_null_silver__msgs_BLOCK_ID.1de1a37994", "test.evmos_models.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79", "test.evmos_models.not_null_silver__msgs_MSG_INDEX.227765e0bf", "test.evmos_models.not_null_silver__msgs_MSG_TYPE.312b195565", "test.evmos_models.not_null_silver__msgs_TX_ID.59a107fa1e", "test.evmos_models.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2"], "model.evmos_models.silver__validators": ["model.evmos_models.gov__fact_validators", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__evmos.03ce0c8a26", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__validators_ADDRESS__CREATOR__BLOCKCHAIN.818d7392ef", "test.evmos_models.not_null_silver__validators_ADDRESS.044bdd0fb3", "test.evmos_models.not_null_silver__validators_BLOCKCHAIN.8d62ff2215", "test.evmos_models.not_null_silver__validators_CREATOR.29e051ca7b", "test.evmos_models.not_null_silver__validators_DELEGATOR_SHARES.89b722f278", "test.evmos_models.not_null_silver__validators_JAILED.f85ae4ab21", "test.evmos_models.not_null_silver__validators_LABEL.5e8c7267ff", "test.evmos_models.not_null_silver__validators_LABEL_SUBTYPE.64be738825", "test.evmos_models.not_null_silver__validators_LABEL_TYPE.9ac3147d2a", "test.evmos_models.not_null_silver__validators_MAX_CHANGE_RATE.6156472781", "test.evmos_models.not_null_silver__validators_MAX_RATE.24b5d3c90d", "test.evmos_models.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9", "test.evmos_models.not_null_silver__validators_PROJECT_NAME.b8f893f8e7", "test.evmos_models.not_null_silver__validators_RANK.2e8e4ef4a4", "test.evmos_models.not_null_silver__validators_RATE.fea467fa10", "test.evmos_models.not_null_silver__validators_RAW_METADATA.fb6370f348"], "model.evmos_models.silver__transactions": ["model.evmos_models.silver__msgs", "model.evmos_models.silver__transactions_final", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_ID__STRING__VARCHAR.81b523ec1d", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SUCCEEDED__BOOLEAN.1f7ce5b336", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8451af7915", "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b", "test.evmos_models.not_null_silver__transactions_BLOCK_ID.ba1565770d", "test.evmos_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "test.evmos_models.not_null_silver__transactions_GAS_USED.1c943486c0", "test.evmos_models.not_null_silver__transactions_GAS_WANTED.440469f6c5", "test.evmos_models.not_null_silver__transactions_MSGS.e30a3fea27", "test.evmos_models.not_null_silver__transactions_TX_CODE.080a71cc61", "test.evmos_models.not_null_silver__transactions_TX_ID.5bc0e20339", "test.evmos_models.not_null_silver__transactions_TX_LOG.1ceefab63d", "test.evmos_models.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885", "test.evmos_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0"], "model.evmos_models.silver__transactions_final": ["model.evmos_models.core__fact_transactions", "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_ID.bf1b3be3d9", "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_TIMESTAMP.ea92ba4a11", "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_CODESPACE.1a2bc35449", "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_USED.a3513b2796", "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_WANTED.8599c41151", "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_MSGS.243f811eab", "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_ID.c258bff1f9", "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_SUCCEEDED.8412d10220", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_final_TX_ID.09096ac176", "test.evmos_models.not_null_silver__transactions_final_FEE.c284e11dcd", "test.evmos_models.not_null_silver__transactions_final_TX_FROM.12296b6fae"], "model.evmos_models.silver__msg_attributes": ["model.evmos_models.core__fact_msg_attributes", "model.evmos_models.silver__transactions_final", "model.evmos_models.silver__transfers", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__NUMBER__FLOAT.3ff8ce7ee1", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_SUB_GROUP__NUMBER__FLOAT.ffdfeb6ce8", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__STRING__VARCHAR.20bcdff679", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__STRING__VARCHAR.f3a5b084a1", "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msg_attributes_TX_ID__MSG_INDEX__ATTRIBUTE_INDEX.e7c19e7974", "test.evmos_models.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf", "test.evmos_models.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9", "test.evmos_models.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717", "test.evmos_models.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361", "test.evmos_models.not_null_silver__msg_attributes_TX_ID.34f30240c0"], "model.evmos_models.silver__blocks": ["model.evmos_models.bronze_api__get_blockchain", "model.evmos_models.core__fact_blocks", "model.evmos_models.silver__transactions", "model.evmos_models.silver_observability__blocks_completeness", "model.evmos_models.silver_observability__transactions_completeness", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_HASH__STRING__VARCHAR.985e07aa79", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2", "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blocks_CHAIN_ID__BLOCK_ID.00ab619aa5", "test.evmos_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "test.evmos_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.evmos_models.not_null_silver__blocks_CHAIN_ID.a10569ee35", "test.evmos_models.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74", "test.evmos_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "test.evmos_models.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877", "test.evmos_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "test.evmos_models.sequence_gaps_silver__blocks_BLOCK_ID.0254cbc422"], "model.evmos_models.silver__transfers": ["model.evmos_models.core__fact_transfers", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_AMOUNT__NUMBER__FLOAT.d9692a78f1", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CURRENCY__STRING__VARCHAR.a650f3fc35", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIVER__STRING__VARCHAR.b93628338d", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_SENDER__STRING__VARCHAR.4ae271899a", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_TYPE__STRING__VARCHAR.43a2c68273", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8d4833df5c", "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__BLOCK_ID__MSG_INDEX__CURRENCY.0b4f1afb10", "test.evmos_models.not_null_silver__transfers_AMOUNT.ba102cb51b", "test.evmos_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "test.evmos_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.evmos_models.not_null_silver__transfers_CURRENCY.4a8953d5ec", "test.evmos_models.not_null_silver__transfers_RECEIVER.965c9f325d", "test.evmos_models.not_null_silver__transfers_SENDER.0abbede6fe", "test.evmos_models.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f", "test.evmos_models.not_null_silver__transfers_TX_ID.1be05d8ee2", "test.evmos_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af", "test.evmos_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a"], "model.evmos_models.silver__blockchain": ["model.evmos_models.silver_observability__transactions_completeness", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_ID__NUMBER__FLOAT.254cf4f40e", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_SIZE__NUMBER__FLOAT.36f07f3fba", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.9dc38be292", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_CHAIN_ID__STRING__VARCHAR.fd3829b376", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_NUM_TXS__NUMBER__FLOAT.258ab6cc34", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blockchain_BLOCK_ID.70f4075332", "test.evmos_models.not_null_silver__blockchain_BLOCK_HEADER.0b30826529", "test.evmos_models.not_null_silver__blockchain_BLOCK_ID.5997704c2b", "test.evmos_models.not_null_silver__blockchain_BLOCK_ID_OBJECT.dbc8f0771a", "test.evmos_models.not_null_silver__blockchain_BLOCK_SIZE.9120ec052a", "test.evmos_models.not_null_silver__blockchain_BLOCK_TIMESTAMP.936901e9b8", "test.evmos_models.not_null_silver__blockchain_CHAIN_ID.c381503839", "test.evmos_models.not_null_silver__blockchain_NUM_TXS.4e5926d643"], "model.evmos_models.silver__labels": ["model.evmos_models.core__dim_labels"], "model.evmos_models.silver_observability__blocks_completeness": ["test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227", "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__3.2f4ade795a", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284", "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff", "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37", "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd", "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7", "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce", "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041", "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7", "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc", "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63"], "model.evmos_models.silver_observability__transactions_completeness": ["test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138", "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed", "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__3.9eb4f223a6", "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2", "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce", "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6", "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34", "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807", "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c", "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0", "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c", "test.evmos_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c", "test.evmos_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776"], "model.evmos_models.bronze_api__get_validator_metadata_lcd": ["model.evmos_models.silver__validators"], "model.evmos_models.bronze_api__get_blockchain": ["model.evmos_models.silver__blockchain"], "operation.evmos_models.evmos_models-on-run-start-0": [], "operation.evmos_models.evmos_models-on-run-start-1": [], "operation.evmos_models.evmos_models-on-run-end-0": [], "model.fsc_utils._datashare___create_gold": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_ADDRESS.95fbe5342e": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_BLOCKCHAIN.7cf8f7a92c": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_CREATOR.18aee719fc": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_TYPE.25a2422c81": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL_SUBTYPE.e0c797ce2d": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_LABEL.4fe2c43b65": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_PROJECT_NAME.5cc1c00d71": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_DELEGATOR_SHARES.24087433c1": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_JAILED.5d66da1491": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RATE.e6007c777a": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_CHANGE_RATE.089f47296a": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MAX_RATE.4a85f9a318": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_MIN_SELF_DELEGATION.d05f8a117b": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RANK.c623385581": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_gov__fact_validators_RAW_METADATA.1478081a3d": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": [], "test.evmos_models.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605": [], "test.evmos_models.not_null_core__fact_transactions_FEE.f477aa43d7": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60": [], "test.evmos_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": [], "test.evmos_models.not_null_core__dim_labels_CREATOR.0c77d5749c": [], "test.evmos_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__bridge.4ee3b54c5e": [], "test.evmos_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": [], "test.evmos_models.not_null_core__dim_labels_LABEL.05696d692d": [], "test.evmos_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4": [], "test.evmos_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": [], "test.evmos_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": [], "test.evmos_models.not_null_silver__transfers_TX_ID.1be05d8ee2": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb": [], "test.evmos_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a": [], "test.evmos_models.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_TYPE__STRING__VARCHAR.43a2c68273": [], "test.evmos_models.not_null_silver__transfers_SENDER.0abbede6fe": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_SENDER__STRING__VARCHAR.4ae271899a": [], "test.evmos_models.not_null_silver__transfers_AMOUNT.ba102cb51b": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_AMOUNT__NUMBER__FLOAT.d9692a78f1": [], "test.evmos_models.not_null_silver__transfers_CURRENCY.4a8953d5ec": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CURRENCY__STRING__VARCHAR.a650f3fc35": [], "test.evmos_models.not_null_silver__transfers_RECEIVER.965c9f325d": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RECEIVER__STRING__VARCHAR.b93628338d": [], "test.evmos_models.not_null_silver__transfers__INSERTED_TIMESTAMP.595c1c618a": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8d4833df5c": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__BLOCK_ID__MSG_INDEX__CURRENCY.0b4f1afb10": [], "test.evmos_models.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1": [], "test.evmos_models.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": [], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": [], "test.evmos_models.not_null_silver__msg_attributes_TX_ID.34f30240c0": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__STRING__VARCHAR.f3a5b084a1": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__NUMBER__FLOAT.3ff8ce7ee1": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_SUB_GROUP__NUMBER__FLOAT.ffdfeb6ce8": [], "test.evmos_models.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d": [], "test.evmos_models.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__STRING__VARCHAR.20bcdff679": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msg_attributes_TX_ID__MSG_INDEX__ATTRIBUTE_INDEX.e7c19e7974": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_ID.bf1b3be3d9": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_BLOCK_TIMESTAMP.ea92ba4a11": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_ID.c258bff1f9": [], "test.evmos_models.not_null_silver__transactions_final_TX_FROM.12296b6fae": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_TX_SUCCEEDED.8412d10220": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_CODESPACE.1a2bc35449": [], "test.evmos_models.not_null_silver__transactions_final_FEE.c284e11dcd": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_USED.a3513b2796": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_GAS_WANTED.8599c41151": [], "test.evmos_models.dbt_expectations_expect_column_to_exist_silver__transactions_final_MSGS.243f811eab": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_final_TX_ID.09096ac176": [], "test.evmos_models.not_null_silver__transactions_BLOCK_ID.ba1565770d": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": [], "test.evmos_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": [], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__2.eb1ca8c4ac": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": [], "test.evmos_models.not_null_silver__transactions_TX_ID.5bc0e20339": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_ID__STRING__VARCHAR.81b523ec1d": [], "test.evmos_models.not_null_silver__transactions_GAS_USED.1c943486c0": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": [], "test.evmos_models.not_null_silver__transactions_GAS_WANTED.440469f6c5": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff": [], "test.evmos_models.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_SUCCEEDED__BOOLEAN.1f7ce5b336": [], "test.evmos_models.not_null_silver__transactions_TX_CODE.080a71cc61": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064": [], "test.evmos_models.not_null_silver__transactions_MSGS.e30a3fea27": [], "test.evmos_models.not_null_silver__transactions_TX_LOG.1ceefab63d": [], "test.evmos_models.not_null_silver__transactions__INSERTED_TIMESTAMP.3b2b0fb3b0": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__INSERTED_TIMESTAMP__TIMESTAMP_NTZ__TIMESTAMP_LTZ.8451af7915": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b": [], "test.evmos_models.not_null_silver__validators_ADDRESS.044bdd0fb3": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e": [], "test.evmos_models.not_null_silver__validators_BLOCKCHAIN.8d62ff2215": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__evmos.03ce0c8a26": [], "test.evmos_models.not_null_silver__validators_CREATOR.29e051ca7b": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59": [], "test.evmos_models.not_null_silver__validators_LABEL_TYPE.9ac3147d2a": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8": [], "test.evmos_models.not_null_silver__validators_LABEL_SUBTYPE.64be738825": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b": [], "test.evmos_models.not_null_silver__validators_LABEL.5e8c7267ff": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3": [], "test.evmos_models.not_null_silver__validators_PROJECT_NAME.b8f893f8e7": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579": [], "test.evmos_models.not_null_silver__validators_DELEGATOR_SHARES.89b722f278": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb": [], "test.evmos_models.not_null_silver__validators_JAILED.f85ae4ab21": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18": [], "test.evmos_models.not_null_silver__validators_RATE.fea467fa10": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d": [], "test.evmos_models.not_null_silver__validators_MAX_CHANGE_RATE.6156472781": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85": [], "test.evmos_models.not_null_silver__validators_MAX_RATE.24b5d3c90d": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38": [], "test.evmos_models.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2": [], "test.evmos_models.not_null_silver__validators_RANK.2e8e4ef4a4": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0": [], "test.evmos_models.not_null_silver__validators_RAW_METADATA.fb6370f348": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__validators_ADDRESS__CREATOR__BLOCKCHAIN.818d7392ef": [], "test.evmos_models.not_null_silver__blockchain_CHAIN_ID.c381503839": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_CHAIN_ID__STRING__VARCHAR.fd3829b376": [], "test.evmos_models.not_null_silver__blockchain_BLOCK_ID.5997704c2b": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_ID__NUMBER__FLOAT.254cf4f40e": [], "test.evmos_models.not_null_silver__blockchain_BLOCK_TIMESTAMP.936901e9b8": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.9dc38be292": [], "test.evmos_models.not_null_silver__blockchain_BLOCK_SIZE.9120ec052a": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_BLOCK_SIZE__NUMBER__FLOAT.36f07f3fba": [], "test.evmos_models.not_null_silver__blockchain_BLOCK_HEADER.0b30826529": [], "test.evmos_models.not_null_silver__blockchain_BLOCK_ID_OBJECT.dbc8f0771a": [], "test.evmos_models.not_null_silver__blockchain_NUM_TXS.4e5926d643": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blockchain_NUM_TXS__NUMBER__FLOAT.258ab6cc34": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blockchain_BLOCK_ID.70f4075332": [], "test.evmos_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": [], "test.evmos_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": [], "test.evmos_models.not_null_silver__blocks_CHAIN_ID.a10569ee35": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": [], "test.evmos_models.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": [], "test.evmos_models.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": [], "test.evmos_models.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_HASH__STRING__VARCHAR.985e07aa79": [], "test.evmos_models.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__blocks_CHAIN_ID__BLOCK_ID.00ab619aa5": [], "test.evmos_models.sequence_gaps_silver__blocks_BLOCK_ID.0254cbc422": [], "test.evmos_models.not_null_silver__msgs_BLOCK_ID.1de1a37994": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0": [], "test.evmos_models.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": [], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": [], "test.evmos_models.not_null_silver__msgs_TX_ID.59a107fa1e": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__STRING__VARCHAR.007224ef8b": [], "test.evmos_models.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__NUMBER__FLOAT.c2035fb2bc": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_SUB_GROUP__NUMBER__FLOAT.1036402d60": [], "test.evmos_models.not_null_silver__msgs_MSG_INDEX.227765e0bf": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5": [], "test.evmos_models.not_null_silver__msgs_MSG_TYPE.312b195565": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__STRING__VARCHAR.ca4da74e2a": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver__msgs_TX_ID__MSG_INDEX.73756b76d1": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce": [], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__3.2f4ade795a": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928": [], "test.evmos_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c": [], "test.evmos_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__3.9eb4f223a6": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb": [], "test.evmos_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c": [], "test.evmos_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138": [], "test.evmos_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2": [], "source.evmos_models.crosschain.dim_date_hours": [], "source.evmos_models.crosschain.dim_labels": ["model.evmos_models.silver__labels"], "source.evmos_models.crosschain.dim_dates": [], "source.evmos_models.crosschain_silver.number_sequence": ["model.evmos_models.silver_observability__blocks_completeness"], "source.evmos_models.bronze_streamline.eth_blocks": ["model.evmos_models.bronze__streamline_FR_eth_blocks", "model.evmos_models.bronze__streamline_FR_eth_blocks", "model.evmos_models.bronze__streamline_eth_blocks", "model.evmos_models.bronze__streamline_eth_blocks"], "source.evmos_models.bronze_streamline.eth_transactions": ["model.evmos_models.bronze__streamline_FR_eth_transactions", "model.evmos_models.bronze__streamline_FR_eth_transactions", "model.evmos_models.bronze__streamline_eth_transactions", "model.evmos_models.bronze__streamline_eth_transactions"], "source.evmos_models.bronze_streamline.tendermint_blocks": ["model.evmos_models.bronze__streamline_FR_tendermint_blocks", "model.evmos_models.bronze__streamline_FR_tendermint_blocks", "model.evmos_models.bronze__streamline_tendermint_blocks", "model.evmos_models.bronze__streamline_tendermint_blocks"], "source.evmos_models.bronze_streamline.tendermint_transactions": ["model.evmos_models.bronze__streamline_FR_tendermint_transactions", "model.evmos_models.bronze__streamline_FR_tendermint_transactions", "model.evmos_models.bronze__streamline_tendermint_transactions", "model.evmos_models.bronze__streamline_tendermint_transactions"], "source.evmos_models.bronze_streamline.tendermint_validators": ["model.evmos_models.bronze__streamline_FR_tendermint_validators", "model.evmos_models.bronze__streamline_FR_tendermint_validators", "model.evmos_models.bronze__streamline_tendermint_validators", "model.evmos_models.bronze__streamline_tendermint_validators"], "source.evmos_models.bronze_streamline.address_labels": [], "source.evmos_models.bronze.sample_blocks": [], "source.evmos_models.bronze.sample_txs": [], "source.evmos_models.osmo.asset_metadata": ["model.evmos_models.core__dim_tokens"]}}